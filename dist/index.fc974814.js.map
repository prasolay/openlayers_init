{"mappings":"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","sources":["<anon>","src/index.ts","node_modules/ol/source/OSM.js","node_modules/ol/source/XYZ.js","node_modules/ol/source/TileImage.js","node_modules/ol/events/EventType.js","node_modules/ol/ImageTile.js","node_modules/ol/Tile.js","node_modules/ol/events/Target.js","node_modules/ol/Disposable.js","node_modules/ol/events/Event.js","node_modules/ol/functions.js","node_modules/ol/array.js","node_modules/ol/obj.js","node_modules/ol/TileState.js","node_modules/ol/util.js","node_modules/ol/easing.js","node_modules/ol/dom.js","node_modules/ol/has.js","node_modules/ol/Image.js","node_modules/ol/ImageState.js","node_modules/ol/events.js","node_modules/ol/reproj/Tile.js","node_modules/ol/reproj/common.js","node_modules/ol/reproj/Triangulation.js","node_modules/ol/transform.js","node_modules/ol/asserts.js","node_modules/ol/extent.js","node_modules/ol/extent/Relationship.js","node_modules/ol/proj.js","node_modules/ol/proj/epsg3857.js","node_modules/ol/proj/Projection.js","node_modules/ol/proj/Units.js","node_modules/ol/proj/epsg4326.js","node_modules/ol/proj/projections.js","node_modules/ol/proj/transforms.js","node_modules/ol/math.js","node_modules/ol/coordinate.js","node_modules/ol/string.js","node_modules/ol/sphere.js","node_modules/ol/proj/utm.js","node_modules/ol/console.js","node_modules/ol/reproj.js","node_modules/ol/source/UrlTile.js","node_modules/ol/source/TileEventType.js","node_modules/ol/source/Tile.js","node_modules/ol/source/Source.js","node_modules/ol/Object.js","node_modules/ol/ObjectEventType.js","node_modules/ol/Observable.js","node_modules/ol/tilegrid.js","node_modules/ol/tilegrid/TileGrid.js","node_modules/ol/TileRange.js","node_modules/ol/tilegrid/common.js","node_modules/ol/tilecoord.js","node_modules/ol/geom/flat/intersectsextent.js","node_modules/ol/geom/flat/segments.js","node_modules/ol/geom/flat/contains.js","node_modules/ol/size.js","node_modules/ol/tileurlfunction.js","node_modules/ol/uri.js","node_modules/ol/layer/Tile.js","node_modules/ol/layer/BaseTile.js","node_modules/ol/layer/Layer.js","node_modules/ol/layer/Base.js","node_modules/ol/layer/Property.js","node_modules/ol/render/EventType.js","node_modules/ol/View.js","node_modules/ol/ViewHint.js","node_modules/ol/ViewProperty.js","node_modules/ol/centerconstraint.js","node_modules/ol/resolutionconstraint.js","node_modules/ol/rotationconstraint.js","node_modules/ol/geom/Polygon.js","node_modules/ol/geom/LinearRing.js","node_modules/ol/geom/SimpleGeometry.js","node_modules/ol/geom/Geometry.js","node_modules/ol/geom/flat/transform.js","node_modules/ol/geom/flat/closest.js","node_modules/ol/geom/flat/deflate.js","node_modules/ol/geom/flat/simplify.js","node_modules/ol/geom/flat/inflate.js","node_modules/ol/geom/flat/area.js","node_modules/ol/geom/Point.js","node_modules/ol/geom/flat/interiorpoint.js","node_modules/ol/geom/flat/orient.js","node_modules/ol/geom/flat/reverse.js","node_modules/ol/layer/TileProperty.js","node_modules/ol/renderer/canvas/TileLayer.js","node_modules/ol/renderer/canvas/Layer.js","node_modules/ol/renderer/Layer.js","node_modules/ol/render/Event.js","node_modules/ol/render/canvas/ZIndexContext.js","node_modules/ol/color.js","node_modules/color-space/lchuv.js","node_modules/color-space/luv.js","node_modules/color-space/xyz.js","node_modules/color-space/rgb.js","node_modules/color-rgba/index.js","node_modules/color-parse/index.js","node_modules/color-name/index.js","node_modules/color-space/hsl.js","node_modules/ol/DataTile.js","node_modules/ol/structs/LRUCache.js","node_modules/ol/reproj/DataTile.js","node_modules/ol/reproj/glreproj.js","node_modules/ol/vec/mat4.js","node_modules/ol/webgl/Canvas.js"],"sourcesContent":["\n/**\n * @module ol/source/OSM\n */ /**\n * @module ol/source/XYZ\n */ /**\n * @module ol/source/TileImage\n */ /**\n * @module ol/events/EventType\n */ /**\n * @enum {string}\n * @const\n */ var $294047c5e65f31a3$export$2e2bcd8739ae039 = {\n    /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~BaseEvent#change\n   * @api\n   */ CHANGE: 'change',\n    /**\n   * Generic error event. Triggered when an error occurs.\n   * @event module:ol/events/Event~BaseEvent#error\n   * @api\n   */ ERROR: 'error',\n    BLUR: 'blur',\n    CLEAR: 'clear',\n    CONTEXTMENU: 'contextmenu',\n    CLICK: 'click',\n    DBLCLICK: 'dblclick',\n    DRAGENTER: 'dragenter',\n    DRAGOVER: 'dragover',\n    DROP: 'drop',\n    FOCUS: 'focus',\n    KEYDOWN: 'keydown',\n    KEYPRESS: 'keypress',\n    LOAD: 'load',\n    RESIZE: 'resize',\n    TOUCHMOVE: 'touchmove',\n    WHEEL: 'wheel'\n};\n\n\n/**\n * @module ol/ImageTile\n */ /**\n * @module ol/Tile\n */ /**\n * @module ol/events/Target\n */ /**\n * @module ol/Disposable\n */ /**\n * @classdesc\n * Objects that need to clean up after themselves.\n */ class $3273ed08087da3da$var$Disposable {\n    constructor(){\n        /**\n     * The object has already been disposed.\n     * @type {boolean}\n     * @protected\n     */ this.disposed = false;\n    }\n    /**\n   * Clean up.\n   */ dispose() {\n        if (!this.disposed) {\n            this.disposed = true;\n            this.disposeInternal();\n        }\n    }\n    /**\n   * Extension point for disposable objects.\n   * @protected\n   */ disposeInternal() {}\n}\nvar $3273ed08087da3da$export$2e2bcd8739ae039 = $3273ed08087da3da$var$Disposable;\n\n\n/**\n * @module ol/events/Event\n */ /**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */ class $aeedce20e9577100$var$BaseEvent {\n    /**\n   * @param {string} type Type.\n   */ constructor(type){\n        /**\n     * @type {boolean}\n     */ this.propagationStopped;\n        /**\n     * @type {boolean}\n     */ this.defaultPrevented;\n        /**\n     * The event type.\n     * @type {string}\n     * @api\n     */ this.type = type;\n        /**\n     * The event target.\n     * @type {Object}\n     * @api\n     */ this.target = null;\n    }\n    /**\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\n   * will be fired.\n   * @api\n   */ preventDefault() {\n        this.defaultPrevented = true;\n    }\n    /**\n   * Stop event propagation.\n   * @api\n   */ stopPropagation() {\n        this.propagationStopped = true;\n    }\n}\nfunction $aeedce20e9577100$export$51134cce184326b9(evt) {\n    evt.stopPropagation();\n}\nfunction $aeedce20e9577100$export$fa3b29edae795ef4(evt) {\n    evt.preventDefault();\n}\nvar $aeedce20e9577100$export$2e2bcd8739ae039 = $aeedce20e9577100$var$BaseEvent;\n\n\n/**\n * @module ol/functions\n */ /**\n * @module ol/array\n */ /**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */ function $b998d41b678ed5d1$export$2e0ae67339d5f1ac(haystack, needle, comparator) {\n    let mid, cmp;\n    comparator = comparator || $b998d41b678ed5d1$export$fcb633242ef15540;\n    let low = 0;\n    let high = haystack.length;\n    let found = false;\n    while(low < high){\n        /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */ mid = low + (high - low >> 1);\n        cmp = +comparator(haystack[mid], needle);\n        if (cmp < 0.0) /* Too low. */ low = mid + 1;\n        else {\n            /* Key found or too high */ high = mid;\n            found = !cmp;\n        }\n    }\n    /* Key not found. */ return found ? low : ~low;\n}\nfunction $b998d41b678ed5d1$export$fcb633242ef15540(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction $b998d41b678ed5d1$export$4fa3190a997c3d8f(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n}\nfunction $b998d41b678ed5d1$export$8a3786cc03fdb777(arr, target, direction) {\n    if (arr[0] <= target) return 0;\n    const n = arr.length;\n    if (target <= arr[n - 1]) return n - 1;\n    if (typeof direction === 'function') {\n        for(let i = 1; i < n; ++i){\n            const candidate = arr[i];\n            if (candidate === target) return i;\n            if (candidate < target) {\n                if (direction(target, arr[i - 1], candidate) > 0) return i - 1;\n                return i;\n            }\n        }\n        return n - 1;\n    }\n    if (direction > 0) {\n        for(let i = 1; i < n; ++i){\n            if (arr[i] < target) return i - 1;\n        }\n        return n - 1;\n    }\n    if (direction < 0) {\n        for(let i = 1; i < n; ++i){\n            if (arr[i] <= target) return i;\n        }\n        return n - 1;\n    }\n    for(let i = 1; i < n; ++i){\n        if (arr[i] == target) return i;\n        if (arr[i] < target) {\n            if (arr[i - 1] - target < target - arr[i]) return i - 1;\n            return i;\n        }\n    }\n    return n - 1;\n}\nfunction $b998d41b678ed5d1$export$292cfa960964f0e0(arr, begin, end) {\n    while(begin < end){\n        const tmp = arr[begin];\n        arr[begin] = arr[end];\n        arr[end] = tmp;\n        ++begin;\n        --end;\n    }\n}\nfunction $b998d41b678ed5d1$export$8b58be045bf06082(arr, data) {\n    const extension = Array.isArray(data) ? data : [\n        data\n    ];\n    const length = extension.length;\n    for(let i = 0; i < length; i++)arr[arr.length] = extension[i];\n}\nfunction $b998d41b678ed5d1$export$cd7f480d6b8286c3(arr, obj) {\n    const i = arr.indexOf(obj);\n    const found = i > -1;\n    if (found) arr.splice(i, 1);\n    return found;\n}\nfunction $b998d41b678ed5d1$export$e9bab7fafb253603(arr1, arr2) {\n    const len1 = arr1.length;\n    if (len1 !== arr2.length) return false;\n    for(let i = 0; i < len1; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\nfunction $b998d41b678ed5d1$export$c7d3d1f96a700512(arr, compareFnc) {\n    const length = arr.length;\n    const tmp = Array(arr.length);\n    let i;\n    for(i = 0; i < length; i++)tmp[i] = {\n        index: i,\n        value: arr[i]\n    };\n    tmp.sort(function(a, b) {\n        return compareFnc(a.value, b.value) || a.index - b.index;\n    });\n    for(i = 0; i < arr.length; i++)arr[i] = tmp[i].value;\n}\nfunction $b998d41b678ed5d1$export$efa610630f9e181(arr, func, strict) {\n    const compare = func || $b998d41b678ed5d1$export$fcb633242ef15540;\n    return arr.every(function(currentVal, index) {\n        if (index === 0) return true;\n        const res = compare(arr[index - 1], currentVal);\n        return !(res > 0 || strict && res === 0);\n    });\n}\n\n\nfunction $013a1733c226ec50$export$22e23a2304399231() {\n    return true;\n}\nfunction $013a1733c226ec50$export$8f11cee4bdc7e668() {\n    return false;\n}\nfunction $013a1733c226ec50$export$1cd1943b3a73bbe8() {}\nfunction $013a1733c226ec50$export$ff83df6f9971435f(fn) {\n    /** @type {ReturnType} */ let lastResult;\n    /** @type {Array<any>|undefined} */ let lastArgs;\n    let lastThis;\n    /**\n   * @this {*} Only need to know if `this` changed, don't care what type\n   * @return {ReturnType} Memoized value\n   */ return function() {\n        const nextArgs = Array.prototype.slice.call(arguments);\n        if (!lastArgs || this !== lastThis || !(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(nextArgs, lastArgs)) {\n            lastThis = this;\n            lastArgs = nextArgs;\n            lastResult = fn.apply(this, arguments);\n        }\n        return lastResult;\n    };\n}\nfunction $013a1733c226ec50$export$4dbaaf6c79705e6c(getter) {\n    function promiseGetter() {\n        let value;\n        try {\n            value = getter();\n        } catch (err) {\n            return Promise.reject(err);\n        }\n        if (value instanceof Promise) return value;\n        return Promise.resolve(value);\n    }\n    return promiseGetter();\n}\n\n\n/**\n * @module ol/obj\n */ /**\n * Removes all properties from an object.\n * @param {Object<string, unknown>} object The object to clear.\n */ function $beaefe87199bb537$export$42ffd38884aecdac(object) {\n    for(const property in object)delete object[property];\n}\nfunction $beaefe87199bb537$export$dd1bc94b04021eeb(object) {\n    let property;\n    for(property in object)return false;\n    return !property;\n}\n\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */ /**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */ class $08c28d22c0cb5a39$var$Target extends (0, $3273ed08087da3da$export$2e2bcd8739ae039) {\n    /**\n   * @param {*} [target] Default event target for dispatched events.\n   */ constructor(target){\n        super();\n        /**\n     * @private\n     * @type {*}\n     */ this.eventTarget_ = target;\n        /**\n     * @private\n     * @type {Object<string, number>|null}\n     */ this.pendingRemovals_ = null;\n        /**\n     * @private\n     * @type {Object<string, number>|null}\n     */ this.dispatching_ = null;\n        /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>|null}\n     */ this.listeners_ = null;\n    }\n    /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */ addEventListener(type, listener) {\n        if (!type || !listener) return;\n        const listeners = this.listeners_ || (this.listeners_ = {});\n        const listenersForType = listeners[type] || (listeners[type] = []);\n        if (!listenersForType.includes(listener)) listenersForType.push(listener);\n    }\n    /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */ dispatchEvent(event) {\n        const isString = typeof event === 'string';\n        const type = isString ? event : event.type;\n        const listeners = this.listeners_ && this.listeners_[type];\n        if (!listeners) return;\n        const evt = isString ? new (0, $aeedce20e9577100$export$2e2bcd8739ae039)(event) : /** @type {Event} */ event;\n        if (!evt.target) evt.target = this.eventTarget_ || this;\n        const dispatching = this.dispatching_ || (this.dispatching_ = {});\n        const pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});\n        if (!(type in dispatching)) {\n            dispatching[type] = 0;\n            pendingRemovals[type] = 0;\n        }\n        ++dispatching[type];\n        let propagate;\n        for(let i = 0, ii = listeners.length; i < ii; ++i){\n            if ('handleEvent' in listeners[i]) propagate = /** @type {import(\"../events.js\").ListenerObject} */ listeners[i].handleEvent(evt);\n            else propagate = /** @type {import(\"../events.js\").ListenerFunction} */ listeners[i].call(this, evt);\n            if (propagate === false || evt.propagationStopped) {\n                propagate = false;\n                break;\n            }\n        }\n        if (--dispatching[type] === 0) {\n            let pr = pendingRemovals[type];\n            delete pendingRemovals[type];\n            while(pr--)this.removeEventListener(type, (0, $013a1733c226ec50$export$1cd1943b3a73bbe8));\n            delete dispatching[type];\n        }\n        return propagate;\n    }\n    /**\n   * Clean up.\n   * @override\n   */ disposeInternal() {\n        this.listeners_ && (0, $beaefe87199bb537$export$42ffd38884aecdac)(this.listeners_);\n    }\n    /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */ getListeners(type) {\n        return this.listeners_ && this.listeners_[type] || undefined;\n    }\n    /**\n   * @param {string} [type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */ hasListener(type) {\n        if (!this.listeners_) return false;\n        return type ? type in this.listeners_ : Object.keys(this.listeners_).length > 0;\n    }\n    /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */ removeEventListener(type, listener) {\n        if (!this.listeners_) return;\n        const listeners = this.listeners_[type];\n        if (!listeners) return;\n        const index = listeners.indexOf(listener);\n        if (index !== -1) {\n            if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n                // make listener a no-op, and remove later in #dispatchEvent()\n                listeners[index] = (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n                ++this.pendingRemovals_[type];\n            } else {\n                listeners.splice(index, 1);\n                if (listeners.length === 0) delete this.listeners_[type];\n            }\n        }\n    }\n}\nvar $08c28d22c0cb5a39$export$2e2bcd8739ae039 = $08c28d22c0cb5a39$var$Target;\n\n\n\n/**\n * @module ol/TileState\n */ /**\n * @enum {number}\n */ var $b8291d9739c3c64e$export$2e2bcd8739ae039 = {\n    IDLE: 0,\n    LOADING: 1,\n    LOADED: 2,\n    /**\n   * Indicates that tile loading failed\n   * @type {number}\n   */ ERROR: 3,\n    EMPTY: 4\n};\n\n\n/**\n * @module ol/util\n */ /**\n * @return {never} Any return.\n */ function $6c5e11070e371322$export$817eb92a8194bab0() {\n    throw new Error('Unimplemented abstract method.');\n}\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */ let $6c5e11070e371322$var$uidCounter_ = 0;\nfunction $6c5e11070e371322$export$5e82334337e0f204(obj) {\n    return obj.ol_uid || (obj.ol_uid = String(++$6c5e11070e371322$var$uidCounter_));\n}\nconst $6c5e11070e371322$export$a4ad2735b021c132 = '10.3.0';\n\n\n/**\n * @module ol/easing\n */ /**\n * Start slow and speed up.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */ function $c7ccf7e681a9b333$export$929e5a82286172a6(t) {\n    return Math.pow(t, 3);\n}\nfunction $c7ccf7e681a9b333$export$57636bb43b1ccbb0(t) {\n    return 1 - $c7ccf7e681a9b333$export$929e5a82286172a6(1 - t);\n}\nfunction $c7ccf7e681a9b333$export$9b47139b511b56e4(t) {\n    return 3 * t * t - 2 * t * t * t;\n}\nfunction $c7ccf7e681a9b333$export$45db2fc2f15997e7(t) {\n    return t;\n}\nfunction $c7ccf7e681a9b333$export$7f4472f6708afaf3(t) {\n    if (t < 0.5) return $c7ccf7e681a9b333$export$9b47139b511b56e4(2 * t);\n    return 1 - $c7ccf7e681a9b333$export$9b47139b511b56e4(2 * (t - 0.5));\n}\n\n\n/**\n * A function that takes a {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState.js';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   const xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     const data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */ /**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes a {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */ /**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */ /**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */ class $0f235d2d04095c6e$var$Tile extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [options] Tile options.\n   */ constructor(tileCoord, state, options){\n        super();\n        options = options ? options : {};\n        /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */ this.tileCoord = tileCoord;\n        /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */ this.state = state;\n        /**\n     * A key assigned to the tile. This is used in conjunction with a source key\n     * to determine if a cached version of this tile may be used by the renderer.\n     * @type {string}\n     */ this.key = '';\n        /**\n     * The duration for the opacity transition.\n     * @private\n     * @type {number}\n     */ this.transition_ = options.transition === undefined ? 250 : options.transition;\n        /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @private\n     * @type {Object<string, number>}\n     */ this.transitionStarts_ = {};\n        /**\n     * @type {boolean}\n     */ this.interpolate = !!options.interpolate;\n    }\n    /**\n   * @protected\n   */ changed() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */ release() {\n        if (this.state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\n        this.setState((0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY);\n    }\n    /**\n   * @return {string} Key.\n   */ getKey() {\n        return this.key + '/' + this.tileCoord;\n    }\n    /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */ getTileCoord() {\n        return this.tileCoord;\n    }\n    /**\n   * @return {import(\"./TileState.js\").default} State.\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */ setState(state) {\n        if (this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR && this.state > state) throw new Error('Tile load sequence violation');\n        this.state = state;\n        this.changed();\n    }\n    /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */ load() {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */ getAlpha(id, time) {\n        if (!this.transition_) return 1;\n        let start = this.transitionStarts_[id];\n        if (!start) {\n            start = time;\n            this.transitionStarts_[id] = start;\n        } else if (start === -1) return 1;\n        const delta = time - start + 1000 / 60; // avoid rendering at 0\n        if (delta >= this.transition_) return 1;\n        return (0, $c7ccf7e681a9b333$export$929e5a82286172a6)(delta / this.transition_);\n    }\n    /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */ inTransition(id) {\n        if (!this.transition_) return false;\n        return this.transitionStarts_[id] !== -1;\n    }\n    /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */ endTransition(id) {\n        if (this.transition_) this.transitionStarts_[id] = -1;\n    }\n    /**\n   * @override\n   */ disposeInternal() {\n        this.release();\n        super.disposeInternal();\n    }\n}\nvar $0f235d2d04095c6e$export$2e2bcd8739ae039 = $0f235d2d04095c6e$var$Tile;\n\n\n\n/**\n * @module ol/has\n */ const $67c66761d21428d0$var$ua = typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined' ? navigator.userAgent.toLowerCase() : '';\nconst $67c66761d21428d0$export$8442bdfd18b7b8a6 = $67c66761d21428d0$var$ua.includes('firefox');\nconst $67c66761d21428d0$export$3227bfbdaa9275de = $67c66761d21428d0$var$ua.includes('safari') && !$67c66761d21428d0$var$ua.includes('chrom');\nconst $67c66761d21428d0$export$b23eed0e325a206a = $67c66761d21428d0$export$3227bfbdaa9275de && ($67c66761d21428d0$var$ua.includes('version/15.4') || /cpu (os|iphone os) 15_4 like mac os x/.test($67c66761d21428d0$var$ua));\nconst $67c66761d21428d0$export$39dfd62a25e0fe93 = $67c66761d21428d0$var$ua.includes('webkit') && !$67c66761d21428d0$var$ua.includes('edge');\nconst $67c66761d21428d0$export$76c0a3b101d93136 = $67c66761d21428d0$var$ua.includes('macintosh');\nconst $67c66761d21428d0$export$6b83a0446fc26f94 = typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\nconst $67c66761d21428d0$export$98fcef3dc9973292 = typeof WorkerGlobalScope !== 'undefined' && typeof OffscreenCanvas !== 'undefined' && self instanceof WorkerGlobalScope; //eslint-disable-line\nconst $67c66761d21428d0$export$716f8695eedb9bad = typeof Image !== 'undefined' && Image.prototype.decode;\nconst $67c66761d21428d0$export$7478563940788376 = typeof createImageBitmap === 'function';\nconst $67c66761d21428d0$export$f751ce96c6c4e4fc = function() {\n    let passive = false;\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function() {\n                passive = true;\n            }\n        });\n        // @ts-ignore Ignore invalid event type '_'\n        window.addEventListener('_', null, options);\n        // @ts-ignore Ignore invalid event type '_'\n        window.removeEventListener('_', null, options);\n    } catch (error) {\n    // passive not supported\n    }\n    return passive;\n}();\n\n\nfunction $075f937d7366f1a2$export$9e05d10eae75c464(width, height, canvasPool, settings) {\n    /** @type {HTMLCanvasElement|OffscreenCanvas} */ let canvas;\n    if (canvasPool && canvasPool.length) canvas = /** @type {HTMLCanvasElement} */ canvasPool.shift();\n    else if (0, $67c66761d21428d0$export$98fcef3dc9973292) canvas = new OffscreenCanvas(width || 300, height || 300);\n    else canvas = document.createElement('canvas');\n    if (width) canvas.width = width;\n    if (height) canvas.height = height;\n    //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n    return /** @type {CanvasRenderingContext2D} */ canvas.getContext('2d', settings);\n}\n/** @type {CanvasRenderingContext2D} */ let $075f937d7366f1a2$var$sharedCanvasContext;\nfunction $075f937d7366f1a2$export$fcb72ce088a6632c() {\n    if (!$075f937d7366f1a2$var$sharedCanvasContext) $075f937d7366f1a2$var$sharedCanvasContext = $075f937d7366f1a2$export$9e05d10eae75c464(1, 1);\n    return $075f937d7366f1a2$var$sharedCanvasContext;\n}\nfunction $075f937d7366f1a2$export$e918ac6a1026a12a(context) {\n    const canvas = context.canvas;\n    canvas.width = 1;\n    canvas.height = 1;\n    context.clearRect(0, 0, 1, 1);\n}\nfunction $075f937d7366f1a2$export$e823f88e4111159a(element) {\n    let width = element.offsetWidth;\n    const style = getComputedStyle(element);\n    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n    return width;\n}\nfunction $075f937d7366f1a2$export$fc5b8aac72846d1e(element) {\n    let height = element.offsetHeight;\n    const style = getComputedStyle(element);\n    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n    return height;\n}\nfunction $075f937d7366f1a2$export$5542201de9311ab2(newNode, oldNode) {\n    const parent = oldNode.parentNode;\n    if (parent) parent.replaceChild(newNode, oldNode);\n}\nfunction $075f937d7366f1a2$export$1e1c9bf5a4ffe0d1(node) {\n    while(node.lastChild)node.lastChild.remove();\n}\nfunction $075f937d7366f1a2$export$caeacfe04f52533a(node, children) {\n    const oldChildren = node.childNodes;\n    for(let i = 0;; ++i){\n        const oldChild = oldChildren[i];\n        const newChild = children[i];\n        // check if our work is done\n        if (!oldChild && !newChild) break;\n        // check if children match\n        if (oldChild === newChild) continue;\n        // check if a new child needs to be added\n        if (!oldChild) {\n            node.appendChild(newChild);\n            continue;\n        }\n        // check if an old child needs to be removed\n        if (!newChild) {\n            node.removeChild(oldChild);\n            --i;\n            continue;\n        }\n        // reorder\n        node.insertBefore(newChild, oldChild);\n    }\n}\n\n\n/**\n * @module ol/Image\n */ \n\n/**\n * @module ol/ImageState\n */ /**\n * @enum {number}\n */ var $7eb75c96a6b6f2c6$export$2e2bcd8739ae039 = {\n    IDLE: 0,\n    LOADING: 1,\n    LOADED: 2,\n    ERROR: 3,\n    EMPTY: 4\n};\n\n\n\n/**\n * @module ol/events\n */ \nfunction $d5bf8abd656a3cdc$export$63174c828edd6ff8(target, type, listener, thisArg, once) {\n    if (once) {\n        const originalListener = listener;\n        /**\n     * @this {typeof target}\n     */ listener = function() {\n            target.removeEventListener(type, listener);\n            originalListener.apply(thisArg ?? this, arguments);\n        };\n    } else if (thisArg && thisArg !== target) listener = listener.bind(thisArg);\n    const eventsKey = {\n        target: target,\n        type: type,\n        listener: listener\n    };\n    target.addEventListener(type, listener);\n    return eventsKey;\n}\nfunction $d5bf8abd656a3cdc$export$8d2a95bc11b44725(target, type, listener, thisArg) {\n    return $d5bf8abd656a3cdc$export$63174c828edd6ff8(target, type, listener, thisArg, true);\n}\nfunction $d5bf8abd656a3cdc$export$b0a21c8b3c1c921(key) {\n    if (key && key.target) {\n        key.target.removeEventListener(key.type, key.listener);\n        (0, $beaefe87199bb537$export$42ffd38884aecdac)(key);\n    }\n}\n\n\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\n * @api\n */ /**\n * @typedef {Object} ImageObject\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */ /**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * For images that cover any extent and resolution (static images), the loader function should not accept\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\n * correct `extent`, `resolution` and `pixelRatio`.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\n * @api\n */ /**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\n */ class $b54439be79d4619a$var$ImageWrapper extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\n   * resolution will be assumed.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\n   */ constructor(extent, resolution, pixelRatio, stateOrLoader){\n        super();\n        /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */ this.extent = extent;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = pixelRatio;\n        /**\n     * @protected\n     * @type {number|Array<number>|undefined}\n     */ this.resolution = resolution;\n        /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */ this.state = typeof stateOrLoader === 'function' ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE : stateOrLoader;\n        /**\n     * @private\n     * @type {import('./DataTile.js').ImageLike|null}\n     */ this.image_ = null;\n        /**\n     * @protected\n     * @type {import(\"./Image.js\").Loader}\n     */ this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\n    }\n    /**\n   * @protected\n   */ changed() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */ getExtent() {\n        return this.extent;\n    }\n    /**\n   * @return {import('./DataTile.js').ImageLike} Image.\n   */ getImage() {\n        return this.image_;\n    }\n    /**\n   * @return {number} PixelRatio.\n   */ getPixelRatio() {\n        return this.pixelRatio_;\n    }\n    /**\n   * @return {number|Array<number>} Resolution.\n   */ getResolution() {\n        return /** @type {number} */ this.resolution;\n    }\n    /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Load not yet loaded URI.\n   */ load() {\n        if (this.state == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) {\n            if (this.loader) {\n                this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING;\n                this.changed();\n                const resolution = this.getResolution();\n                const requestResolution = Array.isArray(resolution) ? resolution[0] : resolution;\n                (0, $013a1733c226ec50$export$4dbaaf6c79705e6c)(()=>this.loader(this.getExtent(), requestResolution, this.getPixelRatio())).then((image)=>{\n                    if ('image' in image) this.image_ = image.image;\n                    if ('extent' in image) this.extent = image.extent;\n                    if ('resolution' in image) this.resolution = image.resolution;\n                    if ('pixelRatio' in image) this.pixelRatio_ = image.pixelRatio;\n                    if (image instanceof HTMLImageElement || image instanceof ImageBitmap || image instanceof HTMLCanvasElement || image instanceof HTMLVideoElement) this.image_ = image;\n                    this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n                }).catch((error)=>{\n                    this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR;\n                    console.error(error); // eslint-disable-line no-console\n                }).finally(()=>this.changed());\n            }\n        }\n    }\n    /**\n   * @param {import('./DataTile.js').ImageLike} image The image.\n   */ setImage(image) {\n        this.image_ = image;\n    }\n    /**\n   * @param {number|Array<number>} resolution Resolution.\n   */ setResolution(resolution) {\n        this.resolution = resolution;\n    }\n}\nfunction $b54439be79d4619a$export$bc96ecc7c2a50764(image, loadHandler, errorHandler) {\n    const img = /** @type {HTMLImageElement} */ image;\n    let listening = true;\n    let decoding = false;\n    let loaded = false;\n    const listenerKeys = [\n        (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(img, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).LOAD, function() {\n            loaded = true;\n            if (!decoding) loadHandler();\n        })\n    ];\n    if (img.src && (0, $67c66761d21428d0$export$716f8695eedb9bad)) {\n        decoding = true;\n        img.decode().then(function() {\n            if (listening) loadHandler();\n        }).catch(function(error) {\n            if (listening) {\n                if (loaded) loadHandler();\n                else errorHandler();\n            }\n        });\n    } else listenerKeys.push((0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(img, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).ERROR, errorHandler));\n    return function unlisten() {\n        listening = false;\n        listenerKeys.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n    };\n}\nfunction $b54439be79d4619a$export$11e63f7b0f3d9900(image, src) {\n    return new Promise((resolve, reject)=>{\n        function handleLoad() {\n            unlisten();\n            resolve(image);\n        }\n        function handleError() {\n            unlisten();\n            reject(new Error('Image load error'));\n        }\n        function unlisten() {\n            image.removeEventListener('load', handleLoad);\n            image.removeEventListener('error', handleError);\n        }\n        image.addEventListener('load', handleLoad);\n        image.addEventListener('error', handleError);\n        if (src) image.src = src;\n    });\n}\nfunction $b54439be79d4619a$export$a9e5af241c1bd389(image, src) {\n    if (src) image.src = src;\n    return image.src && (0, $67c66761d21428d0$export$716f8695eedb9bad) ? new Promise((resolve, reject)=>image.decode().then(()=>resolve(image)).catch((e)=>image.complete && image.width ? resolve(image) : reject(e))) : $b54439be79d4619a$export$11e63f7b0f3d9900(image);\n}\nfunction $b54439be79d4619a$export$2f872c0f2117be69(image, src) {\n    if (src) image.src = src;\n    return image.src && (0, $67c66761d21428d0$export$716f8695eedb9bad) && (0, $67c66761d21428d0$export$7478563940788376) ? image.decode().then(()=>createImageBitmap(image)).catch((e)=>{\n        if (image.complete && image.width) return image;\n        throw e;\n    }) : $b54439be79d4619a$export$a9e5af241c1bd389(image);\n}\nvar $b54439be79d4619a$export$2e2bcd8739ae039 = $b54439be79d4619a$var$ImageWrapper;\n\n\nclass $cd3bc8d185522361$var$ImageTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */ constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options){\n        super(tileCoord, state, options);\n        /**\n     * @private\n     * @type {?string}\n     */ this.crossOrigin_ = crossOrigin;\n        /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */ this.src_ = src;\n        this.key = src;\n        /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */ this.image_ = new Image();\n        if (crossOrigin !== null) this.image_.crossOrigin = crossOrigin;\n        /**\n     * @private\n     * @type {?function():void}\n     */ this.unlisten_ = null;\n        /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */ this.tileLoadFunction_ = tileLoadFunction;\n    }\n    /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */ getImage() {\n        return this.image_;\n    }\n    /**\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\n   */ setImage(element) {\n        this.image_ = element;\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        this.unlistenImage_();\n        this.changed();\n    }\n    /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */ handleImageError_() {\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n        this.unlistenImage_();\n        this.image_ = $cd3bc8d185522361$var$getBlankImage();\n        this.changed();\n    }\n    /**\n   * Tracks successful image load.\n   *\n   * @private\n   */ handleImageLoad_() {\n        const image = /** @type {HTMLImageElement} */ this.image_;\n        if (image.naturalWidth && image.naturalHeight) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        else this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        this.unlistenImage_();\n        this.changed();\n    }\n    /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   *\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\n   * that checks for error status codes and reloads only when the status code is\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\n   * made already:\n   *\n   * ```js\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\n   * const retries = {};\n   * source.setTileLoadFunction((tile, src) => {\n   *   const image = tile.getImage();\n   *   fetch(src)\n   *     .then((response) => {\n   *       if (retryCodes.includes(response.status)) {\n   *         retries[src] = (retries[src] || 0) + 1;\n   *         if (retries[src] <= 3) {\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\n   *         }\n   *         return Promise.reject();\n   *       }\n   *       return response.blob();\n   *     })\n   *     .then((blob) => {\n   *       const imageUrl = URL.createObjectURL(blob);\n   *       image.src = imageUrl;\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\n   *     })\n   *     .catch(() => tile.setState(3)); // error\n   * });\n   * ```\n   * @api\n   * @override\n   */ load() {\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE;\n            this.image_ = new Image();\n            if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;\n        }\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n            this.changed();\n            this.tileLoadFunction_(this, this.src_);\n            this.unlisten_ = (0, $b54439be79d4619a$export$bc96ecc7c2a50764)(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n        }\n    }\n    /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */ unlistenImage_() {\n        if (this.unlisten_) {\n            this.unlisten_();\n            this.unlisten_ = null;\n        }\n    }\n    /**\n   * @override\n   */ disposeInternal() {\n        this.unlistenImage_();\n        this.image_ = null;\n        super.disposeInternal();\n    }\n}\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */ function $cd3bc8d185522361$var$getBlankImage() {\n    const ctx = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1);\n    ctx.fillStyle = 'rgba(0,0,0,0)';\n    ctx.fillRect(0, 0, 1, 1);\n    return ctx.canvas;\n}\nvar $cd3bc8d185522361$export$2e2bcd8739ae039 = $cd3bc8d185522361$var$ImageTile;\n\n\n/**\n * @module ol/reproj/Tile\n */ /**\n * @module ol/reproj/common\n */ /**\n * Default maximum allowed threshold  (in pixels) for reprojection\n * triangulation.\n * @type {number}\n */ const $8ea51dd7be3ba5e2$export$3ecb4bcfa5aae855 = 0.5;\n\n\n\n\n\n/**\n * @module ol/reproj/Triangulation\n */ /**\n * @module ol/transform\n */ /**\n * @module ol/asserts\n */ /**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {string} errorMessage Error message.\n */ function $35d5ec884318008e$export$a7a9523472993e97(assertion, errorMessage) {\n    if (!assertion) throw new Error(errorMessage);\n}\n\n\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */ /**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3×3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */ /**\n * @private\n * @type {Transform}\n */ const $e22e7611e69f42a9$var$tmp_ = new Array(6);\nfunction $e22e7611e69f42a9$export$185802fd694ee1f5() {\n    return [\n        1,\n        0,\n        0,\n        1,\n        0,\n        0\n    ];\n}\nfunction $e22e7611e69f42a9$export$aad8462122ac592b(transform) {\n    return $e22e7611e69f42a9$export$adaa4cf7ef1b65be(transform, 1, 0, 0, 1, 0, 0);\n}\nfunction $e22e7611e69f42a9$export$2060d2db72cce88f(transform1, transform2) {\n    const a1 = transform1[0];\n    const b1 = transform1[1];\n    const c1 = transform1[2];\n    const d1 = transform1[3];\n    const e1 = transform1[4];\n    const f1 = transform1[5];\n    const a2 = transform2[0];\n    const b2 = transform2[1];\n    const c2 = transform2[2];\n    const d2 = transform2[3];\n    const e2 = transform2[4];\n    const f2 = transform2[5];\n    transform1[0] = a1 * a2 + c1 * b2;\n    transform1[1] = b1 * a2 + d1 * b2;\n    transform1[2] = a1 * c2 + c1 * d2;\n    transform1[3] = b1 * c2 + d1 * d2;\n    transform1[4] = a1 * e2 + c1 * f2 + e1;\n    transform1[5] = b1 * e2 + d1 * f2 + f1;\n    return transform1;\n}\nfunction $e22e7611e69f42a9$export$adaa4cf7ef1b65be(transform, a, b, c, d, e, f) {\n    transform[0] = a;\n    transform[1] = b;\n    transform[2] = c;\n    transform[3] = d;\n    transform[4] = e;\n    transform[5] = f;\n    return transform;\n}\nfunction $e22e7611e69f42a9$export$42b4187a82d80ed0(transform1, transform2) {\n    transform1[0] = transform2[0];\n    transform1[1] = transform2[1];\n    transform1[2] = transform2[2];\n    transform1[3] = transform2[3];\n    transform1[4] = transform2[4];\n    transform1[5] = transform2[5];\n    return transform1;\n}\nfunction $e22e7611e69f42a9$export$5635d7ef4b8fee1c(transform, coordinate) {\n    const x = coordinate[0];\n    const y = coordinate[1];\n    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n    return coordinate;\n}\nfunction $e22e7611e69f42a9$export$bb628a54ab399bc9(transform, angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, cos, sin, -sin, cos, 0, 0));\n}\nfunction $e22e7611e69f42a9$export$dcdf75081b88279d(transform, x, y) {\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, x, 0, 0, y, 0, 0));\n}\nfunction $e22e7611e69f42a9$export$3e4e33ea14aeb531(target, x, y) {\n    return $e22e7611e69f42a9$export$adaa4cf7ef1b65be(target, x, 0, 0, y, 0, 0);\n}\nfunction $e22e7611e69f42a9$export$d73ee8ef04f5226a(transform, dx, dy) {\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, 1, 0, 0, 1, dx, dy));\n}\nfunction $e22e7611e69f42a9$export$f672e0b6f7222cd7(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n    const sin = Math.sin(angle);\n    const cos = Math.cos(angle);\n    transform[0] = sx * cos;\n    transform[1] = sy * sin;\n    transform[2] = -sx * sin;\n    transform[3] = sy * cos;\n    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n    return transform;\n}\nfunction $e22e7611e69f42a9$export$12a96a1aaf5558e3(dx1, dy1, sx, sy, angle, dx2, dy2) {\n    return $e22e7611e69f42a9$export$f84e8e69fd4488a5($e22e7611e69f42a9$export$f672e0b6f7222cd7($e22e7611e69f42a9$export$185802fd694ee1f5(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\nfunction $e22e7611e69f42a9$export$6897c284b6f9f4dc(source) {\n    return $e22e7611e69f42a9$export$bd70ea2a93c0fa4(source, source);\n}\nfunction $e22e7611e69f42a9$export$bd70ea2a93c0fa4(target, source) {\n    const det = $e22e7611e69f42a9$export$a04698f914c55ed9(source);\n    (0, $35d5ec884318008e$export$a7a9523472993e97)(det !== 0, 'Transformation matrix cannot be inverted');\n    const a = source[0];\n    const b = source[1];\n    const c = source[2];\n    const d = source[3];\n    const e = source[4];\n    const f = source[5];\n    target[0] = d / det;\n    target[1] = -b / det;\n    target[2] = -c / det;\n    target[3] = a / det;\n    target[4] = (c * f - d * e) / det;\n    target[5] = -(a * f - b * e) / det;\n    return target;\n}\nfunction $e22e7611e69f42a9$export$a04698f914c55ed9(mat) {\n    return mat[0] * mat[3] - mat[1] * mat[2];\n}\n/**\n * @type {Array}\n */ const $e22e7611e69f42a9$var$matrixPrecision = [\n    1e6,\n    1e6,\n    1e6,\n    1e6,\n    2,\n    2\n];\nfunction $e22e7611e69f42a9$export$f84e8e69fd4488a5(mat) {\n    const transformString = 'matrix(' + mat.map((value, i)=>Math.round(value * $e22e7611e69f42a9$var$matrixPrecision[i]) / $e22e7611e69f42a9$var$matrixPrecision[i]).join(', ') + ')';\n    return transformString;\n}\n\n\n/**\n * @module ol/extent\n */ /**\n * @module ol/extent/Relationship\n */ /**\n * Relationship to an extent.\n * @enum {number}\n */ var $dab4245bc22b806c$export$2e2bcd8739ae039 = {\n    UNKNOWN: 0,\n    INTERSECTING: 1,\n    ABOVE: 2,\n    RIGHT: 4,\n    BELOW: 8,\n    LEFT: 16\n};\n\n\nfunction $6da4c8ed3074c92b$export$8aceca7c77505534(coordinates) {\n    const extent = $6da4c8ed3074c92b$export$fe201bb3bbe031e9();\n    for(let i = 0, ii = coordinates.length; i < ii; ++i)$6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinates[i]);\n    return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */ function $6da4c8ed3074c92b$var$_boundingExtentXYs(xs, ys, dest) {\n    const minX = Math.min.apply(null, xs);\n    const minY = Math.min.apply(null, ys);\n    const maxX = Math.max.apply(null, xs);\n    const maxY = Math.max.apply(null, ys);\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest);\n}\nfunction $6da4c8ed3074c92b$export$ab1029bcae9ddb4a(extent, value, dest) {\n    if (dest) {\n        dest[0] = extent[0] - value;\n        dest[1] = extent[1] - value;\n        dest[2] = extent[2] + value;\n        dest[3] = extent[3] + value;\n        return dest;\n    }\n    return [\n        extent[0] - value,\n        extent[1] - value,\n        extent[2] + value,\n        extent[3] + value\n    ];\n}\nfunction $6da4c8ed3074c92b$export$9cd59f9826255e47(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent.slice();\n}\nfunction $6da4c8ed3074c92b$export$cbe64c389534206f(extent, x, y) {\n    let dx, dy;\n    if (x < extent[0]) dx = extent[0] - x;\n    else if (extent[2] < x) dx = x - extent[2];\n    else dx = 0;\n    if (y < extent[1]) dy = extent[1] - y;\n    else if (extent[3] < y) dy = y - extent[3];\n    else dy = 0;\n    return dx * dx + dy * dy;\n}\nfunction $6da4c8ed3074c92b$export$ac68c24d37ca240f(extent, coordinate) {\n    return $6da4c8ed3074c92b$export$805bdfd6d6690e97(extent, coordinate[0], coordinate[1]);\n}\nfunction $6da4c8ed3074c92b$export$be866b1e0809b17e(extent1, extent2) {\n    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\nfunction $6da4c8ed3074c92b$export$805bdfd6d6690e97(extent, x, y) {\n    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\nfunction $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, coordinate) {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let relationship = (0, $dab4245bc22b806c$export$2e2bcd8739ae039).UNKNOWN;\n    if (x < minX) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT;\n    else if (x > maxX) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT;\n    if (y < minY) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW;\n    else if (y > maxY) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE;\n    if (relationship === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).UNKNOWN) relationship = (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING;\n    return relationship;\n}\nfunction $6da4c8ed3074c92b$export$fe201bb3bbe031e9() {\n    return [\n        Infinity,\n        Infinity,\n        -Infinity,\n        -Infinity\n    ];\n}\nfunction $6da4c8ed3074c92b$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest) {\n    if (dest) {\n        dest[0] = minX;\n        dest[1] = minY;\n        dest[2] = maxX;\n        dest[3] = maxY;\n        return dest;\n    }\n    return [\n        minX,\n        minY,\n        maxX,\n        maxY\n    ];\n}\nfunction $6da4c8ed3074c92b$export$3e2152b047719fa1(dest) {\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\nfunction $6da4c8ed3074c92b$export$4838bf78d04a9440(coordinate, dest) {\n    const x = coordinate[0];\n    const y = coordinate[1];\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(x, y, x, y, dest);\n}\nfunction $6da4c8ed3074c92b$export$29e3ad4dbd0cb863(coordinates, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$795cd48be4d5f252(extent, coordinates);\n}\nfunction $6da4c8ed3074c92b$export$be0ab0bf96ca59ca(flatCoordinates, offset, end, stride, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride);\n}\nfunction $6da4c8ed3074c92b$export$73b4897e93bc5c83(rings, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$9b319549574402d7(extent, rings);\n}\nfunction $6da4c8ed3074c92b$export$e9bab7fafb253603(extent1, extent2) {\n    return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\nfunction $6da4c8ed3074c92b$export$998afeab28643bd6(extent1, extent2, tolerance) {\n    return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;\n}\nfunction $6da4c8ed3074c92b$export$8b58be045bf06082(extent1, extent2) {\n    if (extent2[0] < extent1[0]) extent1[0] = extent2[0];\n    if (extent2[2] > extent1[2]) extent1[2] = extent2[2];\n    if (extent2[1] < extent1[1]) extent1[1] = extent2[1];\n    if (extent2[3] > extent1[3]) extent1[3] = extent2[3];\n    return extent1;\n}\nfunction $6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinate) {\n    if (coordinate[0] < extent[0]) extent[0] = coordinate[0];\n    if (coordinate[0] > extent[2]) extent[2] = coordinate[0];\n    if (coordinate[1] < extent[1]) extent[1] = coordinate[1];\n    if (coordinate[1] > extent[3]) extent[3] = coordinate[1];\n}\nfunction $6da4c8ed3074c92b$export$795cd48be4d5f252(extent, coordinates) {\n    for(let i = 0, ii = coordinates.length; i < ii; ++i)$6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinates[i]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride) {\n    for(; offset < end; offset += stride)$6da4c8ed3074c92b$export$f1dab130b92b85a9(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$9b319549574402d7(extent, rings) {\n    for(let i = 0, ii = rings.length; i < ii; ++i)$6da4c8ed3074c92b$export$795cd48be4d5f252(extent, rings[i]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$f1dab130b92b85a9(extent, x, y) {\n    extent[0] = Math.min(extent[0], x);\n    extent[1] = Math.min(extent[1], y);\n    extent[2] = Math.max(extent[2], x);\n    extent[3] = Math.max(extent[3], y);\n}\nfunction $6da4c8ed3074c92b$export$f9ed8a3d123a08e2(extent, callback) {\n    let val;\n    val = callback($6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$e77c1cf70445e168(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$b84fa077c8b05295(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$cb1538b07e6964ff(extent));\n    if (val) return val;\n    return false;\n}\nfunction $6da4c8ed3074c92b$export$520c40045967cb15(extent) {\n    let area = 0;\n    if (!$6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent)) area = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) * $6da4c8ed3074c92b$export$c08559766941f856(extent);\n    return area;\n}\nfunction $6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent) {\n    return [\n        extent[0],\n        extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$e77c1cf70445e168(extent) {\n    return [\n        extent[2],\n        extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$c91255cadecfe081(extent) {\n    return [\n        (extent[0] + extent[2]) / 2,\n        (extent[1] + extent[3]) / 2\n    ];\n}\nfunction $6da4c8ed3074c92b$export$a1cfd206661d0801(extent, corner) {\n    let coordinate;\n    if (corner === 'bottom-left') coordinate = $6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent);\n    else if (corner === 'bottom-right') coordinate = $6da4c8ed3074c92b$export$e77c1cf70445e168(extent);\n    else if (corner === 'top-left') coordinate = $6da4c8ed3074c92b$export$cb1538b07e6964ff(extent);\n    else if (corner === 'top-right') coordinate = $6da4c8ed3074c92b$export$b84fa077c8b05295(extent);\n    else throw new Error('Invalid corner');\n    return coordinate;\n}\nfunction $6da4c8ed3074c92b$export$7d6fa884b32a3751(extent1, extent2) {\n    const minX = Math.min(extent1[0], extent2[0]);\n    const minY = Math.min(extent1[1], extent2[1]);\n    const maxX = Math.max(extent1[2], extent2[2]);\n    const maxY = Math.max(extent1[3], extent2[3]);\n    return (maxX - minX) * (maxY - minY);\n}\nfunction $6da4c8ed3074c92b$export$13ba650faf8308(center, resolution, rotation, size, dest) {\n    const [x0, y0, x1, y1, x2, y2, x3, y3] = $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac(center, resolution, rotation, size);\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), dest);\n}\nfunction $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac(center, resolution, rotation, size) {\n    const dx = resolution * size[0] / 2;\n    const dy = resolution * size[1] / 2;\n    const cosRotation = Math.cos(rotation);\n    const sinRotation = Math.sin(rotation);\n    const xCos = dx * cosRotation;\n    const xSin = dx * sinRotation;\n    const yCos = dy * cosRotation;\n    const ySin = dy * sinRotation;\n    const x = center[0];\n    const y = center[1];\n    return [\n        x - xCos + ySin,\n        y - xSin - yCos,\n        x - xCos - ySin,\n        y - xSin + yCos,\n        x + xCos - ySin,\n        y + xSin + yCos,\n        x + xCos + ySin,\n        y + xSin - yCos,\n        x - xCos + ySin,\n        y - xSin - yCos\n    ];\n}\nfunction $6da4c8ed3074c92b$export$c08559766941f856(extent) {\n    return extent[3] - extent[1];\n}\nfunction $6da4c8ed3074c92b$export$f3fe0e9a60cde324(extent1, extent2) {\n    const intersection = $6da4c8ed3074c92b$export$72209efa88586d42(extent1, extent2);\n    return $6da4c8ed3074c92b$export$520c40045967cb15(intersection);\n}\nfunction $6da4c8ed3074c92b$export$72209efa88586d42(extent1, extent2, dest) {\n    const intersection = dest ? dest : $6da4c8ed3074c92b$export$fe201bb3bbe031e9();\n    if ($6da4c8ed3074c92b$export$7b0a31e10bbff018(extent1, extent2)) {\n        if (extent1[0] > extent2[0]) intersection[0] = extent1[0];\n        else intersection[0] = extent2[0];\n        if (extent1[1] > extent2[1]) intersection[1] = extent1[1];\n        else intersection[1] = extent2[1];\n        if (extent1[2] < extent2[2]) intersection[2] = extent1[2];\n        else intersection[2] = extent2[2];\n        if (extent1[3] < extent2[3]) intersection[3] = extent1[3];\n        else intersection[3] = extent2[3];\n    } else $6da4c8ed3074c92b$export$3e2152b047719fa1(intersection);\n    return intersection;\n}\nfunction $6da4c8ed3074c92b$export$1bc603050bd777b1(extent) {\n    return $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) + $6da4c8ed3074c92b$export$c08559766941f856(extent);\n}\nfunction $6da4c8ed3074c92b$export$31b21d0167753bb4(extent) {\n    return [\n        extent[2] - extent[0],\n        extent[3] - extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$cb1538b07e6964ff(extent) {\n    return [\n        extent[0],\n        extent[3]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$b84fa077c8b05295(extent) {\n    return [\n        extent[2],\n        extent[3]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) {\n    return extent[2] - extent[0];\n}\nfunction $6da4c8ed3074c92b$export$7b0a31e10bbff018(extent1, extent2) {\n    return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\nfunction $6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent) {\n    return extent[2] < extent[0] || extent[3] < extent[1];\n}\nfunction $6da4c8ed3074c92b$export$6a4fe494c558c238(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$80cbab86674143b6(extent, value) {\n    const deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n    const deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n    extent[0] -= deltaX;\n    extent[2] += deltaX;\n    extent[1] -= deltaY;\n    extent[3] += deltaY;\n}\nfunction $6da4c8ed3074c92b$export$a6a5a7a461419425(extent, start, end) {\n    let intersects = false;\n    const startRel = $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, start);\n    const endRel = $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, end);\n    if (startRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING || endRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING) intersects = true;\n    else {\n        const minX = extent[0];\n        const minY = extent[1];\n        const maxX = extent[2];\n        const maxY = extent[3];\n        const startX = start[0];\n        const startY = start[1];\n        const endX = end[0];\n        const endY = end[1];\n        const slope = (endY - startY) / (endX - startX);\n        let x, y;\n        if (!!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE)) {\n            // potentially intersects top\n            x = endX - (endY - maxY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT)) {\n            // potentially intersects right\n            y = endY - (endX - maxX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW)) {\n            // potentially intersects bottom\n            x = endX - (endY - minY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT)) {\n            // potentially intersects left\n            y = endY - (endX - minX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n    }\n    return intersects;\n}\nfunction $6da4c8ed3074c92b$export$9f9dcb98c894b623(extent, transformFn, dest, stops) {\n    if ($6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent)) return $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    let coordinates = [];\n    if (stops > 1) {\n        const width = extent[2] - extent[0];\n        const height = extent[3] - extent[1];\n        for(let i = 0; i < stops; ++i)coordinates.push(extent[0] + width * i / stops, extent[1], extent[2], extent[1] + height * i / stops, extent[2] - width * i / stops, extent[3], extent[0], extent[3] - height * i / stops);\n    } else coordinates = [\n        extent[0],\n        extent[1],\n        extent[2],\n        extent[1],\n        extent[2],\n        extent[3],\n        extent[0],\n        extent[3]\n    ];\n    transformFn(coordinates, coordinates, 2);\n    const xs = [];\n    const ys = [];\n    for(let i = 0, l = coordinates.length; i < l; i += 2){\n        xs.push(coordinates[i]);\n        ys.push(coordinates[i + 1]);\n    }\n    return $6da4c8ed3074c92b$var$_boundingExtentXYs(xs, ys, dest);\n}\nfunction $6da4c8ed3074c92b$export$39a9ce3624977b84(extent, projection) {\n    const projectionExtent = projection.getExtent();\n    const center = $6da4c8ed3074c92b$export$c91255cadecfe081(extent);\n    if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n        const worldWidth = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(projectionExtent);\n        const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n        const offset = worldsAway * worldWidth;\n        extent[0] -= offset;\n        extent[2] -= offset;\n    }\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$9031237f01de0947(extent, projection, multiWorld) {\n    if (projection.canWrapX()) {\n        const projectionExtent = projection.getExtent();\n        if (!isFinite(extent[0]) || !isFinite(extent[2])) return [\n            [\n                projectionExtent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ]\n        ];\n        $6da4c8ed3074c92b$export$39a9ce3624977b84(extent, projection);\n        const worldWidth = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(projectionExtent);\n        if ($6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) > worldWidth && !multiWorld) // the extent wraps around on itself\n        return [\n            [\n                projectionExtent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ]\n        ];\n        if (extent[0] < projectionExtent[0]) // the extent crosses the anti meridian, so it needs to be sliced\n        return [\n            [\n                extent[0] + worldWidth,\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ],\n            [\n                projectionExtent[0],\n                extent[1],\n                extent[2],\n                extent[3]\n            ]\n        ];\n        if (extent[2] > projectionExtent[2]) // the extent crosses the anti meridian, so it needs to be sliced\n        return [\n            [\n                extent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ],\n            [\n                projectionExtent[0],\n                extent[1],\n                extent[2] - worldWidth,\n                extent[3]\n            ]\n        ];\n    }\n    return [\n        extent\n    ];\n}\n\n\n/**\n * @module ol/proj\n */ /**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */ \n/**\n * @module ol/proj/epsg3857\n */ /**\n * @module ol/proj/Projection\n */ /**\n * @module ol/proj/Units\n */ /**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */ /**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */ const $03edbd434a9e6608$var$unitByCode = {\n    '9001': 'm',\n    '9002': 'ft',\n    '9003': 'us-ft',\n    '9101': 'radians',\n    '9102': 'degrees'\n};\nfunction $03edbd434a9e6608$export$7f58726df3255edc(code) {\n    return $03edbd434a9e6608$var$unitByCode[code];\n}\nconst $03edbd434a9e6608$export$1482081eec883108 = {\n    // use the radius of the Normal sphere\n    'radians': 6370997 / (2 * Math.PI),\n    'degrees': 2 * Math.PI * 6370997 / 360,\n    'ft': 0.3048,\n    'm': 1,\n    'us-ft': 1200 / 3937\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */ /**\n * @classdesc\n * In most cases, you should not need to create instances of this class.\n * Instead, where projection information is required, you can use a string\n * projection code or identifier (e.g. `EPSG:4326`) instead of a projection\n * instance.\n *\n * The library includes support for transforming coordinates between the following\n * projections:\n *\n *  * WGS 84 / Geographic - Using codes `EPSG:4326`, `CRS:84`, `urn:ogc:def:crs:EPSG:6.6:4326`,\n *    `urn:ogc:def:crs:OGC:1.3:CRS84`, `urn:ogc:def:crs:OGC:2:84`, `http://www.opengis.net/gml/srs/epsg.xml#4326`,\n *    or `urn:x-ogc:def:crs:EPSG:4326`\n *  * WGS 84 / Spherical Mercator - Using codes `EPSG:3857`, `EPSG:102100`, `EPSG:102113`, `EPSG:900913`,\n *    `urn:ogc:def:crs:EPSG:6.18:3:3857`, or `http://www.opengis.net/gml/srs/epsg.xml#3857`\n *  * WGS 84 / UTM zones - Using codes `EPSG:32601` through `EPSG:32660` for northern zones\n *    and `EPSG:32701` through `EPSG:32760` for southern zones. Note that the built-in UTM transforms\n *    are lower accuracy (with errors on the order of 0.1 m) than those that you might get in a\n *    library like [proj4js](https://github.com/proj4js/proj4js).\n *\n * For additional projection support, or to use higher accuracy transforms than the built-in ones, you can use\n * the [proj4js](https://github.com/proj4js/proj4js) library. With `proj4js`, after adding any new projection\n * definitions, call the {@link module:ol/proj/proj4.register} function.\n *\n * You can use the {@link module:ol/proj.get} function to retrieve a projection instance\n * for one of the registered projections.\n *\n * @api\n */ class $6dc418afeec7068a$var$Projection {\n    /**\n   * @param {Options} options Projection options.\n   */ constructor(options){\n        /**\n     * @private\n     * @type {string}\n     */ this.code_ = options.code;\n        /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */ this.units_ = /** @type {import(\"./Units.js\").Units} */ options.units;\n        /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\n     * @private\n     * @type {string}\n     */ this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n        /**\n     * @private\n     * @type {boolean}\n     */ this.global_ = options.global !== undefined ? options.global : false;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */ this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.defaultTileGrid_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */ canWrapX() {\n        return this.canWrapX_;\n    }\n    /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */ getCode() {\n        return this.code_;\n    }\n    /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getExtent() {\n        return this.extent_;\n    }\n    /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */ getUnits() {\n        return this.units_;\n    }\n    /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */ getMetersPerUnit() {\n        return this.metersPerUnit_ || (0, $03edbd434a9e6608$export$1482081eec883108)[this.units_];\n    }\n    /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getWorldExtent() {\n        return this.worldExtent_;\n    }\n    /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */ getAxisOrientation() {\n        return this.axisOrientation_;\n    }\n    /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */ isGlobal() {\n        return this.global_;\n    }\n    /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */ setGlobal(global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    }\n    /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */ getDefaultTileGrid() {\n        return this.defaultTileGrid_;\n    }\n    /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */ setDefaultTileGrid(tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    }\n    /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */ setExtent(extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    }\n    /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */ setWorldExtent(worldExtent) {\n        this.worldExtent_ = worldExtent;\n    }\n    /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */ setGetPointResolution(func) {\n        this.getPointResolutionFunc_ = func;\n    }\n    /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */ getPointResolutionFunc() {\n        return this.getPointResolutionFunc_;\n    }\n}\nvar $6dc418afeec7068a$export$2e2bcd8739ae039 = $6dc418afeec7068a$var$Projection;\n\n\nconst $84ad988f04807ab1$export$2d2c9be8b5b863f = 6378137;\nconst $84ad988f04807ab1$export$f3928063e5e96d35 = Math.PI * $84ad988f04807ab1$export$2d2c9be8b5b863f;\nconst $84ad988f04807ab1$export$21e6da8a7375dfe8 = [\n    -$84ad988f04807ab1$export$f3928063e5e96d35,\n    -$84ad988f04807ab1$export$f3928063e5e96d35,\n    $84ad988f04807ab1$export$f3928063e5e96d35,\n    $84ad988f04807ab1$export$f3928063e5e96d35\n];\nconst $84ad988f04807ab1$export$ae9d6ed80df710e5 = [\n    -180,\n    -85,\n    180,\n    85\n];\nconst $84ad988f04807ab1$export$d26945d1ad52feeb = $84ad988f04807ab1$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */ class $84ad988f04807ab1$var$EPSG3857Projection extends (0, $6dc418afeec7068a$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} code Code.\n   */ constructor(code){\n        super({\n            code: code,\n            units: 'm',\n            extent: $84ad988f04807ab1$export$21e6da8a7375dfe8,\n            global: true,\n            worldExtent: $84ad988f04807ab1$export$ae9d6ed80df710e5,\n            getPointResolution: function(resolution, point) {\n                return resolution / Math.cosh(point[1] / $84ad988f04807ab1$export$2d2c9be8b5b863f);\n            }\n        });\n    }\n}\nconst $84ad988f04807ab1$export$b508d7ad9a891c1b = [\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:3857'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:102100'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:102113'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('EPSG:900913'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n    new $84ad988f04807ab1$var$EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')\n];\nfunction $84ad988f04807ab1$export$1ff8bb36c0983070(input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (output === undefined) {\n        if (dimension > 2) // preserve values beyond second dimension\n        output = input.slice();\n        else output = new Array(length);\n    }\n    for(let i = 0; i < length; i += stride){\n        output[i] = $84ad988f04807ab1$export$f3928063e5e96d35 * input[i] / 180;\n        let y = $84ad988f04807ab1$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n        if (y > $84ad988f04807ab1$export$d26945d1ad52feeb) y = $84ad988f04807ab1$export$d26945d1ad52feeb;\n        else if (y < -$84ad988f04807ab1$export$d26945d1ad52feeb) y = -$84ad988f04807ab1$export$d26945d1ad52feeb;\n        output[i + 1] = y;\n    }\n    return output;\n}\nfunction $84ad988f04807ab1$export$8c71322ec28ed6b4(input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (output === undefined) {\n        if (dimension > 2) // preserve values beyond second dimension\n        output = input.slice();\n        else output = new Array(length);\n    }\n    for(let i = 0; i < length; i += stride){\n        output[i] = 180 * input[i] / $84ad988f04807ab1$export$f3928063e5e96d35;\n        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / $84ad988f04807ab1$export$2d2c9be8b5b863f)) / Math.PI - 90;\n    }\n    return output;\n}\n\n\n/**\n * @module ol/proj/epsg4326\n */ \nconst $b58ae362632b32c5$export$2d2c9be8b5b863f = 6378137;\nconst $b58ae362632b32c5$export$21e6da8a7375dfe8 = [\n    -180,\n    -90,\n    180,\n    90\n];\nconst $b58ae362632b32c5$export$1482081eec883108 = Math.PI * $b58ae362632b32c5$export$2d2c9be8b5b863f / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */ class $b58ae362632b32c5$var$EPSG4326Projection extends (0, $6dc418afeec7068a$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */ constructor(code, axisOrientation){\n        super({\n            code: code,\n            units: 'degrees',\n            extent: $b58ae362632b32c5$export$21e6da8a7375dfe8,\n            axisOrientation: axisOrientation,\n            global: true,\n            metersPerUnit: $b58ae362632b32c5$export$1482081eec883108,\n            worldExtent: $b58ae362632b32c5$export$21e6da8a7375dfe8\n        });\n    }\n}\nconst $b58ae362632b32c5$export$b508d7ad9a891c1b = [\n    new $b58ae362632b32c5$var$EPSG4326Projection('CRS:84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('EPSG:4326', 'neu'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n    new $b58ae362632b32c5$var$EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu')\n];\n\n\n\n/**\n * @module ol/proj/projections\n */ /**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */ let $f5ec5c943d804ecb$var$cache = {};\nfunction $f5ec5c943d804ecb$export$42ffd38884aecdac() {\n    $f5ec5c943d804ecb$var$cache = {};\n}\nfunction $f5ec5c943d804ecb$export$3988ae62b71be9a3(code) {\n    return $f5ec5c943d804ecb$var$cache[code] || $f5ec5c943d804ecb$var$cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] || null;\n}\nfunction $f5ec5c943d804ecb$export$e16d8520af44a096(code, projection) {\n    $f5ec5c943d804ecb$var$cache[code] = projection;\n}\n\n\n/**\n * @module ol/proj/transforms\n */ \n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */ let $11b5dd198626e1de$var$transforms = {};\nfunction $11b5dd198626e1de$export$42ffd38884aecdac() {\n    $11b5dd198626e1de$var$transforms = {};\n}\nfunction $11b5dd198626e1de$export$e16d8520af44a096(source, destination, transformFn) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    if (!(sourceCode in $11b5dd198626e1de$var$transforms)) $11b5dd198626e1de$var$transforms[sourceCode] = {};\n    $11b5dd198626e1de$var$transforms[sourceCode][destinationCode] = transformFn;\n}\nfunction $11b5dd198626e1de$export$cd7f480d6b8286c3(source, destination) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    const transform = $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    delete $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    if ((0, $beaefe87199bb537$export$dd1bc94b04021eeb)($11b5dd198626e1de$var$transforms[sourceCode])) delete $11b5dd198626e1de$var$transforms[sourceCode];\n    return transform;\n}\nfunction $11b5dd198626e1de$export$3988ae62b71be9a3(sourceCode, destinationCode) {\n    if (sourceCode in $11b5dd198626e1de$var$transforms && destinationCode in $11b5dd198626e1de$var$transforms[sourceCode]) return $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    return null;\n}\n\n\n\n/**\n * @module ol/math\n */ /**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */ function $6b000a049d919fe5$export$7d15b64cf5a3a4c4(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\nfunction $6b000a049d919fe5$export$251bb0a9cef172e6(x, y, x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    if (dx !== 0 || dy !== 0) {\n        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        } else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return $6b000a049d919fe5$export$88e6ebb4fe54f538(x, y, x1, y1);\n}\nfunction $6b000a049d919fe5$export$88e6ebb4fe54f538(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    return dx * dx + dy * dy;\n}\nfunction $6b000a049d919fe5$export$8240f01c446270e6(mat) {\n    const n = mat.length;\n    for(let i = 0; i < n; i++){\n        // Find max in the i-th column (ignoring i - 1 first rows)\n        let maxRow = i;\n        let maxEl = Math.abs(mat[i][i]);\n        for(let r = i + 1; r < n; r++){\n            const absValue = Math.abs(mat[r][i]);\n            if (absValue > maxEl) {\n                maxEl = absValue;\n                maxRow = r;\n            }\n        }\n        if (maxEl === 0) return null; // matrix is singular\n        // Swap max row with i-th (current) row\n        const tmp = mat[maxRow];\n        mat[maxRow] = mat[i];\n        mat[i] = tmp;\n        // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n        for(let j = i + 1; j < n; j++){\n            const coef = -mat[j][i] / mat[i][i];\n            for(let k = i; k < n + 1; k++)if (i == k) mat[j][k] = 0;\n            else mat[j][k] += coef * mat[i][k];\n        }\n    }\n    // Solve Ax=b for upper triangular matrix A (mat)\n    const x = new Array(n);\n    for(let l = n - 1; l >= 0; l--){\n        x[l] = mat[l][n] / mat[l][l];\n        for(let m = l - 1; m >= 0; m--)mat[m][n] -= mat[m][l] * x[l];\n    }\n    return x;\n}\nfunction $6b000a049d919fe5$export$56cb859c01fa134d(angleInRadians) {\n    return angleInRadians * 180 / Math.PI;\n}\nfunction $6b000a049d919fe5$export$cba01ba138429a1d(angleInDegrees) {\n    return angleInDegrees * Math.PI / 180;\n}\nfunction $6b000a049d919fe5$export$ba467bec01d66def(a, b) {\n    const r = a % b;\n    return r * b < 0 ? r + b : r;\n}\nfunction $6b000a049d919fe5$export$3a89f8d6f6bf6c9f(a, b, x) {\n    return a + x * (b - a);\n}\nfunction $6b000a049d919fe5$export$a81f732198733497(n, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(n * factor) / factor;\n}\nfunction $6b000a049d919fe5$export$2077e0241d6afd3c(n, decimals) {\n    return Math.round($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$a3fe094919f356fd(n, decimals) {\n    return Math.floor($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$803ce6b71a0a94b2(n, decimals) {\n    return Math.ceil($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$4997ffc0176396a6(n, min, max) {\n    if (n >= min && n < max) return n;\n    const range = max - min;\n    return ((n - min) % range + range) % range + min;\n}\n\n\n/**\n * @module ol/coordinate\n */ \n\n/**\n * @module ol/string\n */ /**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */ function $ff7180bdd45ebb19$export$24be126cb0a7bbeb(number, width, precision) {\n    const numberString = precision !== undefined ? number.toFixed(precision) : '' + number;\n    let decimal = numberString.indexOf('.');\n    decimal = decimal === -1 ? numberString.length : decimal;\n    return decimal > width ? numberString : new Array(1 + width - decimal).join('0') + numberString;\n}\nfunction $ff7180bdd45ebb19$export$66e1c0999abad646(v1, v2) {\n    const s1 = ('' + v1).split('.');\n    const s2 = ('' + v2).split('.');\n    for(let i = 0; i < Math.max(s1.length, s2.length); i++){\n        const n1 = parseInt(s1[i] || '0', 10);\n        const n2 = parseInt(s2[i] || '0', 10);\n        if (n1 > n2) return 1;\n        if (n2 > n1) return -1;\n    }\n    return 0;\n}\n\n\nfunction $1bd0a226f9a16141$export$e16d8520af44a096(coordinate, delta) {\n    coordinate[0] += +delta[0];\n    coordinate[1] += +delta[1];\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$cbe80a3fcd2b99b7(coordinate, circle) {\n    const r = circle.getRadius();\n    const center = circle.getCenter();\n    const x0 = center[0];\n    const y0 = center[1];\n    const x1 = coordinate[0];\n    const y1 = coordinate[1];\n    let dx = x1 - x0;\n    const dy = y1 - y0;\n    if (dx === 0 && dy === 0) dx = 1;\n    const d = Math.sqrt(dx * dx + dy * dy);\n    const x = x0 + r * dx / d;\n    const y = y0 + r * dy / d;\n    return [\n        x,\n        y\n    ];\n}\nfunction $1bd0a226f9a16141$export$18cdd31d17f97131(coordinate, segment) {\n    const x0 = coordinate[0];\n    const y0 = coordinate[1];\n    const start = segment[0];\n    const end = segment[1];\n    const x1 = start[0];\n    const y1 = start[1];\n    const x2 = end[0];\n    const y2 = end[1];\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n    let x, y;\n    if (along <= 0) {\n        x = x1;\n        y = y1;\n    } else if (along >= 1) {\n        x = x2;\n        y = y2;\n    } else {\n        x = x1 + along * dx;\n        y = y1 + along * dy;\n    }\n    return [\n        x,\n        y\n    ];\n}\nfunction $1bd0a226f9a16141$export$35ad6765fe262b6(fractionDigits) {\n    return(/**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */ function(coordinate) {\n        return $1bd0a226f9a16141$export$9ff8f16060979e0a(coordinate, fractionDigits);\n    });\n}\nfunction $1bd0a226f9a16141$export$6eb0ac5f024d8590(hemispheres, degrees, fractionDigits) {\n    const normalizedDegrees = (0, $6b000a049d919fe5$export$ba467bec01d66def)(degrees + 180, 360) - 180;\n    const x = Math.abs(3600 * normalizedDegrees);\n    const decimals = fractionDigits || 0;\n    let deg = Math.floor(x / 3600);\n    let min = Math.floor((x - deg * 3600) / 60);\n    let sec = (0, $6b000a049d919fe5$export$a81f732198733497)(x - deg * 3600 - min * 60, decimals);\n    if (sec >= 60) {\n        sec = 0;\n        min += 1;\n    }\n    if (min >= 60) {\n        min = 0;\n        deg += 1;\n    }\n    let hdms = deg + '\\u00b0';\n    if (min !== 0 || sec !== 0) hdms += ' ' + (0, $ff7180bdd45ebb19$export$24be126cb0a7bbeb)(min, 2) + '\\u2032';\n    if (sec !== 0) hdms += ' ' + (0, $ff7180bdd45ebb19$export$24be126cb0a7bbeb)(sec, 2, decimals) + '\\u2033';\n    if (normalizedDegrees !== 0) hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n    return hdms;\n}\nfunction $1bd0a226f9a16141$export$d9468344d3651243(coordinate, template, fractionDigits) {\n    if (coordinate) return template.replace('{x}', coordinate[0].toFixed(fractionDigits)).replace('{y}', coordinate[1].toFixed(fractionDigits));\n    return '';\n}\nfunction $1bd0a226f9a16141$export$e9bab7fafb253603(coordinate1, coordinate2) {\n    let equals = true;\n    for(let i = coordinate1.length - 1; i >= 0; --i)if (coordinate1[i] != coordinate2[i]) {\n        equals = false;\n        break;\n    }\n    return equals;\n}\nfunction $1bd0a226f9a16141$export$bb628a54ab399bc9(coordinate, angle) {\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    coordinate[0] = x;\n    coordinate[1] = y;\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$dcdf75081b88279d(coordinate, scale) {\n    coordinate[0] *= scale;\n    coordinate[1] *= scale;\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$88e6ebb4fe54f538(coord1, coord2) {\n    const dx = coord1[0] - coord2[0];\n    const dy = coord1[1] - coord2[1];\n    return dx * dx + dy * dy;\n}\nfunction $1bd0a226f9a16141$export$9f17032d917177de(coord1, coord2) {\n    return Math.sqrt($1bd0a226f9a16141$export$88e6ebb4fe54f538(coord1, coord2));\n}\nfunction $1bd0a226f9a16141$export$6985570514055196(coordinate, segment) {\n    return $1bd0a226f9a16141$export$88e6ebb4fe54f538(coordinate, $1bd0a226f9a16141$export$18cdd31d17f97131(coordinate, segment));\n}\nfunction $1bd0a226f9a16141$export$c883fd238161f841(coordinate, fractionDigits) {\n    if (coordinate) return $1bd0a226f9a16141$export$6eb0ac5f024d8590('NS', coordinate[1], fractionDigits) + ' ' + $1bd0a226f9a16141$export$6eb0ac5f024d8590('EW', coordinate[0], fractionDigits);\n    return '';\n}\nfunction $1bd0a226f9a16141$export$9ff8f16060979e0a(coordinate, fractionDigits) {\n    return $1bd0a226f9a16141$export$d9468344d3651243(coordinate, '{x}, {y}', fractionDigits);\n}\nfunction $1bd0a226f9a16141$export$39a9ce3624977b84(coordinate, projection) {\n    if (projection.canWrapX()) {\n        const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projection.getExtent());\n        const worldsAway = $1bd0a226f9a16141$export$24e2b27d1ff0c1d5(coordinate, projection, worldWidth);\n        if (worldsAway) coordinate[0] -= worldsAway * worldWidth;\n    }\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$24e2b27d1ff0c1d5(coordinate, projection, sourceExtentWidth) {\n    const projectionExtent = projection.getExtent();\n    let worldsAway = 0;\n    if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n        sourceExtentWidth = sourceExtentWidth || (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n    }\n    return worldsAway;\n}\n\n\n/**\n * @module ol/sphere\n */ \nconst $fb75384508533d8f$export$63f2df7bd7371262 = 6371008.8;\nfunction $fb75384508533d8f$export$79376507b09a66f(c1, c2, radius) {\n    radius = radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const lat1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[1]);\n    const lat2 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c2[1]);\n    const deltaLatBy2 = (lat2 - lat1) / 2;\n    const deltaLonBy2 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c2[0] - c1[0]) / 2;\n    const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */ function $fb75384508533d8f$var$getLengthInternal(coordinates, radius) {\n    let length = 0;\n    for(let i = 0, ii = coordinates.length; i < ii - 1; ++i)length += $fb75384508533d8f$export$79376507b09a66f(coordinates[i], coordinates[i + 1], radius);\n    return length;\n}\nfunction $fb75384508533d8f$export$f0d11c074a923179(geometry, options) {\n    options = options || {};\n    const radius = options.radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const projection = options.projection || 'EPSG:3857';\n    const type = geometry.getType();\n    if (type !== 'GeometryCollection') geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    let length = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case 'Point':\n        case 'MultiPoint':\n            break;\n        case 'LineString':\n        case 'LinearRing':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            length = $fb75384508533d8f$var$getLengthInternal(coordinates, radius);\n            break;\n        case 'MultiLineString':\n        case 'Polygon':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i)length += $fb75384508533d8f$var$getLengthInternal(coordinates[i], radius);\n            break;\n        case 'MultiPolygon':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i){\n                coords = coordinates[i];\n                for(j = 0, jj = coords.length; j < jj; ++j)length += $fb75384508533d8f$var$getLengthInternal(coords[j], radius);\n            }\n            break;\n        case 'GeometryCollection':\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i)length += $fb75384508533d8f$export$f0d11c074a923179(geometries[i], options);\n                break;\n            }\n        default:\n            throw new Error('Unsupported geometry type: ' + type);\n    }\n    return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */ function $fb75384508533d8f$var$getAreaInternal(coordinates, radius) {\n    let area = 0;\n    const len = coordinates.length;\n    let x1 = coordinates[len - 1][0];\n    let y1 = coordinates[len - 1][1];\n    for(let i = 0; i < len; i++){\n        const x2 = coordinates[i][0];\n        const y2 = coordinates[i][1];\n        area += (0, $6b000a049d919fe5$export$cba01ba138429a1d)(x2 - x1) * (2 + Math.sin((0, $6b000a049d919fe5$export$cba01ba138429a1d)(y1)) + Math.sin((0, $6b000a049d919fe5$export$cba01ba138429a1d)(y2)));\n        x1 = x2;\n        y1 = y2;\n    }\n    return area * radius * radius / 2.0;\n}\nfunction $fb75384508533d8f$export$520c40045967cb15(geometry, options) {\n    options = options || {};\n    const radius = options.radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const projection = options.projection || 'EPSG:3857';\n    const type = geometry.getType();\n    if (type !== 'GeometryCollection') geometry = geometry.clone().transform(projection, 'EPSG:4326');\n    let area = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case 'Point':\n        case 'MultiPoint':\n        case 'LineString':\n        case 'MultiLineString':\n        case 'LinearRing':\n            break;\n        case 'Polygon':\n            coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ geometry.getCoordinates();\n            area = Math.abs($fb75384508533d8f$var$getAreaInternal(coordinates[0], radius));\n            for(i = 1, ii = coordinates.length; i < ii; ++i)area -= Math.abs($fb75384508533d8f$var$getAreaInternal(coordinates[i], radius));\n            break;\n        case 'MultiPolygon':\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i){\n                coords = coordinates[i];\n                area += Math.abs($fb75384508533d8f$var$getAreaInternal(coords[0], radius));\n                for(j = 1, jj = coords.length; j < jj; ++j)area -= Math.abs($fb75384508533d8f$var$getAreaInternal(coords[j], radius));\n            }\n            break;\n        case 'GeometryCollection':\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i)area += $fb75384508533d8f$export$520c40045967cb15(geometries[i], options);\n                break;\n            }\n        default:\n            throw new Error('Unsupported geometry type: ' + type);\n    }\n    return area;\n}\nfunction $fb75384508533d8f$export$cc800923e997bb8(c1, distance, bearing, radius) {\n    radius = radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const lat1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[1]);\n    const lon1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[0]);\n    const dByR = distance / radius;\n    const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n    const lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n    return [\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(lon),\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(lat)\n    ];\n}\n\n\n/**\n * @module ol/proj/utm\n */ /**\n * Adapted from https://github.com/Turbo87/utm\n * Copyright (c) 2012-2017 Tobias Bieniek\n *\n * The functions here provide approximate transforms to and from UTM.\n * They are not appropriate for use beyond the validity extend of a UTM\n * zone, and the accuracy of the transform decreases toward the zone\n * edges.\n */ \n\n/**\n * @typedef {Object} UTMZone\n * @property {number} number The zone number (1 - 60).\n * @property {boolean} north The northern hemisphere.\n */ const $5f19451ebc03a1eb$var$K0 = 0.9996;\nconst $5f19451ebc03a1eb$var$E = 0.00669438;\nconst $5f19451ebc03a1eb$var$E2 = $5f19451ebc03a1eb$var$E * $5f19451ebc03a1eb$var$E;\nconst $5f19451ebc03a1eb$var$E3 = $5f19451ebc03a1eb$var$E2 * $5f19451ebc03a1eb$var$E;\nconst $5f19451ebc03a1eb$var$E_P2 = $5f19451ebc03a1eb$var$E / (1 - $5f19451ebc03a1eb$var$E);\nconst $5f19451ebc03a1eb$var$SQRT_E = Math.sqrt(1 - $5f19451ebc03a1eb$var$E);\nconst $5f19451ebc03a1eb$var$_E = (1 - $5f19451ebc03a1eb$var$SQRT_E) / (1 + $5f19451ebc03a1eb$var$SQRT_E);\nconst $5f19451ebc03a1eb$var$_E2 = $5f19451ebc03a1eb$var$_E * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$_E3 = $5f19451ebc03a1eb$var$_E2 * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$_E4 = $5f19451ebc03a1eb$var$_E3 * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$_E5 = $5f19451ebc03a1eb$var$_E4 * $5f19451ebc03a1eb$var$_E;\nconst $5f19451ebc03a1eb$var$M1 = 1 - $5f19451ebc03a1eb$var$E / 4 - 3 * $5f19451ebc03a1eb$var$E2 / 64 - 5 * $5f19451ebc03a1eb$var$E3 / 256;\nconst $5f19451ebc03a1eb$var$M2 = 3 * $5f19451ebc03a1eb$var$E / 8 + 3 * $5f19451ebc03a1eb$var$E2 / 32 + 45 * $5f19451ebc03a1eb$var$E3 / 1024;\nconst $5f19451ebc03a1eb$var$M3 = 15 * $5f19451ebc03a1eb$var$E2 / 256 + 45 * $5f19451ebc03a1eb$var$E3 / 1024;\nconst $5f19451ebc03a1eb$var$M4 = 35 * $5f19451ebc03a1eb$var$E3 / 3072;\nconst $5f19451ebc03a1eb$var$P2 = 1.5 * $5f19451ebc03a1eb$var$_E - 27 / 32 * $5f19451ebc03a1eb$var$_E3 + 269 / 512 * $5f19451ebc03a1eb$var$_E5;\nconst $5f19451ebc03a1eb$var$P3 = 21 / 16 * $5f19451ebc03a1eb$var$_E2 - 55 / 32 * $5f19451ebc03a1eb$var$_E4;\nconst $5f19451ebc03a1eb$var$P4 = 151 / 96 * $5f19451ebc03a1eb$var$_E3 - 417 / 128 * $5f19451ebc03a1eb$var$_E5;\nconst $5f19451ebc03a1eb$var$P5 = 1097 / 512 * $5f19451ebc03a1eb$var$_E4;\nconst $5f19451ebc03a1eb$var$R = 6378137;\n/**\n * @param {number} easting Easting value of coordinate.\n * @param {number} northing Northing value of coordinate.\n * @param {UTMZone} zone The UTM zone.\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\n */ function $5f19451ebc03a1eb$var$toLonLat(easting, northing, zone) {\n    const x = easting - 500000;\n    const y = zone.north ? northing : northing - 10000000;\n    const m = y / $5f19451ebc03a1eb$var$K0;\n    const mu = m / ($5f19451ebc03a1eb$var$R * $5f19451ebc03a1eb$var$M1);\n    const pRad = mu + $5f19451ebc03a1eb$var$P2 * Math.sin(2 * mu) + $5f19451ebc03a1eb$var$P3 * Math.sin(4 * mu) + $5f19451ebc03a1eb$var$P4 * Math.sin(6 * mu) + $5f19451ebc03a1eb$var$P5 * Math.sin(8 * mu);\n    const pSin = Math.sin(pRad);\n    const pSin2 = pSin * pSin;\n    const pCos = Math.cos(pRad);\n    const pTan = pSin / pCos;\n    const pTan2 = pTan * pTan;\n    const pTan4 = pTan2 * pTan2;\n    const epSin = 1 - $5f19451ebc03a1eb$var$E * pSin2;\n    const epSinSqrt = Math.sqrt(1 - $5f19451ebc03a1eb$var$E * pSin2);\n    const n = $5f19451ebc03a1eb$var$R / epSinSqrt;\n    const r = (1 - $5f19451ebc03a1eb$var$E) / epSin;\n    const c = $5f19451ebc03a1eb$var$E_P2 * pCos ** 2;\n    const c2 = c * c;\n    const d = x / (n * $5f19451ebc03a1eb$var$K0);\n    const d2 = d * d;\n    const d3 = d2 * d;\n    const d4 = d3 * d;\n    const d5 = d4 * d;\n    const d6 = d5 * d;\n    const latitude = pRad - pTan / r * (d2 / 2 - d4 / 24 * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * $5f19451ebc03a1eb$var$E_P2)) + d6 / 720 * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * $5f19451ebc03a1eb$var$E_P2 - 3 * c2);\n    let longitude = (d - d3 / 6 * (1 + 2 * pTan2 + c) + d5 / 120 * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * $5f19451ebc03a1eb$var$E_P2 + 24 * pTan4)) / pCos;\n    longitude = (0, $6b000a049d919fe5$export$4997ffc0176396a6)(longitude + (0, $6b000a049d919fe5$export$cba01ba138429a1d)($5f19451ebc03a1eb$var$zoneToCentralLongitude(zone.number)), -Math.PI, Math.PI);\n    return [\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(longitude),\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(latitude)\n    ];\n}\nconst $5f19451ebc03a1eb$var$MIN_LATITUDE = -80;\nconst $5f19451ebc03a1eb$var$MAX_LATITUDE = 84;\nconst $5f19451ebc03a1eb$var$MIN_LONGITUDE = -180;\nconst $5f19451ebc03a1eb$var$MAX_LONGITUDE = 180;\n/**\n * @param {number} longitude The longitude.\n * @param {number} latitude The latitude.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\n */ function $5f19451ebc03a1eb$var$fromLonLat(longitude, latitude, zone) {\n    longitude = (0, $6b000a049d919fe5$export$4997ffc0176396a6)(longitude, $5f19451ebc03a1eb$var$MIN_LONGITUDE, $5f19451ebc03a1eb$var$MAX_LONGITUDE);\n    if (latitude < $5f19451ebc03a1eb$var$MIN_LATITUDE) latitude = $5f19451ebc03a1eb$var$MIN_LATITUDE;\n    else if (latitude > $5f19451ebc03a1eb$var$MAX_LATITUDE) latitude = $5f19451ebc03a1eb$var$MAX_LATITUDE;\n    const latRad = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(latitude);\n    const latSin = Math.sin(latRad);\n    const latCos = Math.cos(latRad);\n    const latTan = latSin / latCos;\n    const latTan2 = latTan * latTan;\n    const latTan4 = latTan2 * latTan2;\n    const lonRad = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(longitude);\n    const centralLon = $5f19451ebc03a1eb$var$zoneToCentralLongitude(zone.number);\n    const centralLonRad = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(centralLon);\n    const n = $5f19451ebc03a1eb$var$R / Math.sqrt(1 - $5f19451ebc03a1eb$var$E * latSin ** 2);\n    const c = $5f19451ebc03a1eb$var$E_P2 * latCos ** 2;\n    const a = latCos * (0, $6b000a049d919fe5$export$4997ffc0176396a6)(lonRad - centralLonRad, -Math.PI, Math.PI);\n    const a2 = a * a;\n    const a3 = a2 * a;\n    const a4 = a3 * a;\n    const a5 = a4 * a;\n    const a6 = a5 * a;\n    const m = $5f19451ebc03a1eb$var$R * ($5f19451ebc03a1eb$var$M1 * latRad - $5f19451ebc03a1eb$var$M2 * Math.sin(2 * latRad) + $5f19451ebc03a1eb$var$M3 * Math.sin(4 * latRad) - $5f19451ebc03a1eb$var$M4 * Math.sin(6 * latRad));\n    const easting = $5f19451ebc03a1eb$var$K0 * n * (a + a3 / 6 * (1 - latTan2 + c) + a5 / 120 * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * $5f19451ebc03a1eb$var$E_P2)) + 500000;\n    let northing = $5f19451ebc03a1eb$var$K0 * (m + n * latTan * (a2 / 2 + a4 / 24 * (5 - latTan2 + 9 * c + 4 * c ** 2) + a6 / 720 * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * $5f19451ebc03a1eb$var$E_P2)));\n    if (!zone.north) northing += 10000000;\n    return [\n        easting,\n        northing\n    ];\n}\n/**\n * @param {number} zone The zone number.\n * @return {number} The central longitude in degrees.\n */ function $5f19451ebc03a1eb$var$zoneToCentralLongitude(zone) {\n    return (zone - 1) * 6 - 180 + 3;\n}\n/**\n * @type {Array<RegExp>}\n */ const $5f19451ebc03a1eb$var$epsgRegExes = [\n    /^EPSG:(\\d+)$/,\n    /^urn:ogc:def:crs:EPSG::(\\d+)$/,\n    /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/\n];\nfunction $5f19451ebc03a1eb$export$bb54dc52a08ed170(code) {\n    let epsgId = 0;\n    for (const re of $5f19451ebc03a1eb$var$epsgRegExes){\n        const match = code.match(re);\n        if (match) {\n            epsgId = parseInt(match[1]);\n            break;\n        }\n    }\n    if (!epsgId) return null;\n    let number = 0;\n    let north = false;\n    if (epsgId > 32700 && epsgId < 32761) number = epsgId - 32700;\n    else if (epsgId > 32600 && epsgId < 32661) {\n        north = true;\n        number = epsgId - 32600;\n    }\n    if (!number) return null;\n    return {\n        number: number,\n        north: north\n    };\n}\n/**\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../proj.js').TransformFunction} The transform function.\n */ function $5f19451ebc03a1eb$var$makeTransformFunction(transformer, zone) {\n    return function(input, output, dimension, stride) {\n        const length = input.length;\n        dimension = dimension > 1 ? dimension : 2;\n        stride = stride ?? dimension;\n        if (!output) {\n            if (dimension > 2) output = input.slice();\n            else output = new Array(length);\n        }\n        for(let i = 0; i < length; i += stride){\n            const x = input[i];\n            const y = input[i + 1];\n            const coord = transformer(x, y, zone);\n            output[i] = coord[0];\n            output[i + 1] = coord[1];\n        }\n        return output;\n    };\n}\nfunction $5f19451ebc03a1eb$export$3277980d225b59be(code) {\n    const zone = $5f19451ebc03a1eb$export$bb54dc52a08ed170(code);\n    if (!zone) return null;\n    return new (0, $6dc418afeec7068a$export$2e2bcd8739ae039)({\n        code: code,\n        units: 'm'\n    });\n}\nfunction $5f19451ebc03a1eb$export$f94509e55523febf(projection) {\n    const zone = $5f19451ebc03a1eb$export$bb54dc52a08ed170(projection.getCode());\n    if (!zone) return null;\n    return {\n        forward: $5f19451ebc03a1eb$var$makeTransformFunction($5f19451ebc03a1eb$var$fromLonLat, zone),\n        inverse: $5f19451ebc03a1eb$var$makeTransformFunction($5f19451ebc03a1eb$var$toLonLat, zone)\n    };\n}\n\n\n/**\n * @module ol/console\n */ /**\n * @typedef {'info'|'warn'|'error'|'none'} Level\n */ /**\n * @type {Object<Level, number>}\n */ const $8c65b0699f3f3f8e$var$levels = {\n    info: 1,\n    warn: 2,\n    error: 3,\n    none: 4\n};\n/**\n * @type {number}\n */ let $8c65b0699f3f3f8e$var$level = $8c65b0699f3f3f8e$var$levels.info;\nfunction $8c65b0699f3f3f8e$export$2c97a59140dbf245(l) {\n    $8c65b0699f3f3f8e$var$level = $8c65b0699f3f3f8e$var$levels[l];\n}\nfunction $8c65b0699f3f3f8e$export$bef1f36f5486a6a3(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.info) return;\n    console.log(...args); // eslint-disable-line no-console\n}\nfunction $8c65b0699f3f3f8e$export$c106dd0671a0fc2d(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.warn) return;\n    console.warn(...args); // eslint-disable-line no-console\n}\nfunction $8c65b0699f3f3f8e$export$a3bc9b8ed74fc(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.error) return;\n    console.error(...args); // eslint-disable-line no-console\n}\n\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */ /**\n * @typedef {Object} Transforms\n * @property {TransformFunction} forward The forward transform (from geographic).\n * @property {TransformFunction} inverse The inverse transform (to geographic).\n */ /**\n * @type {Array<function(Projection): Transforms|null>}\n */ const $9c4744460e43e41b$var$transformFactories = [\n    (0, $5f19451ebc03a1eb$export$f94509e55523febf)\n];\n/**\n * @type {Array<function(string): Projection|null>}\n */ const $9c4744460e43e41b$var$projectionFactories = [\n    (0, $5f19451ebc03a1eb$export$3277980d225b59be)\n];\nlet $9c4744460e43e41b$var$showCoordinateWarning = true;\nfunction $9c4744460e43e41b$export$ed949affbc7c4223(disable) {\n    const hide = disable === undefined ? true : disable;\n    $9c4744460e43e41b$var$showCoordinateWarning = !hide;\n}\nfunction $9c4744460e43e41b$export$dd516654c5f598fb(input, output) {\n    if (output !== undefined) {\n        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];\n        output;\n    } else output = input.slice();\n    return output;\n}\nfunction $9c4744460e43e41b$export$83e8ab53904f8022(input, output) {\n    if (output !== undefined && input !== output) {\n        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];\n        input = output;\n    }\n    return input;\n}\nfunction $9c4744460e43e41b$export$59ae956cd3e343f7(projection) {\n    (0, $f5ec5c943d804ecb$export$e16d8520af44a096)(projection.getCode(), projection);\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection, projection, $9c4744460e43e41b$export$dd516654c5f598fb);\n}\nfunction $9c4744460e43e41b$export$638ad73f7aafb913(projections) {\n    projections.forEach($9c4744460e43e41b$export$59ae956cd3e343f7);\n}\nfunction $9c4744460e43e41b$export$3988ae62b71be9a3(projectionLike) {\n    if (!(typeof projectionLike === 'string')) return projectionLike;\n    const projection = (0, $f5ec5c943d804ecb$export$3988ae62b71be9a3)(projectionLike);\n    if (projection) return projection;\n    for (const makeProjection of $9c4744460e43e41b$var$projectionFactories){\n        const projection = makeProjection(projectionLike);\n        if (projection) return projection;\n    }\n    return null;\n}\nfunction $9c4744460e43e41b$export$2d8f7b4eec383d44(projection, resolution, point, units) {\n    projection = $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n    let pointResolution;\n    const getter = projection.getPointResolutionFunc();\n    if (getter) {\n        pointResolution = getter(resolution, point);\n        if (units && units !== projection.getUnits()) {\n            const metersPerUnit = projection.getMetersPerUnit();\n            if (metersPerUnit) pointResolution = pointResolution * metersPerUnit / (0, $03edbd434a9e6608$export$1482081eec883108)[units];\n        }\n    } else {\n        const projUnits = projection.getUnits();\n        if (projUnits == 'degrees' && !units || units == 'degrees') pointResolution = resolution;\n        else {\n            // Estimate point resolution by transforming the center pixel to EPSG:4326,\n            // measuring its width and height on the normal sphere, and taking the\n            // average of the width and height.\n            const toEPSG4326 = $9c4744460e43e41b$export$e3c4995a701c26a3(projection, $9c4744460e43e41b$export$3988ae62b71be9a3('EPSG:4326'));\n            if (!toEPSG4326 && projUnits !== 'degrees') // no transform is available\n            pointResolution = resolution * projection.getMetersPerUnit();\n            else {\n                let vertices = [\n                    point[0] - resolution / 2,\n                    point[1],\n                    point[0] + resolution / 2,\n                    point[1],\n                    point[0],\n                    point[1] - resolution / 2,\n                    point[0],\n                    point[1] + resolution / 2\n                ];\n                vertices = toEPSG4326(vertices, vertices, 2);\n                const width = (0, $fb75384508533d8f$export$79376507b09a66f)(vertices.slice(0, 2), vertices.slice(2, 4));\n                const height = (0, $fb75384508533d8f$export$79376507b09a66f)(vertices.slice(4, 6), vertices.slice(6, 8));\n                pointResolution = (width + height) / 2;\n            }\n            const metersPerUnit = units ? (0, $03edbd434a9e6608$export$1482081eec883108)[units] : projection.getMetersPerUnit();\n            if (metersPerUnit !== undefined) pointResolution /= metersPerUnit;\n        }\n    }\n    return pointResolution;\n}\nfunction $9c4744460e43e41b$export$eeb8392580a05a37(projections) {\n    $9c4744460e43e41b$export$638ad73f7aafb913(projections);\n    projections.forEach(function(source) {\n        projections.forEach(function(destination) {\n            if (source !== destination) (0, $11b5dd198626e1de$export$e16d8520af44a096)(source, destination, $9c4744460e43e41b$export$dd516654c5f598fb);\n        });\n    });\n}\nfunction $9c4744460e43e41b$export$4856f21c2f184f24(projections1, projections2, forwardTransform, inverseTransform) {\n    projections1.forEach(function(projection1) {\n        projections2.forEach(function(projection2) {\n            (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection1, projection2, forwardTransform);\n            (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection2, projection1, inverseTransform);\n        });\n    });\n}\nfunction $9c4744460e43e41b$export$4860237d10380594() {\n    (0, $f5ec5c943d804ecb$export$42ffd38884aecdac)();\n    (0, $11b5dd198626e1de$export$42ffd38884aecdac)();\n}\nfunction $9c4744460e43e41b$export$549167224996a0fb(projection, defaultCode) {\n    if (!projection) return $9c4744460e43e41b$export$3988ae62b71be9a3(defaultCode);\n    if (typeof projection === 'string') return $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n    return /** @type {Projection} */ projection;\n}\nfunction $9c4744460e43e41b$export$6b4aafd331159e0d(coordTransform) {\n    return(/**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimensions that should be transformed.\n     * @param {number} [stride] Stride.\n     * @return {Array<number>} Output.\n     */ function(input, output, dimension, stride) {\n        const length = input.length;\n        dimension = dimension !== undefined ? dimension : 2;\n        stride = stride ?? dimension;\n        output = output !== undefined ? output : new Array(length);\n        for(let i = 0; i < length; i += stride){\n            const point = coordTransform(input.slice(i, i + dimension));\n            const pointLength = point.length;\n            for(let j = 0, jj = stride; j < jj; ++j)output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n        return output;\n    });\n}\nfunction $9c4744460e43e41b$export$6b1c2e6623f4f49d(source, destination, forward, inverse) {\n    const sourceProj = $9c4744460e43e41b$export$3988ae62b71be9a3(source);\n    const destProj = $9c4744460e43e41b$export$3988ae62b71be9a3(destination);\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(sourceProj, destProj, $9c4744460e43e41b$export$6b4aafd331159e0d(forward));\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(destProj, sourceProj, $9c4744460e43e41b$export$6b4aafd331159e0d(inverse));\n}\nfunction $9c4744460e43e41b$export$b15d9668511529b9(coordinate, projection) {\n    $9c4744460e43e41b$export$ed949affbc7c4223();\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, 'EPSG:4326', projection !== undefined ? projection : 'EPSG:3857');\n}\nfunction $9c4744460e43e41b$export$3fb495868742d370(coordinate, projection) {\n    const lonLat = $9c4744460e43e41b$export$51186ad6e864892a(coordinate, projection !== undefined ? projection : 'EPSG:3857', 'EPSG:4326');\n    const lon = lonLat[0];\n    if (lon < -180 || lon > 180) lonLat[0] = (0, $6b000a049d919fe5$export$ba467bec01d66def)(lon + 180, 360) - 180;\n    return lonLat;\n}\nfunction $9c4744460e43e41b$export$fe091d73a555748b(projection1, projection2) {\n    if (projection1 === projection2) return true;\n    const equalUnits = projection1.getUnits() === projection2.getUnits();\n    if (projection1.getCode() === projection2.getCode()) return equalUnits;\n    const transformFunc = $9c4744460e43e41b$export$e3c4995a701c26a3(projection1, projection2);\n    return transformFunc === $9c4744460e43e41b$export$dd516654c5f598fb && equalUnits;\n}\nfunction $9c4744460e43e41b$export$e3c4995a701c26a3(source, destination) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    let transformFunc = (0, $11b5dd198626e1de$export$3988ae62b71be9a3)(sourceCode, destinationCode);\n    if (transformFunc) return transformFunc;\n    /**\n   * @type {Transforms|null}\n   */ let sourceTransforms = null;\n    /**\n   * @type {Transforms|null}\n   */ let destinationTransforms = null;\n    // lazily add projections if we have supported transforms\n    for (const makeTransforms of $9c4744460e43e41b$var$transformFactories){\n        if (!sourceTransforms) sourceTransforms = makeTransforms(source);\n        if (!destinationTransforms) destinationTransforms = makeTransforms(destination);\n    }\n    if (!sourceTransforms && !destinationTransforms) return null;\n    const intermediateCode = 'EPSG:4326';\n    if (!destinationTransforms) {\n        const toDestination = (0, $11b5dd198626e1de$export$3988ae62b71be9a3)(intermediateCode, destinationCode);\n        if (toDestination) transformFunc = $9c4744460e43e41b$var$composeTransformFuncs(sourceTransforms.inverse, toDestination);\n    } else if (!sourceTransforms) {\n        const fromSource = (0, $11b5dd198626e1de$export$3988ae62b71be9a3)(sourceCode, intermediateCode);\n        if (fromSource) transformFunc = $9c4744460e43e41b$var$composeTransformFuncs(fromSource, destinationTransforms.forward);\n    } else transformFunc = $9c4744460e43e41b$var$composeTransformFuncs(sourceTransforms.inverse, destinationTransforms.forward);\n    if (transformFunc) {\n        $9c4744460e43e41b$export$59ae956cd3e343f7(source);\n        $9c4744460e43e41b$export$59ae956cd3e343f7(destination);\n        (0, $11b5dd198626e1de$export$e16d8520af44a096)(source, destination, transformFunc);\n    }\n    return transformFunc;\n}\n/**\n * @param {TransformFunction} t1 The first transform function.\n * @param {TransformFunction} t2 The second transform function.\n * @return {TransformFunction} The composed transform function.\n */ function $9c4744460e43e41b$var$composeTransformFuncs(t1, t2) {\n    return function(input, output, dimensions, stride) {\n        output = t1(input, output, dimensions, stride);\n        return t2(output, output, dimensions, stride);\n    };\n}\nfunction $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination) {\n    const sourceProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(source);\n    const destinationProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(destination);\n    return $9c4744460e43e41b$export$e3c4995a701c26a3(sourceProjection, destinationProjection);\n}\nfunction $9c4744460e43e41b$export$51186ad6e864892a(coordinate, source, destination) {\n    const transformFunc = $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination);\n    if (!transformFunc) {\n        const sourceCode = $9c4744460e43e41b$export$3988ae62b71be9a3(source).getCode();\n        const destinationCode = $9c4744460e43e41b$export$3988ae62b71be9a3(destination).getCode();\n        throw new Error(`No transform available between ${sourceCode} and ${destinationCode}`);\n    }\n    return transformFunc(coordinate, undefined, coordinate.length);\n}\nfunction $9c4744460e43e41b$export$751c68e0e0efff79(extent, source, destination, stops) {\n    const transformFunc = $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination);\n    return (0, $6da4c8ed3074c92b$export$9f9dcb98c894b623)(extent, transformFunc, undefined, stops);\n}\nfunction $9c4744460e43e41b$export$affbde93b1db73f8(point, sourceProjection, destinationProjection) {\n    const transformFunc = $9c4744460e43e41b$export$e3c4995a701c26a3(sourceProjection, destinationProjection);\n    return transformFunc(point);\n}\n/**\n * @type {Projection|null}\n */ let $9c4744460e43e41b$var$userProjection = null;\nfunction $9c4744460e43e41b$export$d0aeadbeac54116e(projection) {\n    $9c4744460e43e41b$var$userProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n}\nfunction $9c4744460e43e41b$export$1ae11279759d4e8f() {\n    $9c4744460e43e41b$var$userProjection = null;\n}\nfunction $9c4744460e43e41b$export$3973b77d5f6f2790() {\n    return $9c4744460e43e41b$var$userProjection;\n}\nfunction $9c4744460e43e41b$export$aa7494edfbe36197() {\n    $9c4744460e43e41b$export$d0aeadbeac54116e('EPSG:4326');\n}\nfunction $9c4744460e43e41b$export$698f563af1ba02a5(coordinate, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return coordinate;\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, sourceProjection, $9c4744460e43e41b$var$userProjection);\n}\nfunction $9c4744460e43e41b$export$d4b8ec0b96db1ee2(coordinate, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) {\n        if ($9c4744460e43e41b$var$showCoordinateWarning && !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(coordinate, [\n            0,\n            0\n        ]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {\n            $9c4744460e43e41b$var$showCoordinateWarning = false;\n            (0, $8c65b0699f3f3f8e$export$c106dd0671a0fc2d)('Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.');\n        }\n        return coordinate;\n    }\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, $9c4744460e43e41b$var$userProjection, destProjection);\n}\nfunction $9c4744460e43e41b$export$96bfd09e2cffb006(extent, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return extent;\n    return $9c4744460e43e41b$export$751c68e0e0efff79(extent, sourceProjection, $9c4744460e43e41b$var$userProjection);\n}\nfunction $9c4744460e43e41b$export$494be3a3a25689ca(extent, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return extent;\n    return $9c4744460e43e41b$export$751c68e0e0efff79(extent, $9c4744460e43e41b$var$userProjection, destProjection);\n}\nfunction $9c4744460e43e41b$export$b56bb8ad8b3a00e9(resolution, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return resolution;\n    const sourceMetersPerUnit = $9c4744460e43e41b$export$3988ae62b71be9a3(sourceProjection).getMetersPerUnit();\n    const userMetersPerUnit = $9c4744460e43e41b$var$userProjection.getMetersPerUnit();\n    return sourceMetersPerUnit && userMetersPerUnit ? resolution * sourceMetersPerUnit / userMetersPerUnit : resolution;\n}\nfunction $9c4744460e43e41b$export$bd1cd3b88140b906(resolution, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return resolution;\n    const destMetersPerUnit = $9c4744460e43e41b$export$3988ae62b71be9a3(destProjection).getMetersPerUnit();\n    const userMetersPerUnit = $9c4744460e43e41b$var$userProjection.getMetersPerUnit();\n    return destMetersPerUnit && userMetersPerUnit ? resolution * userMetersPerUnit / destMetersPerUnit : resolution;\n}\nfunction $9c4744460e43e41b$export$1873f9cfeb8bd1d6(sourceProj, destProj, transform) {\n    return function(coord) {\n        let transformed, worldsAway;\n        if (sourceProj.canWrapX()) {\n            const sourceExtent = sourceProj.getExtent();\n            const sourceExtentWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceExtent);\n            coord = coord.slice(0);\n            worldsAway = (0, $1bd0a226f9a16141$export$24e2b27d1ff0c1d5)(coord, sourceProj, sourceExtentWidth);\n            if (worldsAway) // Move x to the real world\n            coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n            coord[0] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(coord[0], sourceExtent[0], sourceExtent[2]);\n            coord[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(coord[1], sourceExtent[1], sourceExtent[3]);\n            transformed = transform(coord);\n        } else transformed = transform(coord);\n        if (worldsAway && destProj.canWrapX()) // Move transformed coordinate back to the offset world\n        transformed[0] += worldsAway * (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(destProj.getExtent());\n        return transformed;\n    };\n}\nfunction $9c4744460e43e41b$export$86eed449eb2dcac4() {\n    // Add transformations that don't alter coordinates to convert within set of\n    // projections with equal meaning.\n    $9c4744460e43e41b$export$eeb8392580a05a37((0, $84ad988f04807ab1$export$b508d7ad9a891c1b));\n    $9c4744460e43e41b$export$eeb8392580a05a37((0, $b58ae362632b32c5$export$b508d7ad9a891c1b));\n    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n    // coordinates and back.\n    $9c4744460e43e41b$export$4856f21c2f184f24((0, $b58ae362632b32c5$export$b508d7ad9a891c1b), (0, $84ad988f04807ab1$export$b508d7ad9a891c1b), (0, $84ad988f04807ab1$export$1ff8bb36c0983070), (0, $84ad988f04807ab1$export$8c71322ec28ed6b4));\n}\n$9c4744460e43e41b$export$86eed449eb2dcac4();\n\n\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\n */ /**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */ const $6be53f6edfbf1854$var$MAX_SUBDIVISION = 10;\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */ const $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH = 0.25;\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */ class $6be53f6edfbf1854$var$Triangulation {\n    /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\n   * @param {import(\"../transform.js\").Transform} [sourceMatrix] Source transform matrix.\n   */ constructor(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, destinationResolution, sourceMatrix){\n        /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */ this.sourceProj_ = sourceProj;\n        /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */ this.targetProj_ = targetProj;\n        /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */ let transformInvCache = {};\n        const transformInv = sourceMatrix ? (0, $9c4744460e43e41b$export$6b4aafd331159e0d)((input)=>(0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(sourceMatrix, (0, $9c4744460e43e41b$export$51186ad6e864892a)(input, this.targetProj_, this.sourceProj_))) : (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(this.targetProj_, this.sourceProj_);\n        /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */ this.transformInv_ = function(c) {\n            const key = c[0] + '/' + c[1];\n            if (!transformInvCache[key]) transformInvCache[key] = transformInv(c);\n            return transformInvCache[key];\n        };\n        /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */ this.maxSourceExtent_ = maxSourceExtent;\n        /**\n     * @type {number}\n     * @private\n     */ this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n        /**\n     * @type {Array<Triangle>}\n     * @private\n     */ this.triangles_ = [];\n        /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */ this.wrapsXInSource_ = false;\n        /**\n     * @type {boolean}\n     * @private\n     */ this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(maxSourceExtent) >= (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent());\n        /**\n     * @type {?number}\n     * @private\n     */ this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent()) : null;\n        /**\n     * @type {?number}\n     * @private\n     */ this.targetWorldWidth_ = this.targetProj_.getExtent() ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.targetProj_.getExtent()) : null;\n        const destinationTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(targetExtent);\n        const destinationTopRight = (0, $6da4c8ed3074c92b$export$b84fa077c8b05295)(targetExtent);\n        const destinationBottomRight = (0, $6da4c8ed3074c92b$export$e77c1cf70445e168)(targetExtent);\n        const destinationBottomLeft = (0, $6da4c8ed3074c92b$export$8d09f5e2e1bf560d)(targetExtent);\n        const sourceTopLeft = this.transformInv_(destinationTopLeft);\n        const sourceTopRight = this.transformInv_(destinationTopRight);\n        const sourceBottomRight = this.transformInv_(destinationBottomRight);\n        const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n        /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overall reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */ const maxSubdivision = $6be53f6edfbf1854$var$MAX_SUBDIVISION + (destinationResolution ? Math.max(0, Math.ceil(Math.log2((0, $6da4c8ed3074c92b$export$520c40045967cb15)(targetExtent) / (destinationResolution * destinationResolution * 65536)))) : 0);\n        this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);\n        if (this.wrapsXInSource_) {\n            let leftBound = Infinity;\n            this.triangles_.forEach(function(triangle, i, arr) {\n                leftBound = Math.min(leftBound, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n            });\n            // Shift triangles to be as close to `leftBound` as possible\n            // (if the distance is more than `worldWidth / 2` it can be closer.\n            this.triangles_.forEach((triangle)=>{\n                if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {\n                    const newTriangle = [\n                        [\n                            triangle.source[0][0],\n                            triangle.source[0][1]\n                        ],\n                        [\n                            triangle.source[1][0],\n                            triangle.source[1][1]\n                        ],\n                        [\n                            triangle.source[2][0],\n                            triangle.source[2][1]\n                        ]\n                    ];\n                    if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[0][0] -= this.sourceWorldWidth_;\n                    if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[1][0] -= this.sourceWorldWidth_;\n                    if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[2][0] -= this.sourceWorldWidth_;\n                    // Rarely (if the extent contains both the dateline and prime meridian)\n                    // the shift can in turn break some triangles.\n                    // Detect this here and don't shift in such cases.\n                    const minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    const maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    if (maxX - minX < this.sourceWorldWidth_ / 2) triangle.source = newTriangle;\n                }\n            });\n        }\n        transformInvCache = {};\n    }\n    /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */ addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n        this.triangles_.push({\n            source: [\n                aSrc,\n                bSrc,\n                cSrc\n            ],\n            target: [\n                a,\n                b,\n                c\n            ]\n        });\n    }\n    /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */ addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n        const sourceQuadExtent = (0, $6da4c8ed3074c92b$export$8aceca7c77505534)([\n            aSrc,\n            bSrc,\n            cSrc,\n            dSrc\n        ]);\n        const sourceCoverageX = this.sourceWorldWidth_ ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceQuadExtent) / this.sourceWorldWidth_ : null;\n        const sourceWorldWidth = /** @type {number} */ this.sourceWorldWidth_;\n        // when the quad is wrapped in the source projection\n        // it covers most of the projection extent, but not fully\n        const wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;\n        let needsSubdivision = false;\n        if (maxSubdivision > 0) {\n            if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n                const targetQuadExtent = (0, $6da4c8ed3074c92b$export$8aceca7c77505534)([\n                    a,\n                    b,\n                    c,\n                    d\n                ]);\n                const targetCoverageX = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(targetQuadExtent) / this.targetWorldWidth_;\n                needsSubdivision = targetCoverageX > $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH || needsSubdivision;\n            }\n            if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) needsSubdivision = sourceCoverageX > $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH || needsSubdivision;\n        }\n        if (!needsSubdivision && this.maxSourceExtent_) {\n            if (isFinite(sourceQuadExtent[0]) && isFinite(sourceQuadExtent[1]) && isFinite(sourceQuadExtent[2]) && isFinite(sourceQuadExtent[3])) {\n                if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(sourceQuadExtent, this.maxSourceExtent_)) // whole quad outside source projection extent -> ignore\n                return;\n            }\n        }\n        let isNotFinite = 0;\n        if (!needsSubdivision) {\n            if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {\n                if (maxSubdivision > 0) needsSubdivision = true;\n                else {\n                    // It might be the case that only 1 of the points is infinite. In this case\n                    // we can draw a single triangle with the other three points\n                    isNotFinite = (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) + (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) + (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) + (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n                    if (isNotFinite != 1 && isNotFinite != 2 && isNotFinite != 4 && isNotFinite != 8) return;\n                }\n            }\n        }\n        if (maxSubdivision > 0) {\n            if (!needsSubdivision) {\n                const center = [\n                    (a[0] + c[0]) / 2,\n                    (a[1] + c[1]) / 2\n                ];\n                const centerSrc = this.transformInv_(center);\n                let dx;\n                if (wrapsX) {\n                    const centerSrcEstimX = ((0, $6b000a049d919fe5$export$ba467bec01d66def)(aSrc[0], sourceWorldWidth) + (0, $6b000a049d919fe5$export$ba467bec01d66def)(cSrc[0], sourceWorldWidth)) / 2;\n                    dx = centerSrcEstimX - (0, $6b000a049d919fe5$export$ba467bec01d66def)(centerSrc[0], sourceWorldWidth);\n                } else dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n                const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n                const centerSrcErrorSquared = dx * dx + dy * dy;\n                needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n            }\n            if (needsSubdivision) {\n                if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n                    // split horizontally (top & bottom)\n                    const bc = [\n                        (b[0] + c[0]) / 2,\n                        (b[1] + c[1]) / 2\n                    ];\n                    const bcSrc = this.transformInv_(bc);\n                    const da = [\n                        (d[0] + a[0]) / 2,\n                        (d[1] + a[1]) / 2\n                    ];\n                    const daSrc = this.transformInv_(da);\n                    this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n                    this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n                } else {\n                    // split vertically (left & right)\n                    const ab = [\n                        (a[0] + b[0]) / 2,\n                        (a[1] + b[1]) / 2\n                    ];\n                    const abSrc = this.transformInv_(ab);\n                    const cd = [\n                        (c[0] + d[0]) / 2,\n                        (c[1] + d[1]) / 2\n                    ];\n                    const cdSrc = this.transformInv_(cd);\n                    this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n                    this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n                }\n                return;\n            }\n        }\n        if (wrapsX) {\n            if (!this.canWrapXInSource_) return;\n            this.wrapsXInSource_ = true;\n        }\n        // Exactly zero or one of *Src is not finite\n        // The triangles must have the diagonal line as the first side\n        // This is to allow easy code in reproj.s to make it straight for broken\n        // browsers that can't handle diagonal clipping\n        if ((isNotFinite & 0xb) == 0) this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n        if ((isNotFinite & 0xe) == 0) this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n        if (isNotFinite) {\n            // Try the other two triangles\n            if ((isNotFinite & 0xd) == 0) this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n            if ((isNotFinite & 0x7) == 0) this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n        }\n    }\n    /**\n   * Calculates extent of the `source` coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */ calculateSourceExtent() {\n        const extent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        this.triangles_.forEach(function(triangle, i, arr) {\n            const src = triangle.source;\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[0]);\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[1]);\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[2]);\n        });\n        return extent;\n    }\n    /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */ getTriangles() {\n        return this.triangles_;\n    }\n}\nvar $6be53f6edfbf1854$export$2e2bcd8739ae039 = $6be53f6edfbf1854$var$Triangulation;\n\n\n/**\n * @module ol/reproj\n */ \n\n\n\nlet $2b0a118af78fb031$var$brokenDiagonalRendering_;\nconst $2b0a118af78fb031$export$a166f0857c555517 = [];\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */ function $2b0a118af78fb031$var$drawTestTriangle(ctx, u1, v1, u2, v2) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(u1, v1);\n    ctx.lineTo(u2, v2);\n    ctx.closePath();\n    ctx.save();\n    ctx.clip();\n    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n    ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */ function $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, offset) {\n    // the values ought to be close to the rgba(210, 0, 0, 0.75)\n    return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 191.25) > 2;\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */ function $2b0a118af78fb031$var$isBrokenDiagonalRendering() {\n    if ($2b0a118af78fb031$var$brokenDiagonalRendering_ === undefined) {\n        const ctx = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(6, 6, $2b0a118af78fb031$export$a166f0857c555517);\n        ctx.globalCompositeOperation = 'lighter';\n        ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n        $2b0a118af78fb031$var$drawTestTriangle(ctx, 4, 5, 4, 0);\n        $2b0a118af78fb031$var$drawTestTriangle(ctx, 4, 5, 0, 5);\n        const data = ctx.getImageData(0, 0, 3, 3).data;\n        $2b0a118af78fb031$var$brokenDiagonalRendering_ = $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 0) || $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 4) || $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 8);\n        (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(ctx);\n        $2b0a118af78fb031$export$a166f0857c555517.push(ctx.canvas);\n    }\n    return $2b0a118af78fb031$var$brokenDiagonalRendering_;\n}\nfunction $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution) {\n    const sourceCenter = (0, $9c4744460e43e41b$export$51186ad6e864892a)(targetCenter, targetProj, sourceProj);\n    // calculate the ideal resolution of the source data\n    let sourceResolution = (0, $9c4744460e43e41b$export$2d8f7b4eec383d44)(targetProj, targetResolution, targetCenter);\n    const targetMetersPerUnit = targetProj.getMetersPerUnit();\n    if (targetMetersPerUnit !== undefined) sourceResolution *= targetMetersPerUnit;\n    const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n    if (sourceMetersPerUnit !== undefined) sourceResolution /= sourceMetersPerUnit;\n    // Based on the projection properties, the point resolution at the specified\n    // coordinates may be slightly different. We need to reverse-compensate this\n    // in order to achieve optimal results.\n    const sourceExtent = sourceProj.getExtent();\n    if (!sourceExtent || (0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(sourceExtent, sourceCenter)) {\n        const compensationFactor = (0, $9c4744460e43e41b$export$2d8f7b4eec383d44)(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n        if (isFinite(compensationFactor) && compensationFactor > 0) sourceResolution /= compensationFactor;\n    }\n    return sourceResolution;\n}\nfunction $2b0a118af78fb031$export$16d356211d01f1cc(sourceProj, targetProj, targetExtent, targetResolution) {\n    const targetCenter = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(targetExtent);\n    let sourceResolution = $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution);\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) (0, $6da4c8ed3074c92b$export$f9ed8a3d123a08e2)(targetExtent, function(corner) {\n        sourceResolution = $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, corner, targetResolution);\n        return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n    return sourceResolution;\n}\nfunction $2b0a118af78fb031$export$b3890eb0ae9dca99(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, renderEdges, interpolate, drawSingle, clipExtent) {\n    const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(Math.round(pixelRatio * width), Math.round(pixelRatio * height), $2b0a118af78fb031$export$a166f0857c555517);\n    if (!interpolate) context.imageSmoothingEnabled = false;\n    if (sources.length === 0) return context.canvas;\n    context.scale(pixelRatio, pixelRatio);\n    function pixelRound(value) {\n        return Math.round(value * pixelRatio) / pixelRatio;\n    }\n    context.globalCompositeOperation = 'lighter';\n    const sourceDataExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n    sources.forEach(function(src, i, arr) {\n        (0, $6da4c8ed3074c92b$export$8b58be045bf06082)(sourceDataExtent, src.extent);\n    });\n    let stitchContext;\n    const stitchScale = pixelRatio / sourceResolution;\n    // Round up Float32 scale values to prevent interpolation in Firefox.\n    const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\n    if (!drawSingle || sources.length !== 1 || gutter !== 0) {\n        stitchContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(Math.round((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceDataExtent) * stitchScale), Math.round((0, $6da4c8ed3074c92b$export$c08559766941f856)(sourceDataExtent) * stitchScale), $2b0a118af78fb031$export$a166f0857c555517);\n        if (!interpolate) stitchContext.imageSmoothingEnabled = false;\n        if (sourceExtent && clipExtent) {\n            const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\n            const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\n            const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceExtent) * stitchScale;\n            const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(sourceExtent) * stitchScale;\n            stitchContext.rect(xPos, yPos, width, height);\n            stitchContext.clip();\n        }\n        sources.forEach(function(src, i, arr) {\n            // This test should never fail -- but it does. Need to find a fix the upstream condition\n            if (src.image.width > 0 && src.image.height > 0) {\n                if (src.clipExtent) {\n                    stitchContext.save();\n                    const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\n                    const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\n                    const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(src.clipExtent) * stitchScale;\n                    const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(src.clipExtent) * stitchScale;\n                    stitchContext.rect(interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? width : Math.round(xPos + width) - Math.round(xPos), interpolate ? height : Math.round(yPos + height) - Math.round(yPos));\n                    stitchContext.clip();\n                }\n                const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\n                const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\n                const srcWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(src.extent) * stitchScale;\n                const srcHeight = (0, $6da4c8ed3074c92b$export$c08559766941f856)(src.extent) * stitchScale;\n                stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? srcWidth : Math.round(xPos + srcWidth) - Math.round(xPos), interpolate ? srcHeight : Math.round(yPos + srcHeight) - Math.round(yPos));\n                if (src.clipExtent) stitchContext.restore();\n            }\n        });\n    }\n    const targetTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(targetExtent);\n    triangulation.getTriangles().forEach(function(triangle, i, arr) {\n        /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */ const source = triangle.source;\n        const target = triangle.target;\n        let x0 = source[0][0], y0 = source[0][1];\n        let x1 = source[1][0], y1 = source[1][1];\n        let x2 = source[2][0], y2 = source[2][1];\n        // Make sure that everything is on pixel boundaries\n        const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n        const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n        const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n        const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n        const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n        const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);\n        // Shift all the source points to improve numerical stability\n        // of all the subsequent calculations. The [x0, y0] is used here.\n        // This is also used to simplify the linear system.\n        const sourceNumericalShiftX = x0;\n        const sourceNumericalShiftY = y0;\n        x0 = 0;\n        y0 = 0;\n        x1 -= sourceNumericalShiftX;\n        y1 -= sourceNumericalShiftY;\n        x2 -= sourceNumericalShiftX;\n        y2 -= sourceNumericalShiftY;\n        const augmentedMatrix = [\n            [\n                x1,\n                y1,\n                0,\n                0,\n                u1 - u0\n            ],\n            [\n                x2,\n                y2,\n                0,\n                0,\n                u2 - u0\n            ],\n            [\n                0,\n                0,\n                x1,\n                y1,\n                v1 - v0\n            ],\n            [\n                0,\n                0,\n                x2,\n                y2,\n                v2 - v0\n            ]\n        ];\n        const affineCoefs = (0, $6b000a049d919fe5$export$8240f01c446270e6)(augmentedMatrix);\n        if (!affineCoefs) return;\n        context.save();\n        context.beginPath();\n        if ($2b0a118af78fb031$var$isBrokenDiagonalRendering() || !interpolate) {\n            // Make sure that all lines are horizontal or vertical\n            context.moveTo(u1, v1);\n            // This is the diagonal line. Do it in 4 steps\n            const steps = 4;\n            const ud = u0 - u1;\n            const vd = v0 - v1;\n            for(let step = 0; step < steps; step++){\n                // Go horizontally\n                context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1)));\n                // Go vertically\n                if (step != steps - 1) context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n            }\n            // We are almost at u0r, v0r\n            context.lineTo(u2, v2);\n        } else {\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n        }\n        context.clip();\n        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n        let image;\n        if (stitchContext) {\n            image = stitchContext.canvas;\n            context.scale(inverseScale, -inverseScale);\n        } else {\n            const source = sources[0];\n            const extent = source.extent;\n            image = source.image;\n            context.scale((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / image.width, -(0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / image.height);\n        }\n        context.drawImage(image, 0, 0);\n        context.restore();\n    });\n    if (stitchContext) {\n        (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(stitchContext);\n        $2b0a118af78fb031$export$a166f0857c555517.push(stitchContext.canvas);\n    }\n    if (renderEdges) {\n        context.save();\n        context.globalCompositeOperation = 'source-over';\n        context.strokeStyle = 'black';\n        context.lineWidth = 1;\n        triangulation.getTriangles().forEach(function(triangle, i, arr) {\n            const target = triangle.target;\n            const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n            const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n            const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n            const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n            const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n            const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n            context.beginPath();\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n            context.closePath();\n            context.stroke();\n        });\n        context.restore();\n    }\n    return context.canvas;\n}\n\n\n\n\n\n\n/**\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\n */ /**\n * @typedef {Object} TileOffset\n * @property {import(\"../ImageTile.js\").default} tile Tile.\n * @property {number} offset Offset.\n */ /**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */ class $398e350e33050c07$var$ReprojTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */ constructor(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, errorThreshold, renderEdges, options){\n        super(tileCoord, (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE, options);\n        /**\n     * @private\n     * @type {boolean}\n     */ this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = pixelRatio;\n        /**\n     * @private\n     * @type {number}\n     */ this.gutter_ = gutter;\n        /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */ this.canvas_ = null;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.sourceTileGrid_ = sourceTileGrid;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.targetTileGrid_ = targetTileGrid;\n        /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */ this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n        /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */ this.sourceTiles_ = [];\n        /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */ this.sourcesListenerKeys_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.sourceZ_ = 0;\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.clipExtent_ = sourceProj.canWrapX() ? sourceProj.getExtent() : undefined;\n        const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n        const maxTargetExtent = this.targetTileGrid_.getExtent();\n        let maxSourceExtent = this.sourceTileGrid_.getExtent();\n        const limitedTargetExtent = maxTargetExtent ? (0, $6da4c8ed3074c92b$export$72209efa88586d42)(targetExtent, maxTargetExtent) : targetExtent;\n        if ((0, $6da4c8ed3074c92b$export$520c40045967cb15)(limitedTargetExtent) === 0) {\n            // Tile is completely outside range -> EMPTY\n            // TODO: is it actually correct that the source even creates the tile ?\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        const sourceProjExtent = sourceProj.getExtent();\n        if (sourceProjExtent) {\n            if (!maxSourceExtent) maxSourceExtent = sourceProjExtent;\n            else maxSourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(maxSourceExtent, sourceProjExtent);\n        }\n        const targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);\n        const sourceResolution = (0, $2b0a118af78fb031$export$16d356211d01f1cc)(sourceProj, targetProj, limitedTargetExtent, targetResolution);\n        if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n            // invalid sourceResolution -> EMPTY\n            // probably edges of the projections when no extent is defined\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        const errorThresholdInPixels = errorThreshold !== undefined ? errorThreshold : (0, $8ea51dd7be3ba5e2$export$3ecb4bcfa5aae855);\n        /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */ this.triangulation_ = new (0, $6be53f6edfbf1854$export$2e2bcd8739ae039)(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n        if (this.triangulation_.getTriangles().length === 0) {\n            // no valid triangles -> EMPTY\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n        let sourceExtent = this.triangulation_.calculateSourceExtent();\n        if (maxSourceExtent) {\n            if (sourceProj.canWrapX()) {\n                sourceExtent[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n                sourceExtent[3] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n            } else sourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(sourceExtent, maxSourceExtent);\n        }\n        if (!(0, $6da4c8ed3074c92b$export$520c40045967cb15)(sourceExtent)) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        else {\n            let worldWidth = 0;\n            let worldsAway = 0;\n            if (sourceProj.canWrapX()) {\n                worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceProjExtent);\n                worldsAway = Math.floor((sourceExtent[0] - sourceProjExtent[0]) / worldWidth);\n            }\n            const sourceExtents = (0, $6da4c8ed3074c92b$export$9031237f01de0947)(sourceExtent.slice(), sourceProj, true);\n            sourceExtents.forEach((extent)=>{\n                const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(extent, this.sourceZ_);\n                for(let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++)for(let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++){\n                    const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n                    if (tile) {\n                        const offset = worldsAway * worldWidth;\n                        this.sourceTiles_.push({\n                            tile: tile,\n                            offset: offset\n                        });\n                    }\n                }\n                ++worldsAway;\n            });\n            if (this.sourceTiles_.length === 0) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        }\n    }\n    /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */ getImage() {\n        return this.canvas_;\n    }\n    /**\n   * @private\n   */ reproject_() {\n        const sources = [];\n        this.sourceTiles_.forEach((source)=>{\n            const tile = source.tile;\n            if (tile && tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n                extent[0] += source.offset;\n                extent[2] += source.offset;\n                const clipExtent = this.clipExtent_?.slice();\n                if (clipExtent) {\n                    clipExtent[0] += source.offset;\n                    clipExtent[2] += source.offset;\n                }\n                sources.push({\n                    extent: extent,\n                    clipExtent: clipExtent,\n                    image: tile.getImage()\n                });\n            }\n        });\n        this.sourceTiles_.length = 0;\n        if (sources.length === 0) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n        else {\n            const z = this.wrappedTileCoord_[0];\n            const size = this.targetTileGrid_.getTileSize(z);\n            const width = typeof size === 'number' ? size : size[0];\n            const height = typeof size === 'number' ? size : size[1];\n            const targetResolution = this.targetTileGrid_.getResolution(z);\n            const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n            const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n            this.canvas_ = (0, $2b0a118af78fb031$export$b3890eb0ae9dca99)(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        }\n        this.changed();\n    }\n    /**\n   * Load not yet loaded URI.\n   * @override\n   */ load() {\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n            this.changed();\n            let leftToLoad = 0;\n            this.sourcesListenerKeys_ = [];\n            this.sourceTiles_.forEach(({ tile: tile })=>{\n                const state = tile.getState();\n                if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) {\n                    leftToLoad++;\n                    const sourceListenKey = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(tile, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, (e)=>{\n                        const state = tile.getState();\n                        if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) {\n                            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(sourceListenKey);\n                            leftToLoad--;\n                            if (leftToLoad === 0) {\n                                this.unlistenSources_();\n                                this.reproject_();\n                            }\n                        }\n                    });\n                    this.sourcesListenerKeys_.push(sourceListenKey);\n                }\n            });\n            if (leftToLoad === 0) setTimeout(this.reproject_.bind(this), 0);\n            else this.sourceTiles_.forEach(function({ tile: tile }, i, arr) {\n                const state = tile.getState();\n                if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) tile.load();\n            });\n        }\n    }\n    /**\n   * @private\n   */ unlistenSources_() {\n        this.sourcesListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.sourcesListenerKeys_ = null;\n    }\n    /**\n   * Remove from the cache due to expiry\n   * @override\n   */ release() {\n        if (this.canvas_) {\n            (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(this.canvas_.getContext('2d'));\n            (0, $2b0a118af78fb031$export$a166f0857c555517).push(this.canvas_);\n            this.canvas_ = null;\n        }\n        super.release();\n    }\n}\nvar $398e350e33050c07$export$2e2bcd8739ae039 = $398e350e33050c07$var$ReprojTile;\n\n\n\n/**\n * @module ol/source/UrlTile\n */ /**\n * @module ol/source/TileEventType\n */ /**\n * @enum {string}\n */ var $7e3d7a0f8b272861$export$2e2bcd8739ae039 /**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */  = {\n    /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */ TILELOADSTART: 'tileloadstart',\n    /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */ TILELOADEND: 'tileloadend',\n    /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */ TILELOADERROR: 'tileloaderror'\n};\n\n\n/**\n * @module ol/source/Tile\n */ \n/**\n * @module ol/source/Source\n */ /**\n * @module ol/Object\n */ \n/**\n * @module ol/ObjectEventType\n */ /**\n * @enum {string}\n */ var $e881b5dca21eb5d4$export$2e2bcd8739ae039 /**\n * @typedef {'propertychange'} Types\n */  = {\n    /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */ PROPERTYCHANGE: 'propertychange'\n};\n\n\n/**\n * @module ol/Observable\n */ \n\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */ /***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */ /**\n * @typedef {'change'|'error'} EventTypes\n */ /***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */ class $1f093ab5083c8a1f$var$Observable extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        this.on = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ this.onInternal;\n        this.once = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ this.onceInternal;\n        this.un = /** @type {ObservableOnSignature<void>} */ this.unInternal;\n        /**\n     * @private\n     * @type {number}\n     */ this.revision_ = 0;\n    }\n    /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */ changed() {\n        ++this.revision_;\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */ getRevision() {\n        return this.revision_;\n    }\n    /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */ onInternal(type, listener) {\n        if (Array.isArray(type)) {\n            const len = type.length;\n            const keys = new Array(len);\n            for(let i = 0; i < len; ++i)keys[i] = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, type[i], listener);\n            return keys;\n        }\n        return (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, /** @type {string} */ type, listener);\n    }\n    /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */ onceInternal(type, listener) {\n        let key;\n        if (Array.isArray(type)) {\n            const len = type.length;\n            key = new Array(len);\n            for(let i = 0; i < len; ++i)key[i] = (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(this, type[i], listener);\n        } else key = (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(this, /** @type {string} */ type, listener);\n        /** @type {Object} */ listener.ol_key = key;\n        return key;\n    }\n    /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */ unInternal(type, listener) {\n        const key = /** @type {Object} */ listener.ol_key;\n        if (key) $1f093ab5083c8a1f$export$b7ef3f8527533384(key);\n        else if (Array.isArray(type)) for(let i = 0, ii = type.length; i < ii; ++i)this.removeEventListener(type[i], listener);\n        else this.removeEventListener(type, listener);\n    }\n}\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */ $1f093ab5083c8a1f$var$Observable.prototype.on;\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */ $1f093ab5083c8a1f$var$Observable.prototype.once;\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */ $1f093ab5083c8a1f$var$Observable.prototype.un;\nfunction $1f093ab5083c8a1f$export$b7ef3f8527533384(key) {\n    if (Array.isArray(key)) for(let i = 0, ii = key.length; i < ii; ++i)(0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(key[i]);\n    else (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(/** @type {import(\"./events.js\").EventsKey} */ key);\n}\nvar $1f093ab5083c8a1f$export$2e2bcd8739ae039 = $1f093ab5083c8a1f$var$Observable;\n\n\n\n\nclass $b68b3d6e32e3074a$export$cf395d7c4a2d5a17 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */ constructor(type, key, oldValue){\n        super(type);\n        /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */ this.key = key;\n        /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */ this.oldValue = oldValue;\n    }\n}\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */ class $b68b3d6e32e3074a$var$BaseObject extends (0, $1f093ab5083c8a1f$export$2e2bcd8739ae039) {\n    /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */ constructor(values){\n        super();\n        /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {ObjectOnSignature<void>}\n     */ this.un;\n        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n        // the same as the order in which they were created.  This also helps to\n        // ensure that object properties are always added in the same order, which\n        // helps many JavaScript engines generate faster code.\n        (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        /**\n     * @private\n     * @type {Object<string, *>|null}\n     */ this.values_ = null;\n        if (values !== undefined) this.setProperties(values);\n    }\n    /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */ get(key) {\n        let value;\n        if (this.values_ && this.values_.hasOwnProperty(key)) value = this.values_[key];\n        return value;\n    }\n    /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */ getKeys() {\n        return this.values_ && Object.keys(this.values_) || [];\n    }\n    /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */ getProperties() {\n        return this.values_ && Object.assign({}, this.values_) || {};\n    }\n    /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>?} Object.\n   */ getPropertiesInternal() {\n        return this.values_;\n    }\n    /**\n   * @return {boolean} The object has properties.\n   */ hasProperties() {\n        return !!this.values_;\n    }\n    /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */ notify(key, oldValue) {\n        let eventType;\n        eventType = `change:${key}`;\n        if (this.hasListener(eventType)) this.dispatchEvent(new $b68b3d6e32e3074a$export$cf395d7c4a2d5a17(eventType, key, oldValue));\n        eventType = (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE;\n        if (this.hasListener(eventType)) this.dispatchEvent(new $b68b3d6e32e3074a$export$cf395d7c4a2d5a17(eventType, key, oldValue));\n    }\n    /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */ addChangeListener(key, listener) {\n        this.addEventListener(`change:${key}`, listener);\n    }\n    /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */ removeChangeListener(key, listener) {\n        this.removeEventListener(`change:${key}`, listener);\n    }\n    /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */ set(key, value, silent) {\n        const values = this.values_ || (this.values_ = {});\n        if (silent) values[key] = value;\n        else {\n            const oldValue = values[key];\n            values[key] = value;\n            if (oldValue !== value) this.notify(key, oldValue);\n        }\n    }\n    /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */ setProperties(values, silent) {\n        for(const key in values)this.set(key, values[key], silent);\n    }\n    /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */ applyProperties(source) {\n        if (!source.values_) return;\n        Object.assign(this.values_ || (this.values_ = {}), source.values_);\n    }\n    /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */ unset(key, silent) {\n        if (this.values_ && key in this.values_) {\n            const oldValue = this.values_[key];\n            delete this.values_[key];\n            if ((0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.values_)) this.values_ = null;\n            if (!silent) this.notify(key, oldValue);\n        }\n    }\n}\nvar $b68b3d6e32e3074a$export$2e2bcd8739ae039 = $b68b3d6e32e3074a$var$BaseObject;\n\n\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */ /**\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\n */ /**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */ /**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */ class $ed6dc99f268f3882$var$Source extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Source options.\n   */ constructor(options){\n        super();\n        /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */ this.projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.projection);\n        /**\n     * @private\n     * @type {?Attribution}\n     */ this.attributions_ = $ed6dc99f268f3882$var$adaptAttributions(options.attributions);\n        /**\n     * @private\n     * @type {boolean}\n     */ this.attributionsCollapsible_ = options.attributionsCollapsible ?? true;\n        /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */ this.loading = false;\n        /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */ this.state_ = options.state !== undefined ? options.state : 'ready';\n        /**\n     * @private\n     * @type {boolean}\n     */ this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.interpolate_ = !!options.interpolate;\n        /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */ this.viewResolver = null;\n        /**\n     * @protected\n     * @type {function(Error):void}\n     */ this.viewRejector = null;\n        const self = this;\n        /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */ this.viewPromise_ = new Promise(function(resolve, reject) {\n            self.viewResolver = resolve;\n            self.viewRejector = reject;\n        });\n    }\n    /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */ getAttributions() {\n        return this.attributions_;\n    }\n    /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */ getAttributionsCollapsible() {\n        return this.attributionsCollapsible_;\n    }\n    /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */ getProjection() {\n        return this.projection;\n    }\n    /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */ getResolutions(projection) {\n        return null;\n    }\n    /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */ getView() {\n        return this.viewPromise_;\n    }\n    /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */ getState() {\n        return this.state_;\n    }\n    /**\n   * @return {boolean|undefined} Wrap X.\n   */ getWrapX() {\n        return this.wrapX_;\n    }\n    /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */ getInterpolate() {\n        return this.interpolate_;\n    }\n    /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */ refresh() {\n        this.changed();\n    }\n    /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */ setAttributions(attributions) {\n        this.attributions_ = $ed6dc99f268f3882$var$adaptAttributions(attributions);\n        this.changed();\n    }\n    /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */ setState(state) {\n        this.state_ = state;\n        this.changed();\n    }\n}\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */ function $ed6dc99f268f3882$var$adaptAttributions(attributionLike) {\n    if (!attributionLike) return null;\n    if (typeof attributionLike === 'function') return attributionLike;\n    if (!Array.isArray(attributionLike)) attributionLike = [\n        attributionLike\n    ];\n    return (frameState)=>attributionLike;\n}\nvar $ed6dc99f268f3882$export$2e2bcd8739ae039 = $ed6dc99f268f3882$var$Source;\n\n\n\n/**\n * @module ol/tilegrid\n */ /**\n * @module ol/tilegrid/TileGrid\n */ /**\n * @module ol/TileRange\n */ /**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */ class $550e524b0d1b61d4$var$TileRange {\n    /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */ constructor(minX, maxX, minY, maxY){\n        /**\n     * @type {number}\n     */ this.minX = minX;\n        /**\n     * @type {number}\n     */ this.maxX = maxX;\n        /**\n     * @type {number}\n     */ this.minY = minY;\n        /**\n     * @type {number}\n     */ this.maxY = maxY;\n    }\n    /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */ contains(tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */ containsTileRange(tileRange) {\n        return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n    }\n    /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */ containsXY(x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */ equals(tileRange) {\n        return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   */ extend(tileRange) {\n        if (tileRange.minX < this.minX) this.minX = tileRange.minX;\n        if (tileRange.maxX > this.maxX) this.maxX = tileRange.maxX;\n        if (tileRange.minY < this.minY) this.minY = tileRange.minY;\n        if (tileRange.maxY > this.maxY) this.maxY = tileRange.maxY;\n    }\n    /**\n   * @return {number} Height.\n   */ getHeight() {\n        return this.maxY - this.minY + 1;\n    }\n    /**\n   * @return {import(\"./size.js\").Size} Size.\n   */ getSize() {\n        return [\n            this.getWidth(),\n            this.getHeight()\n        ];\n    }\n    /**\n   * @return {number} Width.\n   */ getWidth() {\n        return this.maxX - this.minX + 1;\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */ intersects(tileRange) {\n        return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n    }\n}\nfunction $550e524b0d1b61d4$export$958e3e1a02eac4b6(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    return new $550e524b0d1b61d4$var$TileRange(minX, maxX, minY, maxY);\n}\nvar $550e524b0d1b61d4$export$2e2bcd8739ae039 = $550e524b0d1b61d4$var$TileRange;\n\n\n/**\n * @module ol/tilegrid/common\n */ /**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */ const $57cd8651d88957a0$export$e98a216cdcc847dc = 42;\nconst $57cd8651d88957a0$export$6b8cb5cd370bd90c = 256;\n\n\n\n\n\n/**\n * @module ol/tilecoord\n */ /**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */ /**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */ function $bf2a04496fadabc6$export$958e3e1a02eac4b6(z, x, y, tileCoord) {\n    if (tileCoord !== undefined) {\n        tileCoord[0] = z;\n        tileCoord[1] = x;\n        tileCoord[2] = y;\n        return tileCoord;\n    }\n    return [\n        z,\n        x,\n        y\n    ];\n}\nfunction $bf2a04496fadabc6$export$92d0df0f1d25c63c(z, x, y) {\n    return z + '/' + x + '/' + y;\n}\nfunction $bf2a04496fadabc6$export$a47fb462a08de82f(tileCoord) {\n    return $bf2a04496fadabc6$export$92d0df0f1d25c63c(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\nfunction $bf2a04496fadabc6$export$7f760414a8e3d2b5(tileKey) {\n    const [z, x, y] = tileKey.substring(tileKey.lastIndexOf('/') + 1, tileKey.length).split(',').map(Number);\n    return $bf2a04496fadabc6$export$92d0df0f1d25c63c(z, x, y);\n}\nfunction $bf2a04496fadabc6$export$a807b7874eb66454(key) {\n    return key.split('/').map(Number);\n}\nfunction $bf2a04496fadabc6$export$d6af199866bfb566(tileCoord) {\n    return $bf2a04496fadabc6$export$731f79419750ccf7(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\nfunction $bf2a04496fadabc6$export$731f79419750ccf7(z, x, y) {\n    return (x << z) + y;\n}\nfunction $bf2a04496fadabc6$export$60bedf8e3e3c3dbe(tileCoord, tileGrid) {\n    const z = tileCoord[0];\n    const x = tileCoord[1];\n    const y = tileCoord[2];\n    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) return false;\n    const tileRange = tileGrid.getFullTileRange(z);\n    if (!tileRange) return true;\n    return tileRange.containsXY(x, y);\n}\n\n\n/**\n * @module ol/geom/flat/intersectsextent\n */ \n/**\n * @module ol/geom/flat/segments\n */ /**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */ function $3e64078bffae1cbd$export$4b80e395e36b5a56(flatCoordinates, offset, end, stride, callback) {\n    let ret;\n    offset += stride;\n    for(; offset < end; offset += stride){\n        ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));\n        if (ret) return ret;\n    }\n    return false;\n}\n\n\n/**\n * @module ol/geom/flat/contains\n */ \nfunction $239aa88e7a573859$export$cedabedc7ac0e138(flatCoordinates, offset, end, stride, extent) {\n    const outside = (0, $6da4c8ed3074c92b$export$f9ed8a3d123a08e2)(extent, /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */ function(coordinate) {\n        return !$239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);\n    });\n    return !outside;\n}\nfunction $239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, x, y) {\n    // https://geomalgorithms.com/a03-_inclusion.html\n    // Copyright 2000 softSurfer, 2012 Dan Sunday\n    // This code may be freely used and modified for any purpose\n    // providing that this copyright notice is included with it.\n    // SoftSurfer makes no warranty for this code, and cannot be held\n    // liable for any real or imagined damage resulting from its use.\n    // Users of this code must verify correctness for their application.\n    let wn = 0;\n    let x1 = flatCoordinates[end - stride];\n    let y1 = flatCoordinates[end - stride + 1];\n    for(; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        if (y1 <= y) {\n            if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) wn++;\n        } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) wn--;\n        x1 = x2;\n        y1 = y2;\n    }\n    return wn !== 0;\n}\nfunction $239aa88e7a573859$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y) {\n    if (ends.length === 0) return false;\n    if (!$239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, ends[0], stride, x, y)) return false;\n    for(let i = 1, ii = ends.length; i < ii; ++i){\n        if ($239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) return false;\n    }\n    return true;\n}\nfunction $239aa88e7a573859$export$c760d9d16cf92043(flatCoordinates, offset, endss, stride, x, y) {\n    if (endss.length === 0) return false;\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if ($239aa88e7a573859$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y)) return true;\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n\n\nfunction $acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent) {\n    const coordinatesExtent = (0, $6da4c8ed3074c92b$export$30570204156ffd18)((0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)(), flatCoordinates, offset, end, stride);\n    if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(extent, coordinatesExtent)) return false;\n    if ((0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(extent, coordinatesExtent)) return true;\n    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) return true;\n    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) return true;\n    return (0, $3e64078bffae1cbd$export$4b80e395e36b5a56)(flatCoordinates, offset, end, stride, /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */ function(point1, point2) {\n        return (0, $6da4c8ed3074c92b$export$a6a5a7a461419425)(extent, point1, point2);\n    });\n}\nfunction $acee589e5b390c5c$export$fdb1d8e850bf7937(flatCoordinates, offset, ends, stride, extent) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        if ($acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, ends[i], stride, extent)) return true;\n        offset = ends[i];\n    }\n    return false;\n}\nfunction $acee589e5b390c5c$export$830a0dafbb2ef1c5(flatCoordinates, offset, end, stride, extent) {\n    if ($acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent)) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[1])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[3])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[1])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[3])) return true;\n    return false;\n}\nfunction $acee589e5b390c5c$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent) {\n    if (!$acee589e5b390c5c$export$830a0dafbb2ef1c5(flatCoordinates, offset, ends[0], stride, extent)) return false;\n    if (ends.length === 1) return true;\n    for(let i = 1, ii = ends.length; i < ii; ++i)if ((0, $239aa88e7a573859$export$cedabedc7ac0e138)(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        if (!$acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, ends[i - 1], ends[i], stride, extent)) return false;\n    }\n    return true;\n}\nfunction $acee589e5b390c5c$export$77b72fa3792f5bf0(flatCoordinates, offset, endss, stride, extent) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if ($acee589e5b390c5c$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent)) return true;\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n\n\n\n/**\n * @module ol/size\n */ /**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */ /**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */ function $cc435a5409103773$export$ab1029bcae9ddb4a(size, num, dest) {\n    if (dest === undefined) dest = [\n        0,\n        0\n    ];\n    dest[0] = size[0] + 2 * num;\n    dest[1] = size[1] + 2 * num;\n    return dest;\n}\nfunction $cc435a5409103773$export$622c471beb1693c7(size) {\n    return size[0] > 0 && size[1] > 0;\n}\nfunction $cc435a5409103773$export$dcdf75081b88279d(size, ratio, dest) {\n    if (dest === undefined) dest = [\n        0,\n        0\n    ];\n    dest[0] = size[0] * ratio + 0.5 | 0;\n    dest[1] = size[1] * ratio + 0.5 | 0;\n    return dest;\n}\nfunction $cc435a5409103773$export$a71a825ff42fb8e1(size, dest) {\n    if (Array.isArray(size)) return size;\n    if (dest === undefined) dest = [\n        size,\n        size\n    ];\n    else {\n        dest[0] = size;\n        dest[1] = size;\n    }\n    return dest;\n}\n\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */ const $bb602a307ef98bb5$var$tmpTileCoord = [\n    0,\n    0,\n    0\n];\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */ const $bb602a307ef98bb5$var$DECIMALS = 5;\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */ /**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */ class $bb602a307ef98bb5$var$TileGrid {\n    /**\n   * @param {Options} options Tile grid options.\n   */ constructor(options){\n        /**\n     * @protected\n     * @type {number}\n     */ this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n        /**\n     * @private\n     * @type {!Array<number>}\n     */ this.resolutions_ = options.resolutions;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)((0, $b998d41b678ed5d1$export$efa610630f9e181)(this.resolutions_, /**\n         * @param {number} a First resolution\n         * @param {number} b Second resolution\n         * @return {number} Comparison result\n         */ (a, b)=>b - a, true), '`resolutions` must be sorted in descending order');\n        // check if we've got a consistent zoom factor and origin\n        let zoomFactor;\n        if (!options.origins) for(let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i){\n            if (!zoomFactor) zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n            else if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n                zoomFactor = undefined;\n                break;\n            }\n        }\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.zoomFactor_ = zoomFactor;\n        /**\n     * @protected\n     * @type {number}\n     */ this.maxZoom = this.resolutions_.length - 1;\n        /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */ this.origin_ = options.origin !== undefined ? options.origin : null;\n        /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */ this.origins_ = null;\n        if (options.origins !== undefined) {\n            this.origins_ = options.origins;\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.origins_.length == this.resolutions_.length, 'Number of `origins` and `resolutions` must be equal');\n        }\n        const extent = options.extent;\n        if (extent !== undefined && !this.origin_ && !this.origins_) this.origin_ = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(extent);\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 'Either `origin` or `origins` must be configured, never both');\n        /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */ this.tileSizes_ = null;\n        if (options.tileSizes !== undefined) {\n            this.tileSizes_ = options.tileSizes;\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.tileSizes_.length == this.resolutions_.length, 'Number of `tileSizes` and `resolutions` must be equal');\n        }\n        /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */ this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c) : null;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 'Either `tileSize` or `tileSizes` must be configured, never both');\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.extent_ = extent !== undefined ? extent : null;\n        /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */ this.fullTileRanges_ = null;\n        /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */ this.tmpSize_ = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.tmpExtent_ = [\n            0,\n            0,\n            0,\n            0\n        ];\n        if (options.sizes !== undefined) this.fullTileRanges_ = options.sizes.map((size, z)=>{\n            const tileRange = new (0, $550e524b0d1b61d4$export$2e2bcd8739ae039)(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n            if (extent) {\n                const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n                tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n                tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n                tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n                tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n            }\n            return tileRange;\n        });\n        else if (extent) this.calculateTileRanges_(extent);\n    }\n    /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */ forEachTileCoord(extent, zoom, callback) {\n        const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n        for(let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i)for(let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j)callback([\n            zoom,\n            i,\n            j\n        ]);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */ forEachTileCoordParentTileRange(tileCoord, callback, tempTileRange, tempExtent) {\n        let tileRange, x, y;\n        let tileCoordExtent = null;\n        let z = tileCoord[0] - 1;\n        if (this.zoomFactor_ === 2) {\n            x = tileCoord[1];\n            y = tileCoord[2];\n        } else tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n        while(z >= this.minZoom){\n            if (x !== undefined && y !== undefined) {\n                x = Math.floor(x / 2);\n                y = Math.floor(y / 2);\n                tileRange = (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(x, x, y, y, tempTileRange);\n            } else tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n            if (callback(z, tileRange)) return true;\n            --z;\n        }\n        return false;\n    }\n    /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getExtent() {\n        return this.extent_;\n    }\n    /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */ getMaxZoom() {\n        return this.maxZoom;\n    }\n    /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */ getMinZoom() {\n        return this.minZoom;\n    }\n    /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */ getOrigin(z) {\n        if (this.origin_) return this.origin_;\n        return this.origins_[z];\n    }\n    /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */ getResolution(z) {\n        return this.resolutions_[z];\n    }\n    /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */ getResolutions() {\n        return this.resolutions_;\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */ getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n        if (tileCoord[0] < this.maxZoom) {\n            if (this.zoomFactor_ === 2) {\n                const minX = tileCoord[1] * 2;\n                const minY = tileCoord[2] * 2;\n                return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, minX + 1, minY, minY + 1, tempTileRange);\n            }\n            const tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent || this.tmpExtent_);\n            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, tempTileRange);\n        }\n        return null;\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */ getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n        if (z > this.maxZoom || z < this.minZoom) return null;\n        const tileCoordZ = tileCoord[0];\n        const tileCoordX = tileCoord[1];\n        const tileCoordY = tileCoord[2];\n        if (z === tileCoordZ) return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(tileCoordX, tileCoordY, tileCoordX, tileCoordY, tempTileRange);\n        if (this.zoomFactor_) {\n            const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n            const minX = Math.floor(tileCoordX * factor);\n            const minY = Math.floor(tileCoordY * factor);\n            if (z < tileCoordZ) return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, minX, minY, minY, tempTileRange);\n            const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n            const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n            return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);\n        }\n        const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n        return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n    }\n    /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */ getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, $bb602a307ef98bb5$var$tmpTileCoord);\n        const minX = $bb602a307ef98bb5$var$tmpTileCoord[1];\n        const minY = $bb602a307ef98bb5$var$tmpTileCoord[2];\n        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, $bb602a307ef98bb5$var$tmpTileCoord);\n        const maxX = $bb602a307ef98bb5$var$tmpTileCoord[1];\n        const maxY = $bb602a307ef98bb5$var$tmpTileCoord[2];\n        return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */ getTileCoordCenter(tileCoord) {\n        const origin = this.getOrigin(tileCoord[0]);\n        const resolution = this.getResolution(tileCoord[0]);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        return [\n            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution\n        ];\n    }\n    /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getTileCoordExtent(tileCoord, tempExtent) {\n        const origin = this.getOrigin(tileCoord[0]);\n        const resolution = this.getResolution(tileCoord[0]);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n        const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n        const maxX = minX + tileSize[0] * resolution;\n        const maxY = minY + tileSize[1] * resolution;\n        return (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(minX, minY, maxX, maxY, tempExtent);\n    }\n    /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */ getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n    }\n    /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */ getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n        const z = this.getZForResolution(resolution);\n        const scale = resolution / this.getResolution(z);\n        const origin = this.getOrigin(z);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);\n        let tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n        let tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS) - 1;\n            tileCoordY = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS) - 1;\n        } else {\n            tileCoordX = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS);\n            tileCoordY = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS);\n        }\n        return (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */ getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n        const origin = this.getOrigin(z);\n        const resolution = this.getResolution(z);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);\n        let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n        let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS) - 1;\n            tileCoordY = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS) - 1;\n        } else {\n            tileCoordX = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS);\n            tileCoordY = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS);\n        }\n        return (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */ getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */ getTileCoordResolution(tileCoord) {\n        return this.resolutions_[tileCoord[0]];\n    }\n    /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */ getTileSize(z) {\n        if (this.tileSize_) return this.tileSize_;\n        return this.tileSizes_[z];\n    }\n    /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\n   */ getFullTileRange(z) {\n        if (!this.fullTileRanges_) return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n        return this.fullTileRanges_[z];\n    }\n    /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */ getZForResolution(resolution, opt_direction) {\n        const z = (0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(this.resolutions_, resolution, opt_direction || 0);\n        return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(z, this.minZoom, this.maxZoom);\n    }\n    /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */ tileCoordIntersectsViewport(tileCoord, viewport) {\n        return (0, $acee589e5b390c5c$export$830a0dafbb2ef1c5)(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));\n    }\n    /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */ calculateTileRanges_(extent) {\n        const length = this.resolutions_.length;\n        const fullTileRanges = new Array(length);\n        for(let z = this.minZoom; z < length; ++z)fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n        this.fullTileRanges_ = fullTileRanges;\n    }\n}\nvar $bb602a307ef98bb5$export$2e2bcd8739ae039 = $bb602a307ef98bb5$var$TileGrid;\n\n\n\n\n\n\n\nfunction $5779655d81caea04$export$1f4812384df8a9c5(projection) {\n    let tileGrid = projection.getDefaultTileGrid();\n    if (!tileGrid) {\n        tileGrid = $5779655d81caea04$export$a251b12f5601c16f(projection);\n        projection.setDefaultTileGrid(tileGrid);\n    }\n    return tileGrid;\n}\nfunction $5779655d81caea04$export$39a9ce3624977b84(tileGrid, tileCoord, projection) {\n    const z = tileCoord[0];\n    const center = tileGrid.getTileCoordCenter(tileCoord);\n    const projectionExtent = $5779655d81caea04$export$7b5b6ef8fd55fac4(projection);\n    if (!(0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(projectionExtent, center)) {\n        const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n        const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n        center[0] += worldWidth * worldsAway;\n        return tileGrid.getTileCoordForCoordAndZ(center, z);\n    }\n    return tileCoord;\n}\nfunction $5779655d81caea04$export$ce88871416242df8(extent, maxZoom, tileSize, corner) {\n    corner = corner !== undefined ? corner : 'top-left';\n    const resolutions = $5779655d81caea04$var$resolutionsFromExtent(extent, maxZoom, tileSize);\n    return new (0, $bb602a307ef98bb5$export$2e2bcd8739ae039)({\n        extent: extent,\n        origin: (0, $6da4c8ed3074c92b$export$a1cfd206661d0801)(extent, corner),\n        resolutions: resolutions,\n        tileSize: tileSize\n    });\n}\nfunction $5779655d81caea04$export$38500bbeccc864ff(options) {\n    const xyzOptions = options || {};\n    const extent = xyzOptions.extent || (0, $9c4744460e43e41b$export$3988ae62b71be9a3)('EPSG:3857').getExtent();\n    const gridOptions = {\n        extent: extent,\n        minZoom: xyzOptions.minZoom,\n        tileSize: xyzOptions.tileSize,\n        resolutions: $5779655d81caea04$var$resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n    };\n    return new (0, $bb602a307ef98bb5$export$2e2bcd8739ae039)(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */ function $5779655d81caea04$var$resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n    maxZoom = maxZoom !== undefined ? maxZoom : (0, $57cd8651d88957a0$export$e98a216cdcc847dc);\n    tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileSize !== undefined ? tileSize : (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c));\n    const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(extent);\n    const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent);\n    maxResolution = maxResolution > 0 ? maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n    const length = maxZoom + 1;\n    const resolutions = new Array(length);\n    for(let z = 0; z < length; ++z)resolutions[z] = maxResolution / Math.pow(2, z);\n    return resolutions;\n}\nfunction $5779655d81caea04$export$a251b12f5601c16f(projection, maxZoom, tileSize, corner) {\n    const extent = $5779655d81caea04$export$7b5b6ef8fd55fac4(projection);\n    return $5779655d81caea04$export$ce88871416242df8(extent, maxZoom, tileSize, corner);\n}\nfunction $5779655d81caea04$export$7b5b6ef8fd55fac4(projection) {\n    projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection);\n    let extent = projection.getExtent();\n    if (!extent) {\n        const half = 180 * (0, $03edbd434a9e6608$export$1482081eec883108).degrees / projection.getMetersPerUnit();\n        extent = (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(-half, -half, half, half);\n    }\n    return extent;\n}\n\n\n\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */ /**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n *\n * @template {import(\"../Tile.js\").default} [TileType=import(\"../Tile.js\").default]\n * @abstract\n * @api\n */ class $988a11d09320f6a8$var$TileSource extends (0, $ed6dc99f268f3882$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options SourceTile source options.\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            projection: options.projection,\n            state: options.state,\n            wrapX: options.wrapX,\n            interpolate: options.interpolate\n        });\n        /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {TileSourceOnSignature<void>}\n     */ this.un;\n        /**\n     * @private\n     * @type {number}\n     */ this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n        /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     * @protected\n     */ this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n        const tileSize = [\n            256,\n            256\n        ];\n        if (this.tileGrid) (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n        /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */ this.tmpSize = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {string}\n     */ this.key_ = options.key || (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */ this.tileOptions = {\n            transition: options.transition,\n            interpolate: options.interpolate\n        };\n        /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */ this.zDirection = options.zDirection ? options.zDirection : 0;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */ getGutterForProjection(projection) {\n        return 0;\n    }\n    /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */ getKey() {\n        return this.key_;\n    }\n    /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */ setKey(key) {\n        if (this.key_ !== key) {\n            this.key_ = key;\n            this.changed();\n        }\n    }\n    /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */ getResolutions(projection) {\n        const tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;\n        if (!tileGrid) return null;\n        return tileGrid.getResolutions();\n    }\n    /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {TileType|null} Tile.\n   */ getTile(z, x, y, pixelRatio, projection) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */ getTileGrid() {\n        return this.tileGrid;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */ getTileGridForProjection(projection) {\n        if (!this.tileGrid) return (0, $5779655d81caea04$export$1f4812384df8a9c5)(projection);\n        return this.tileGrid;\n    }\n    /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */ getTilePixelRatio(pixelRatio) {\n        return this.tilePixelRatio_;\n    }\n    /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */ getTilePixelSize(z, pixelRatio, projection) {\n        const tileGrid = this.getTileGridForProjection(projection);\n        const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z), this.tmpSize);\n        if (tilePixelRatio == 1) return tileSize;\n        return (0, $cc435a5409103773$export$dcdf75081b88279d)(tileSize, tilePixelRatio, this.tmpSize);\n    }\n    /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */ getTileCoordForTileUrlFunction(tileCoord, projection) {\n        const gridProjection = projection !== undefined ? projection : this.getProjection();\n        const tileGrid = projection !== undefined ? this.getTileGridForProjection(gridProjection) : this.tileGrid || this.getTileGridForProjection(gridProjection);\n        if (this.getWrapX() && gridProjection.isGlobal()) tileCoord = (0, $5779655d81caea04$export$39a9ce3624977b84)(tileGrid, tileCoord, gridProjection);\n        return (0, $bf2a04496fadabc6$export$60bedf8e3e3c3dbe)(tileCoord, tileGrid) ? tileCoord : null;\n    }\n    /**\n   * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.\n   * @api\n   */ clear() {}\n    /**\n   * @override\n   */ refresh() {\n        this.clear();\n        super.refresh();\n    }\n}\nclass $988a11d09320f6a8$export$c571855c51e6c4b6 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */ constructor(type, tile){\n        super(type);\n        /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */ this.tile = tile;\n    }\n}\nvar $988a11d09320f6a8$export$2e2bcd8739ae039 = $988a11d09320f6a8$var$TileSource;\n\n\n\n/**\n * @module ol/tileurlfunction\n */ \n/**\n * @module ol/uri\n */ \n\nfunction $60db182c0252e220$export$c202e3cb8db99a95(uri, params) {\n    /** @type {Array<string>} */ const keyParams = [];\n    // Skip any null or undefined parameter values\n    Object.keys(params).forEach(function(k) {\n        if (params[k] !== null && params[k] !== undefined) keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    });\n    const qs = keyParams.join('&');\n    // remove any trailing ? or &\n    uri = uri.replace(/[?&]$/, '');\n    // append ? or & depending on whether uri has existing parameters\n    uri += uri.includes('?') ? '&' : '?';\n    return uri + qs;\n}\nconst $60db182c0252e220$var$zRegEx = /\\{z\\}/g;\nconst $60db182c0252e220$var$xRegEx = /\\{x\\}/g;\nconst $60db182c0252e220$var$yRegEx = /\\{y\\}/g;\nconst $60db182c0252e220$var$dashYRegEx = /\\{-y\\}/g;\nfunction $60db182c0252e220$export$df1e52f1b5b1c86f(template, z, x, y, maxY) {\n    return template.replace($60db182c0252e220$var$zRegEx, z.toString()).replace($60db182c0252e220$var$xRegEx, x.toString()).replace($60db182c0252e220$var$yRegEx, y.toString()).replace($60db182c0252e220$var$dashYRegEx, function() {\n        if (maxY === undefined) throw new Error('If the URL template has a {-y} placeholder, the grid extent must be known');\n        return (maxY - y).toString();\n    });\n}\nfunction $60db182c0252e220$export$83e87e683240b2e8(urls, z, x, y) {\n    const hash = (0, $bf2a04496fadabc6$export$731f79419750ccf7)(z, x, y);\n    const index = (0, $6b000a049d919fe5$export$ba467bec01d66def)(hash, urls.length);\n    return urls[index];\n}\nfunction $60db182c0252e220$export$2a1fa079bfd73dde(url) {\n    const urls = [];\n    let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n    if (match) {\n        // char range\n        const startCharCode = match[1].charCodeAt(0);\n        const stopCharCode = match[2].charCodeAt(0);\n        let charCode;\n        for(charCode = startCharCode; charCode <= stopCharCode; ++charCode)urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n        return urls;\n    }\n    match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n    if (match) {\n        // number range\n        const stop = parseInt(match[2], 10);\n        for(let i = parseInt(match[1], 10); i <= stop; i++)urls.push(url.replace(match[0], i.toString()));\n        return urls;\n    }\n    urls.push(url);\n    return urls;\n}\n\n\n\nfunction $91dd08a0f5859882$export$f0ecb46e90798741(template, tileGrid) {\n    return(/**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */ function(tileCoord, pixelRatio, projection) {\n        if (!tileCoord) return undefined;\n        let maxY;\n        const z = tileCoord[0];\n        if (tileGrid) {\n            // The `{-y}` placeholder only works for sources that have a tile grid at construction\n            const range = tileGrid.getFullTileRange(z);\n            if (range) maxY = range.getHeight() - 1;\n        }\n        return (0, $60db182c0252e220$export$df1e52f1b5b1c86f)(template, z, tileCoord[1], tileCoord[2], maxY);\n    });\n}\nfunction $91dd08a0f5859882$export$436f44dbcc31fea3(templates, tileGrid) {\n    const len = templates.length;\n    const tileUrlFunctions = new Array(len);\n    for(let i = 0; i < len; ++i)tileUrlFunctions[i] = $91dd08a0f5859882$export$f0ecb46e90798741(templates[i], tileGrid);\n    return $91dd08a0f5859882$export$4229b1d9af69b3be(tileUrlFunctions);\n}\nfunction $91dd08a0f5859882$export$4229b1d9af69b3be(tileUrlFunctions) {\n    if (tileUrlFunctions.length === 1) return tileUrlFunctions[0];\n    return(/**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */ function(tileCoord, pixelRatio, projection) {\n        if (!tileCoord) return undefined;\n        const h = (0, $bf2a04496fadabc6$export$d6af199866bfb566)(tileCoord);\n        const index = (0, $6b000a049d919fe5$export$ba467bec01d66def)(h, tileUrlFunctions.length);\n        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    });\n}\nfunction $91dd08a0f5859882$export$fab585f002f634a1(tileCoord, pixelRatio, projection) {\n    return undefined;\n}\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */ /**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */ class $e6408236331c2614$var$UrlTile extends (0, $988a11d09320f6a8$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Image tile options.\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tilePixelRatio: options.tilePixelRatio,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            interpolate: options.interpolate,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\n     * @private\n     * @type {boolean}\n     */ this.generateTileUrlFunction_ = this.tileUrlFunction === $e6408236331c2614$var$UrlTile.prototype.tileUrlFunction;\n        /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */ this.tileLoadFunction = options.tileLoadFunction;\n        if (options.tileUrlFunction) this.tileUrlFunction = options.tileUrlFunction;\n        /**\n     * @protected\n     * @type {!Array<string>|null}\n     */ this.urls = null;\n        if (options.urls) this.setUrls(options.urls);\n        else if (options.url) this.setUrl(options.url);\n        /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */ this.tileLoadingKeys_ = {};\n    }\n    /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */ getTileLoadFunction() {\n        return this.tileLoadFunction;\n    }\n    /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */ getTileUrlFunction() {\n        return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n    }\n    /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */ getUrls() {\n        return this.urls;\n    }\n    /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */ handleTileChange(event) {\n        const tile = /** @type {import(\"../Tile.js\").default} */ event.target;\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(tile);\n        const tileState = tile.getState();\n        let type;\n        if (tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) {\n            this.tileLoadingKeys_[uid] = true;\n            type = (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADSTART;\n        } else if (uid in this.tileLoadingKeys_) {\n            delete this.tileLoadingKeys_[uid];\n            type = tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR ? (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADERROR : tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED ? (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADEND : undefined;\n        }\n        if (type != undefined) this.dispatchEvent(new (0, $988a11d09320f6a8$export$c571855c51e6c4b6)(type, tile));\n    }\n    /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */ setTileLoadFunction(tileLoadFunction) {\n        this.tileLoadFunction = tileLoadFunction;\n        this.changed();\n    }\n    /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */ setTileUrlFunction(tileUrlFunction, key) {\n        this.tileUrlFunction = tileUrlFunction;\n        if (typeof key !== 'undefined') this.setKey(key);\n        else this.changed();\n    }\n    /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */ setUrl(url) {\n        const urls = (0, $60db182c0252e220$export$2a1fa079bfd73dde)(url);\n        this.urls = urls;\n        this.setUrls(urls);\n    }\n    /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */ setUrls(urls) {\n        this.urls = urls;\n        const key = urls.join('\\n');\n        if (this.generateTileUrlFunction_) this.setTileUrlFunction((0, $91dd08a0f5859882$export$436f44dbcc31fea3)(urls, this.tileGrid), key);\n        else this.setKey(key);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */ tileUrlFunction(tileCoord, pixelRatio, projection) {\n        return undefined;\n    }\n}\nvar $e6408236331c2614$export$2e2bcd8739ae039 = $e6408236331c2614$var$UrlTile;\n\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */ /**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */ class $51d055913ca55b5e$var$TileImage extends (0, $e6408236331c2614$export$2e2bcd8739ae039) {\n    /**\n   * @param {!Options} options Image tile options.\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : $51d055913ca55b5e$var$defaultTileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            interpolate: options.interpolate !== undefined ? options.interpolate : true,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\n     * @protected\n     * @type {?string}\n     */ this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n     * @protected\n     * @type {typeof ImageTile}\n     */ this.tileClass = options.tileClass !== undefined ? options.tileClass : (0, $cd3bc8d185522361$export$2e2bcd8739ae039);\n        /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */ this.tileGridForProjection = {};\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.renderReprojectionEdges_ = false;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */ getGutterForProjection(projection) {\n        if (this.getProjection() && projection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(this.getProjection(), projection)) return 0;\n        return this.getGutter();\n    }\n    /**\n   * @return {number} Gutter.\n   */ getGutter() {\n        return 0;\n    }\n    /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */ getKey() {\n        let key = super.getKey();\n        if (!this.getInterpolate()) key += ':disable-interpolation';\n        return key;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */ getTileGridForProjection(projection) {\n        const thisProj = this.getProjection();\n        if (this.tileGrid && (!thisProj || (0, $9c4744460e43e41b$export$fe091d73a555748b)(thisProj, projection))) return this.tileGrid;\n        const projKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(projection);\n        if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = (0, $5779655d81caea04$export$1f4812384df8a9c5)(projection);\n        return this.tileGridForProjection[projKey];\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */ createTile_(z, x, y, pixelRatio, projection, key) {\n        const tileCoord = [\n            z,\n            x,\n            y\n        ];\n        const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n        const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE : (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n        tile.key = key;\n        tile.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleTileChange.bind(this));\n        return tile;\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */ getTile(z, x, y, pixelRatio, projection) {\n        const sourceProjection = this.getProjection();\n        if (!sourceProjection || !projection || (0, $9c4744460e43e41b$export$fe091d73a555748b)(sourceProjection, projection)) return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n        const tileCoord = [\n            z,\n            x,\n            y\n        ];\n        const key = this.getKey();\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const tile = new (0, $398e350e33050c07$export$2e2bcd8739ae039)(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), (z, x, y, pixelRatio)=>this.getTileInternal(z, x, y, pixelRatio, sourceProjection), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.tileOptions);\n        tile.key = key;\n        return tile;\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */ getTileInternal(z, x, y, pixelRatio, projection) {\n        const key = this.getKey();\n        return this.createTile_(z, x, y, pixelRatio, projection, key);\n    }\n    /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */ setRenderReprojectionEdges(render) {\n        if (this.renderReprojectionEdges_ == render) return;\n        this.renderReprojectionEdges_ = render;\n        this.changed();\n    }\n    /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */ setTileGridForProjection(projection, tilegrid) {\n        const proj = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection);\n        if (proj) {\n            const projKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(proj);\n            if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = tilegrid;\n        }\n    }\n}\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */ function $51d055913ca55b5e$var$defaultTileLoadFunction(imageTile, src) {\n    /** @type {HTMLImageElement|HTMLVideoElement} */ imageTile.getImage().src = src;\n}\nvar $51d055913ca55b5e$export$2e2bcd8739ae039 = $51d055913ca55b5e$var$TileImage;\n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader\n * instead.  Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Not used if `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\n * may be used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the\n * url option instead.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */ /**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case\n * a `tileUrlFunction` can be used, such as:\n * ```js\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\n *  }\n * ```\n * @api\n */ class $963a7ef65488964c$var$XYZ extends (0, $51d055913ca55b5e$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] XYZ options.\n   */ constructor(options){\n        options = options || {};\n        const projection = options.projection !== undefined ? options.projection : 'EPSG:3857';\n        const tileGrid = options.tileGrid !== undefined ? options.tileGrid : (0, $5779655d81caea04$export$38500bbeccc864ff)({\n            extent: (0, $5779655d81caea04$export$7b5b6ef8fd55fac4)(projection),\n            maxResolution: options.maxResolution,\n            maxZoom: options.maxZoom,\n            minZoom: options.minZoom,\n            tileSize: options.tileSize\n        });\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            interpolate: options.interpolate,\n            projection: projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileGrid: tileGrid,\n            tileLoadFunction: options.tileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX !== undefined ? options.wrapX : true,\n            transition: options.transition,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\n     * @private\n     * @type {number}\n     */ this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    }\n    /**\n   * @return {number} Gutter.\n   * @override\n   */ getGutter() {\n        return this.gutter_;\n    }\n}\nvar $963a7ef65488964c$export$2e2bcd8739ae039 = $963a7ef65488964c$var$XYZ;\n\n\nconst $6c8498cc816f2362$export$4de8a5e77eb994ad = '&#169; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> contributors.';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */ /**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */ class $6c8498cc816f2362$var$OSM extends (0, $963a7ef65488964c$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Open Street Map options.\n   */ constructor(options){\n        options = options || {};\n        let attributions;\n        if (options.attributions !== undefined) attributions = options.attributions;\n        else attributions = [\n            $6c8498cc816f2362$export$4de8a5e77eb994ad\n        ];\n        const crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n        const url = options.url !== undefined ? options.url : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n        super({\n            attributions: attributions,\n            attributionsCollapsible: false,\n            cacheSize: options.cacheSize,\n            crossOrigin: crossOrigin,\n            interpolate: options.interpolate,\n            maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileLoadFunction: options.tileLoadFunction,\n            transition: options.transition,\n            url: url,\n            wrapX: options.wrapX,\n            zDirection: options.zDirection\n        });\n    }\n}\nvar $6c8498cc816f2362$export$2e2bcd8739ae039 = $6c8498cc816f2362$var$OSM;\n\n\n/**\n * @module ol/layer/Tile\n */ /**\n * @module ol/layer/BaseTile\n */ /**\n * @module ol/layer/Layer\n */ /**\n * @module ol/layer/Base\n */ \n/**\n * @module ol/layer/Property\n */ /**\n * @enum {string}\n */ var $f6d1853b3fcae320$export$2e2bcd8739ae039 = {\n    OPACITY: 'opacity',\n    VISIBLE: 'visible',\n    EXTENT: 'extent',\n    Z_INDEX: 'zIndex',\n    MAX_RESOLUTION: 'maxResolution',\n    MIN_RESOLUTION: 'minResolution',\n    MAX_ZOOM: 'maxZoom',\n    MIN_ZOOM: 'minZoom',\n    SOURCE: 'source',\n    MAP: 'map'\n};\n\n\n\n\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */ /**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */ /***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */ /**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */ class $57c5f0299cb9b82f$var$BaseLayer extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Layer options.\n   */ constructor(options){\n        super();\n        /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {BaseLayerOnSignature<void>}\n     */ this.un;\n        /**\n     * @type {BackgroundColor|false}\n     * @private\n     */ this.background_ = options.background;\n        /**\n     * @type {Object<string, *>}\n     */ const properties = Object.assign({}, options);\n        if (typeof options.properties === 'object') {\n            delete properties.properties;\n            Object.assign(properties, options.properties);\n        }\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY] === 'number', 'Layer opacity must be a number');\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE] = options.visible !== undefined ? options.visible : true;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX] = options.zIndex;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n        /**\n     * @type {string}\n     * @private\n     */ this.className_ = properties.className !== undefined ? properties.className : 'ol-layer';\n        delete properties.className;\n        this.setProperties(properties);\n        /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */ this.state_ = null;\n    }\n    /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */ getBackground() {\n        return this.background_;\n    }\n    /**\n   * @return {string} CSS class name.\n   */ getClassName() {\n        return this.className_;\n    }\n    /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */ getLayerState(managed) {\n        /** @type {import(\"./Layer.js\").State} */ const state = this.state_ || /** @type {?} */ {\n            layer: this,\n            managed: managed === undefined ? true : managed\n        };\n        const zIndex = this.getZIndex();\n        state.opacity = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n        state.visible = this.getVisible();\n        state.extent = this.getExtent();\n        state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n        state.maxResolution = this.getMaxResolution();\n        state.minResolution = Math.max(this.getMinResolution(), 0);\n        state.minZoom = this.getMinZoom();\n        state.maxZoom = this.getMaxZoom();\n        this.state_ = state;\n        return state;\n    }\n    /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */ getLayersArray(array) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */ getLayerStatesArray(states) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */ getExtent() {\n        return /** @type {import(\"../extent.js\").Extent|undefined} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).EXTENT);\n    }\n    /**\n   * Return the maximum resolution of the layer. Returns Infinity if\n   * the layer has no maximum resolution set.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */ getMaxResolution() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION);\n    }\n    /**\n   * Return the minimum resolution of the layer. Returns 0 if\n   * the layer has no minimum resolution set.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */ getMinResolution() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION);\n    }\n    /**\n   * Return the minimum zoom level of the layer. Returns -Infinity if\n   * the layer has no minimum zoom set.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */ getMinZoom() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM);\n    }\n    /**\n   * Return the maximum zoom level of the layer. Returns Infinity if\n   * the layer has no maximum zoom set.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */ getMaxZoom() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM);\n    }\n    /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */ getOpacity() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY);\n    }\n    /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */ getSourceState() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the value of this layer's `visible` property. To find out whether the layer\n   * is visible on a map, use `isVisible()` instead.\n   * @return {boolean} The value of the `visible` property of the layer.\n   * @observable\n   * @api\n   */ getVisible() {\n        return /** @type {boolean} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE);\n    }\n    /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. Returns undefined if the layer is unmanaged.\n   * @return {number|undefined} The Z-index of the layer.\n   * @observable\n   * @api\n   */ getZIndex() {\n        return /** @type {number|undefined} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX);\n    }\n    /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */ setBackground(background) {\n        this.background_ = background;\n        this.changed();\n    }\n    /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */ setExtent(extent) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).EXTENT, extent);\n    }\n    /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */ setMaxResolution(maxResolution) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION, maxResolution);\n    }\n    /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */ setMinResolution(minResolution) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION, minResolution);\n    }\n    /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */ setMaxZoom(maxZoom) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM, maxZoom);\n    }\n    /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */ setMinZoom(minZoom) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM, minZoom);\n    }\n    /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */ setOpacity(opacity) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof opacity === 'number', 'Layer opacity must be a number');\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY, opacity);\n    }\n    /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */ setVisible(visible) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE, visible);\n    }\n    /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */ setZIndex(zindex) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX, zindex);\n    }\n    /**\n   * Clean up.\n   * @override\n   */ disposeInternal() {\n        if (this.state_) {\n            this.state_.layer = null;\n            this.state_ = null;\n        }\n        super.disposeInternal();\n    }\n}\nvar $57c5f0299cb9b82f$export$2e2bcd8739ae039 = $57c5f0299cb9b82f$var$BaseLayer;\n\n\n\n\n/**\n * @module ol/render/EventType\n */ /**\n * @enum {string}\n */ var $f5e92a4d985a2824$export$2e2bcd8739ae039 /**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */  /**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */  = {\n    /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */ PRERENDER: 'prerender',\n    /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */ POSTRENDER: 'postrender',\n    /**\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */ PRECOMPOSE: 'precompose',\n    /**\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */ POSTCOMPOSE: 'postcompose',\n    /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */ RENDERCOMPLETE: 'rendercomplete'\n};\n\n\n/**\n * @module ol/View\n */ \n/**\n * @module ol/ViewHint\n */ /**\n * @enum {number}\n */ var $7d362782b4ccb93d$export$2e2bcd8739ae039 = {\n    ANIMATING: 0,\n    INTERACTING: 1\n};\n\n\n/**\n * @module ol/ViewProperty\n */ /**\n * @enum {string}\n */ var $d35baefbe89be4c5$export$2e2bcd8739ae039 = {\n    CENTER: 'center',\n    RESOLUTION: 'resolution',\n    ROTATION: 'rotation'\n};\n\n\n\n\n\n\n\n/**\n * @module ol/centerconstraint\n */ \nfunction $b21a6e049949bb31$export$c2f0af2c946f6897(extent, onlyCenter, smooth) {\n    return(/**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */ function(center, resolution, size, isMoving, centerShift) {\n        if (!center) return undefined;\n        if (!resolution && !onlyCenter) return center;\n        const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n        const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n        const shiftX = centerShift ? centerShift[0] : 0;\n        const shiftY = centerShift ? centerShift[1] : 0;\n        let minX = extent[0] + viewWidth / 2 + shiftX;\n        let maxX = extent[2] - viewWidth / 2 + shiftX;\n        let minY = extent[1] + viewHeight / 2 + shiftY;\n        let maxY = extent[3] - viewHeight / 2 + shiftY;\n        // note: when zooming out of bounds, min and max values for x and y may\n        // end up inverted (min > max); this has to be accounted for\n        if (minX > maxX) {\n            minX = (maxX + minX) / 2;\n            maxX = minX;\n        }\n        if (minY > maxY) {\n            minY = (maxY + minY) / 2;\n            maxY = minY;\n        }\n        let x = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(center[0], minX, maxX);\n        let y = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(center[1], minY, maxY);\n        // during an interaction, allow some overscroll\n        if (isMoving && smooth && resolution) {\n            const ratio = 30 * resolution;\n            x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n            y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n        }\n        return [\n            x,\n            y\n        ];\n    });\n}\nfunction $b21a6e049949bb31$export$f883a24d5edde77c(center) {\n    return center;\n}\n\n\n\n/**\n * @module ol/resolutionconstraint\n */ \n\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */ /**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */ function $bac43a1f4a628548$var$getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {\n    const xResolution = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(maxExtent) / viewportSize[0];\n    const yResolution = (0, $6da4c8ed3074c92b$export$c08559766941f856)(maxExtent) / viewportSize[1];\n    if (showFullExtent) return Math.min(resolution, Math.max(xResolution, yResolution));\n    return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */ function $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n    let result = Math.min(resolution, maxResolution);\n    const ratio = 50;\n    result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;\n    if (minResolution) {\n        result = Math.max(result, minResolution);\n        result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;\n    }\n    return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(result, minResolution / 2, maxResolution * 2);\n}\nfunction $bac43a1f4a628548$export$d65a517690fc4385(resolutions, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    return(/**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const maxResolution = resolutions[0];\n            const minResolution = resolutions[resolutions.length - 1];\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            // during interacting or animating, allow intermediary values\n            if (isMoving) {\n                if (!smooth) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n                return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n            }\n            const capped = Math.min(cappedMaxRes, resolution);\n            const z = Math.floor((0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(resolutions, capped, direction));\n            if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) return resolutions[z + 1];\n            return resolutions[z];\n        }\n        return undefined;\n    });\n}\nfunction $bac43a1f4a628548$export$22ac0f6b219de91a(power, maxResolution, minResolution, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    minResolution = minResolution !== undefined ? minResolution : 0;\n    return(/**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            // during interacting or animating, allow intermediary values\n            if (isMoving) {\n                if (!smooth) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n                return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n            }\n            const tolerance = 1e-9;\n            const minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);\n            const offset = -direction * (0.5 - tolerance) + 0.5;\n            const capped = Math.min(cappedMaxRes, resolution);\n            const cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);\n            const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n            const newResolution = maxResolution / Math.pow(power, zoomLevel);\n            return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(newResolution, minResolution, cappedMaxRes);\n        }\n        return undefined;\n    });\n}\nfunction $bac43a1f4a628548$export$1c4e6da9b4b066fe(maxResolution, minResolution, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    return(/**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            if (!smooth || !isMoving) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n            return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n        }\n        return undefined;\n    });\n}\n\n\n/**\n * @module ol/rotationconstraint\n */ \nfunction $d65f0a322291d127$export$e20fbacbb41798b(rotation) {\n    if (rotation !== undefined) return 0;\n    return undefined;\n}\nfunction $d65f0a322291d127$export$f883a24d5edde77c(rotation) {\n    if (rotation !== undefined) return rotation;\n    return undefined;\n}\nfunction $d65f0a322291d127$export$9ba78806de831083(n) {\n    const theta = 2 * Math.PI / n;\n    return(/**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */ function(rotation, isMoving) {\n        if (isMoving) return rotation;\n        if (rotation !== undefined) {\n            rotation = Math.floor(rotation / theta + 0.5) * theta;\n            return rotation;\n        }\n        return undefined;\n    });\n}\nfunction $d65f0a322291d127$export$17a6e6f3448b17e8(tolerance) {\n    const t = tolerance === undefined ? (0, $6b000a049d919fe5$export$cba01ba138429a1d)(5) : tolerance;\n    return(/**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */ function(rotation, isMoving) {\n        if (isMoving || rotation === undefined) return rotation;\n        if (Math.abs(rotation) <= t) return 0;\n        return rotation;\n    });\n}\n\n\n\n\n\n/**\n * @module ol/geom/Polygon\n */ /**\n * @module ol/geom/LinearRing\n */ /**\n * @module ol/geom/SimpleGeometry\n */ /**\n * @module ol/geom/Geometry\n */ \n\n\n\n\n\n/**\n * @module ol/geom/flat/transform\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\n * @return {Array<number>} Transformed coordinates.\n */ function $14c6e714516e527b$export$b92b2dedcfff79de(flatCoordinates, offset, end, stride, transform, dest, destinationStride) {\n    dest = dest ? dest : [];\n    destinationStride = destinationStride ? destinationStride : 2;\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const x = flatCoordinates[j];\n        const y = flatCoordinates[j + 1];\n        dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n        dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n        for(let k = 2; k < destinationStride; k++)dest[i++] = flatCoordinates[j + k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$bb628a54ab399bc9(flatCoordinates, offset, end, stride, angle, anchor, dest) {\n    dest = dest ? dest : [];\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const anchorX = anchor[0];\n    const anchorY = anchor[1];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const deltaX = flatCoordinates[j] - anchorX;\n        const deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n        dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$dcdf75081b88279d(flatCoordinates, offset, end, stride, sx, sy, anchor, dest) {\n    dest = dest ? dest : [];\n    const anchorX = anchor[0];\n    const anchorY = anchor[1];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const deltaX = flatCoordinates[j] - anchorX;\n        const deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + sx * deltaX;\n        dest[i++] = anchorY + sy * deltaY;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$d73ee8ef04f5226a(flatCoordinates, offset, end, stride, deltaX, deltaY, dest) {\n    dest = dest ? dest : [];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        dest[i++] = flatCoordinates[j] + deltaX;\n        dest[i++] = flatCoordinates[j + 1] + deltaY;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\n\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */ /**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */ /**\n * @type {import(\"../transform.js\").Transform}\n */ const $50db89a00eb954f6$var$tmpTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */ class $50db89a00eb954f6$var$Geometry extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.extent_ = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\n     * @private\n     * @type {number}\n     */ this.extentRevision_ = -1;\n        /**\n     * @protected\n     * @type {number}\n     */ this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n        /**\n     * @protected\n     * @type {number}\n     */ this.simplifiedGeometryRevision = 0;\n        /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */ this.simplifyTransformedInternal = (0, $013a1733c226ec50$export$ff83df6f9971435f)((revision, squaredTolerance, transform)=>{\n            if (!transform) return this.getSimplifiedGeometry(squaredTolerance);\n            const clone = this.clone();\n            clone.applyTransform(transform);\n            return clone.getSimplifiedGeometry(squaredTolerance);\n        });\n    }\n    /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */ simplifyTransformed(squaredTolerance, transform) {\n        return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, transform);\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */ clone() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */ containsXY(x, y) {\n        const coord = this.getClosestPoint([\n            x,\n            y\n        ]);\n        return coord[0] === x && coord[1] === y;\n    }\n    /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */ getClosestPoint(point, closestPoint) {\n        closestPoint = closestPoint ? closestPoint : [\n            NaN,\n            NaN\n        ];\n        this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n        return closestPoint;\n    }\n    /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */ intersectsCoordinate(coordinate) {\n        return this.containsXY(coordinate[0], coordinate[1]);\n    }\n    /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */ computeExtent(extent) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */ getExtent(extent) {\n        if (this.extentRevision_ != this.getRevision()) {\n            const extent = this.computeExtent(this.extent_);\n            if (isNaN(extent[0]) || isNaN(extent[1])) (0, $6da4c8ed3074c92b$export$3e2152b047719fa1)(extent);\n            this.extentRevision_ = this.getRevision();\n        }\n        return (0, $6da4c8ed3074c92b$export$6a4fe494c558c238)(this.extent_, extent);\n    }\n    /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */ rotate(angle, anchor) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */ scale(sx, sy, anchor) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */ simplify(tolerance) {\n        return this.getSimplifiedGeometry(tolerance * tolerance);\n    }\n    /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */ getSimplifiedGeometry(squaredTolerance) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */ getType() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */ applyTransform(transformFn) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */ intersectsExtent(extent) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */ translate(deltaX, deltaY) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {this} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */ transform(source, destination) {\n        /** @type {import(\"../proj/Projection.js\").default} */ const sourceProj = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(source);\n        const transformFn = sourceProj.getUnits() == 'tile-pixels' ? function(inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = (0, $6da4c8ed3074c92b$export$c08559766941f856)(projectedExtent) / (0, $6da4c8ed3074c92b$export$c08559766941f856)(pixelExtent);\n            (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)($50db89a00eb954f6$var$tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n            const transformed = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(inCoordinates, 0, inCoordinates.length, stride, $50db89a00eb954f6$var$tmpTransform, outCoordinates);\n            const projTransform = (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(sourceProj, destination);\n            if (projTransform) return projTransform(transformed, transformed, stride);\n            return transformed;\n        } : (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(sourceProj, destination);\n        this.applyTransform(transformFn);\n        return this;\n    }\n}\nvar $50db89a00eb954f6$export$2e2bcd8739ae039 = $50db89a00eb954f6$var$Geometry;\n\n\n\n\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */ class $c76e993e57efc8c4$var$SimpleGeometry extends (0, $50db89a00eb954f6$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */ this.layout = 'XY';\n        /**\n     * @protected\n     * @type {number}\n     */ this.stride = 2;\n        /**\n     * @protected\n     * @type {Array<number>}\n     */ this.flatCoordinates;\n    }\n    /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */ computeExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$be0ab0bf96ca59ca)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    }\n    /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */ getCoordinates() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */ getFirstCoordinate() {\n        return this.flatCoordinates.slice(0, this.stride);\n    }\n    /**\n   * @return {Array<number>} Flat coordinates.\n   */ getFlatCoordinates() {\n        return this.flatCoordinates;\n    }\n    /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */ getLastCoordinate() {\n        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n    }\n    /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */ getLayout() {\n        return this.layout;\n    }\n    /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @override\n   */ getSimplifiedGeometry(squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        // If squaredTolerance is negative or if we know that simplification will not\n        // have any effect then just return this.\n        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) return this;\n        const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n        const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) return simplifiedGeometry;\n        // Simplification did not actually remove any coordinates.  We now know\n        // that any calls to getSimplifiedGeometry with a squaredTolerance less\n        // than or equal to the current squaredTolerance will also not have any\n        // effect.  This allows us to short circuit simplification (saving CPU\n        // cycles) and prevents the cache of simplified geometries from filling\n        // up with useless identical copies of this geometry (saving memory).\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        return this;\n    }\n    /**\n   * @return {number} Stride.\n   */ getStride() {\n        return this.stride;\n    }\n    /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */ setFlatCoordinates(layout, flatCoordinates) {\n        this.stride = $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout);\n        this.layout = layout;\n        this.flatCoordinates = flatCoordinates;\n    }\n    /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ setCoordinates(coordinates, layout) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */ setLayout(layout, coordinates, nesting) {\n        let stride;\n        if (layout) stride = $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout);\n        else {\n            for(let i = 0; i < nesting; ++i){\n                if (coordinates.length === 0) {\n                    this.layout = 'XY';\n                    this.stride = 2;\n                    return;\n                }\n                coordinates = /** @type {Array<unknown>} */ coordinates[0];\n            }\n            stride = coordinates.length;\n            layout = $c76e993e57efc8c4$export$61bb6938093db2c8(stride);\n        }\n        this.layout = layout;\n        this.stride = stride;\n    }\n    /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   * @override\n   */ applyTransform(transformFn) {\n        if (this.flatCoordinates) {\n            transformFn(this.flatCoordinates, this.flatCoordinates, this.layout.startsWith('XYZ') ? 3 : 2, this.stride);\n            this.changed();\n        }\n    }\n    /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   * @override\n   */ rotate(angle, anchor) {\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$bb628a54ab399bc9)(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n            this.changed();\n        }\n    }\n    /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   * @override\n   */ scale(sx, sy, anchor) {\n        if (sy === undefined) sy = sx;\n        if (!anchor) anchor = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$dcdf75081b88279d)(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n            this.changed();\n        }\n    }\n    /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   * @override\n   */ translate(deltaX, deltaY) {\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$d73ee8ef04f5226a)(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n            this.changed();\n        }\n    }\n}\nfunction $c76e993e57efc8c4$export$61bb6938093db2c8(stride) {\n    let layout;\n    if (stride == 2) layout = 'XY';\n    else if (stride == 3) layout = 'XYZ';\n    else if (stride == 4) layout = 'XYZM';\n    return /** @type {import(\"./Geometry.js\").GeometryLayout} */ layout;\n}\nfunction $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout) {\n    let stride;\n    if (layout == 'XY') stride = 2;\n    else if (layout == 'XYZ' || layout == 'XYM') stride = 3;\n    else if (layout == 'XYZM') stride = 4;\n    return /** @type {number} */ stride;\n}\nfunction $c76e993e57efc8c4$export$a3767472617c7861(simpleGeometry, transform, dest) {\n    const flatCoordinates = simpleGeometry.getFlatCoordinates();\n    if (!flatCoordinates) return null;\n    const stride = simpleGeometry.getStride();\n    return (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, 0, flatCoordinates.length, stride, transform, dest);\n}\nvar $c76e993e57efc8c4$export$2e2bcd8739ae039 = $c76e993e57efc8c4$var$SimpleGeometry;\n\n\n/**\n * @module ol/geom/flat/closest\n */ \n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */ function $bf5604c1b8258b71$var$assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n    const x1 = flatCoordinates[offset1];\n    const y1 = flatCoordinates[offset1 + 1];\n    const dx = flatCoordinates[offset2] - x1;\n    const dy = flatCoordinates[offset2 + 1] - y1;\n    let offset;\n    if (dx === 0 && dy === 0) offset = offset1;\n    else {\n        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) offset = offset2;\n        else if (t > 0) {\n            for(let i = 0; i < stride; ++i)closestPoint[i] = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n            closestPoint.length = stride;\n            return;\n        } else offset = offset1;\n    }\n    for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];\n    closestPoint.length = stride;\n}\nfunction $bf5604c1b8258b71$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    for(offset += stride; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        const squaredDelta = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x1, y1, x2, y2);\n        if (squaredDelta > max) max = squaredDelta;\n        x1 = x2;\n        y1 = y2;\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        max = $bf5604c1b8258b71$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max);\n        offset = end;\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$37c18e6e7d50501a(flatCoordinates, offset, endss, stride, max) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        max = $bf5604c1b8258b71$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max);\n        offset = ends[ends.length - 1];\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    if (offset == end) return minSquaredDistance;\n    let i, squaredDistance;\n    if (maxDelta === 0) {\n        // All points are identical, so just test the first point.\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n        if (squaredDistance < minSquaredDistance) {\n            for(i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        return minSquaredDistance;\n    }\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    let index = offset + stride;\n    while(index < end){\n        $bf5604c1b8258b71$var$assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];\n            closestPoint.length = stride;\n            index += stride;\n        } else // Skip ahead multiple points, because we know that all the skipped\n        // points cannot be any closer than the closest point we have found so\n        // far.  We know this because we know how close the current point is, how\n        // close the closest point we have found so far is, and the maximum\n        // distance between consecutive points.  For example, if we're currently\n        // at distance 10, the best we've found so far is 3, and that the maximum\n        // distance between consecutive points is 2, then we'll need to skip at\n        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n        // finding a closer point.  We use Math.max(..., 1) to ensure that we\n        // always advance at least one point, to avoid an infinite loop.\n        index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);\n    }\n    if (isRing) {\n        // Check the closing segment.\n        $bf5604c1b8258b71$var$assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];\n            closestPoint.length = stride;\n        }\n    }\n    return minSquaredDistance;\n}\nfunction $bf5604c1b8258b71$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        minSquaredDistance = $bf5604c1b8258b71$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = end;\n    }\n    return minSquaredDistance;\n}\nfunction $bf5604c1b8258b71$export$60e067685eb8f9c4(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        minSquaredDistance = $bf5604c1b8258b71$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = ends[ends.length - 1];\n    }\n    return minSquaredDistance;\n}\n\n\n\n/**\n * @module ol/geom/flat/deflate\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */ function $6b086aa46281540d$export$60815ead40ec79ab(flatCoordinates, offset, coordinate, stride) {\n    for(let i = 0, ii = coordinate.length; i < ii; ++i)flatCoordinates[offset++] = coordinate[i];\n    return offset;\n}\nfunction $6b086aa46281540d$export$5c4daf67e03c190f(flatCoordinates, offset, coordinates, stride) {\n    for(let i = 0, ii = coordinates.length; i < ii; ++i){\n        const coordinate = coordinates[i];\n        for(let j = 0; j < stride; ++j)flatCoordinates[offset++] = coordinate[j];\n    }\n    return offset;\n}\nfunction $6b086aa46281540d$export$47c3746a74384d45(flatCoordinates, offset, coordinatess, stride, ends) {\n    ends = ends ? ends : [];\n    let i = 0;\n    for(let j = 0, jj = coordinatess.length; j < jj; ++j){\n        const end = $6b086aa46281540d$export$5c4daf67e03c190f(flatCoordinates, offset, coordinatess[j], stride);\n        ends[i++] = end;\n        offset = end;\n    }\n    ends.length = i;\n    return ends;\n}\nfunction $6b086aa46281540d$export$f9f2bb59da4accd3(flatCoordinates, offset, coordinatesss, stride, endss) {\n    endss = endss ? endss : [];\n    let i = 0;\n    for(let j = 0, jj = coordinatesss.length; j < jj; ++j){\n        const ends = $6b086aa46281540d$export$47c3746a74384d45(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);\n        if (ends.length === 0) ends[0] = offset;\n        endss[i++] = ends;\n        offset = ends[ends.length - 1];\n    }\n    endss.length = i;\n    return endss;\n}\n\n\n/**\n * @module ol/geom/flat/simplify\n */ // Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nfunction $8780aae6970f5f65$export$2cbbcce9030b8734(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, simplifiedFlatCoordinates) {\n    simplifiedFlatCoordinates = simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n    if (!highQuality) {\n        end = $8780aae6970f5f65$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        flatCoordinates = simplifiedFlatCoordinates;\n        offset = 0;\n        stride = 2;\n    }\n    simplifiedFlatCoordinates.length = $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return simplifiedFlatCoordinates;\n}\nfunction $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    const n = (end - offset) / stride;\n    if (n < 3) {\n        for(; offset < end; offset += stride){\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    /** @type {Array<number>} */ const markers = new Array(n);\n    markers[0] = 1;\n    markers[n - 1] = 1;\n    /** @type {Array<number>} */ const stack = [\n        offset,\n        end - stride\n    ];\n    let index = 0;\n    while(stack.length > 0){\n        const last = stack.pop();\n        const first = stack.pop();\n        let maxSquaredDistance = 0;\n        const x1 = flatCoordinates[first];\n        const y1 = flatCoordinates[first + 1];\n        const x2 = flatCoordinates[last];\n        const y2 = flatCoordinates[last + 1];\n        for(let i = first + stride; i < last; i += stride){\n            const x = flatCoordinates[i];\n            const y = flatCoordinates[i + 1];\n            const squaredDistance = (0, $6b000a049d919fe5$export$251bb0a9cef172e6)(x, y, x1, y1, x2, y2);\n            if (squaredDistance > maxSquaredDistance) {\n                index = i;\n                maxSquaredDistance = squaredDistance;\n            }\n        }\n        if (maxSquaredDistance > squaredTolerance) {\n            markers[(index - offset) / stride] = 1;\n            if (first + stride < index) stack.push(first, index);\n            if (index + stride < last) stack.push(index, last);\n        }\n    }\n    for(let i = 0; i < n; ++i)if (markers[i]) {\n        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];\n        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        simplifiedOffset = $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$5d74fb54bb752ea0(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        /** @type {Array<number>} */ const simplifiedEnds = [];\n        simplifiedOffset = $8780aae6970f5f65$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    if (end <= offset + stride) {\n        // zero or one point, no simplification possible, so copy and return\n        for(; offset < end; offset += stride){\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    // copy first point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    let x2 = x1;\n    let y2 = y1;\n    for(offset += stride; offset < end; offset += stride){\n        x2 = flatCoordinates[offset];\n        y2 = flatCoordinates[offset + 1];\n        if ((0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x1, y1, x2, y2) > squaredTolerance) {\n            // copy point at offset\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    if (x2 != x1 || y2 != y1) {\n        // copy last point\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$51a0620f7a28532b(value, tolerance) {\n    return tolerance * Math.round(value / tolerance);\n}\nfunction $8780aae6970f5f65$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    // do nothing if the line is empty\n    if (offset == end) return simplifiedOffset;\n    // snap the first coordinate (P1)\n    let x1 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n    let y1 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // add the first coordinate to the output\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    // find the next coordinate that does not snap to the same value as the first\n    // coordinate (P2)\n    let x2, y2;\n    do {\n        x2 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n        y2 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        if (offset == end) {\n            // all coordinates snap to the same value, the line collapses to a point\n            // push the last snapped value anyway to ensure that the output contains\n            // at least two points\n            // FIXME should we really return at least two points anyway?\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            return simplifiedOffset;\n        }\n    }while (x2 == x1 && y2 == y1);\n    while(offset < end){\n        // snap the next coordinate (P3)\n        const x3 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n        const y3 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        // skip P3 if it is equal to P2\n        if (x3 == x2 && y3 == y2) continue;\n        // calculate the delta between P1 and P2\n        const dx1 = x2 - x1;\n        const dy1 = y2 - y1;\n        // calculate the delta between P3 and P1\n        const dx2 = x3 - x1;\n        const dy2 = y3 - y1;\n        // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n        // P1 in the same direction then P2 is on the straight line between P1 and\n        // P3\n        if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {\n            // discard P2 and set P2 = P3\n            x2 = x3;\n            y2 = y3;\n            continue;\n        }\n        // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n        // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n        // and continue with P1 = P2 and P2 = P3\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n        x1 = x2;\n        y1 = y2;\n        x2 = x3;\n        y2 = y3;\n    }\n    // add the last point (P2)\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        simplifiedOffset = $8780aae6970f5f65$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$b9acf67ef05cd17c(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        /** @type {Array<number>} */ const simplifiedEnds = [];\n        simplifiedOffset = $8780aae6970f5f65$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\n\n\n/**\n * @module ol/geom/flat/inflate\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */ function $5454470599558ddd$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinates) {\n    coordinates = coordinates !== undefined ? coordinates : [];\n    let i = 0;\n    for(let j = offset; j < end; j += stride)coordinates[i++] = flatCoordinates.slice(j, j + stride);\n    coordinates.length = i;\n    return coordinates;\n}\nfunction $5454470599558ddd$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatess) {\n    coordinatess = coordinatess !== undefined ? coordinatess : [];\n    let i = 0;\n    for(let j = 0, jj = ends.length; j < jj; ++j){\n        const end = ends[j];\n        coordinatess[i++] = $5454470599558ddd$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinatess[i]);\n        offset = end;\n    }\n    coordinatess.length = i;\n    return coordinatess;\n}\nfunction $5454470599558ddd$export$915c7058aeb4dfeb(flatCoordinates, offset, endss, stride, coordinatesss) {\n    coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n    let i = 0;\n    for(let j = 0, jj = endss.length; j < jj; ++j){\n        const ends = endss[j];\n        coordinatesss[i++] = ends.length === 1 && ends[0] === offset ? [] : $5454470599558ddd$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatesss[i]);\n        offset = ends[ends.length - 1];\n    }\n    coordinatesss.length = i;\n    return coordinatesss;\n}\n\n\n/**\n * @module ol/geom/flat/area\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */ function $01ff26a2f986a1d0$export$3c5e1905f889266e(flatCoordinates, offset, end, stride) {\n    let twiceArea = 0;\n    const x0 = flatCoordinates[end - stride];\n    const y0 = flatCoordinates[end - stride + 1];\n    let dx1 = 0;\n    let dy1 = 0;\n    for(; offset < end; offset += stride){\n        const dx2 = flatCoordinates[offset] - x0;\n        const dy2 = flatCoordinates[offset + 1] - y0;\n        twiceArea += dy1 * dx2 - dx1 * dy2;\n        dx1 = dx2;\n        dy1 = dy2;\n    }\n    return twiceArea / 2;\n}\nfunction $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride) {\n    let area = 0;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        area += $01ff26a2f986a1d0$export$3c5e1905f889266e(flatCoordinates, offset, end, stride);\n        offset = end;\n    }\n    return area;\n}\nfunction $01ff26a2f986a1d0$export$78e139679ca7205(flatCoordinates, offset, endss, stride) {\n    let area = 0;\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        area += $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride);\n        offset = ends[ends.length - 1];\n    }\n    return area;\n}\n\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */ class $548636579b4087f2$var$LinearRing extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ constructor(coordinates, layout){\n        super();\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDeltaRevision_ = -1;\n        if (layout !== undefined && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n        else this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ coordinates, layout);\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   * @override\n   */ clone() {\n        return new $548636579b4087f2$var$LinearRing(this.flatCoordinates.slice(), this.layout);\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$bc2eb611ddf80103)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$4adc8e5135fb44c)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$3c5e1905f889266e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   * @override\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   * @override\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        /** @type {Array<number>} */ const simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$ef693d1572e64fb8)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new $548636579b4087f2$var$LinearRing(simplifiedFlatCoordinates, 'XY');\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */ getType() {\n        return 'LinearRing';\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */ intersectsExtent(extent) {\n        return false;\n    }\n    /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 1);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $548636579b4087f2$export$2e2bcd8739ae039 = $548636579b4087f2$var$LinearRing;\n\n\n/**\n * @module ol/geom/Point\n */ \n\n\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */ class $6eced4c969949f6b$var$Point extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ constructor(coordinates, layout){\n        super();\n        this.setCoordinates(coordinates, layout);\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   * @override\n   */ clone() {\n        const point = new $6eced4c969949f6b$var$Point(this.flatCoordinates.slice(), this.layout);\n        point.applyProperties(this);\n        return point;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        const flatCoordinates = this.flatCoordinates;\n        const squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[0], flatCoordinates[1]);\n        if (squaredDistance < minSquaredDistance) {\n            const stride = this.stride;\n            for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[i];\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        return minSquaredDistance;\n    }\n    /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   * @override\n   */ getCoordinates() {\n        return this.flatCoordinates.slice();\n    }\n    /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */ computeExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$4838bf78d04a9440)(this.flatCoordinates, extent);\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */ getType() {\n        return 'Point';\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */ intersectsExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$805bdfd6d6690e97)(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n    }\n    /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 0);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$60815ead40ec79ab)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $6eced4c969949f6b$export$2e2bcd8739ae039 = $6eced4c969949f6b$var$Point;\n\n\n\n\n\n\n\n/**\n * @module ol/geom/flat/interiorpoint\n */ \n\nfunction $2166f19777f69377$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, dest) {\n    let i, ii, x, x1, x2, y1, y2;\n    const y = flatCenters[flatCentersOffset + 1];\n    /** @type {Array<number>} */ const intersections = [];\n    // Calculate intersections with the horizontal line\n    for(let r = 0, rr = ends.length; r < rr; ++r){\n        const end = ends[r];\n        x1 = flatCoordinates[end - stride];\n        y1 = flatCoordinates[end - stride + 1];\n        for(i = offset; i < end; i += stride){\n            x2 = flatCoordinates[i];\n            y2 = flatCoordinates[i + 1];\n            if (y <= y1 && y2 <= y || y1 <= y && y <= y2) {\n                x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;\n                intersections.push(x);\n            }\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    // Find the longest segment of the horizontal line that has its center point\n    // inside the linear ring.\n    let pointX = NaN;\n    let maxSegmentLength = -Infinity;\n    intersections.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n    x1 = intersections[0];\n    for(i = 1, ii = intersections.length; i < ii; ++i){\n        x2 = intersections[i];\n        const segmentLength = Math.abs(x2 - x1);\n        if (segmentLength > maxSegmentLength) {\n            x = (x1 + x2) / 2;\n            if ((0, $239aa88e7a573859$export$ae868c0f6acc3355)(flatCoordinates, offset, ends, stride, x, y)) {\n                pointX = x;\n                maxSegmentLength = segmentLength;\n            }\n        }\n        x1 = x2;\n    }\n    if (isNaN(pointX)) // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n    if (dest) {\n        dest.push(pointX, y, maxSegmentLength);\n        return dest;\n    }\n    return [\n        pointX,\n        y,\n        maxSegmentLength\n    ];\n}\nfunction $2166f19777f69377$export$11463803eda8a372(flatCoordinates, offset, endss, stride, flatCenters) {\n    /** @type {Array<number>} */ let interiorPoints = [];\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        interiorPoints = $2166f19777f69377$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);\n        offset = ends[ends.length - 1];\n    }\n    return interiorPoints;\n}\n\n\n\n\n/**\n * @module ol/geom/flat/orient\n */ /**\n * @module ol/geom/flat/reverse\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */ function $155dc783a4ec227e$export$741858880c96b18c(flatCoordinates, offset, end, stride) {\n    while(offset < end - stride){\n        for(let i = 0; i < stride; ++i){\n            const tmp = flatCoordinates[offset + i];\n            flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n            flatCoordinates[end - stride + i] = tmp;\n        }\n        offset += stride;\n        end -= stride;\n    }\n}\n\n\nfunction $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride) {\n    // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n    let edge = 0;\n    let x1 = flatCoordinates[end - stride];\n    let y1 = flatCoordinates[end - stride + 1];\n    for(; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        edge += (x2 - x1) * (y2 + y1);\n        x1 = x2;\n        y1 = y2;\n    }\n    return edge === 0 ? undefined : edge > 0;\n}\nfunction $7892dc06ffd23218$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right) {\n    right = right !== undefined ? right : false;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        const isClockwise = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride);\n        if (i === 0) {\n            if (right && isClockwise || !right && !isClockwise) return false;\n        } else {\n            if (right && !isClockwise || !right && isClockwise) return false;\n        }\n        offset = end;\n    }\n    return true;\n}\nfunction $7892dc06ffd23218$export$a1d138f4bd85f4b4(flatCoordinates, offset, endss, stride, right) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if (!$7892dc06ffd23218$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right)) return false;\n        if (ends.length) offset = ends[ends.length - 1];\n    }\n    return true;\n}\nfunction $7892dc06ffd23218$export$b71b604ddfc778c7(flatCoordinates, offset, ends, stride, right) {\n    right = right !== undefined ? right : false;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        const isClockwise = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride);\n        const reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n        if (reverse) (0, $155dc783a4ec227e$export$741858880c96b18c)(flatCoordinates, offset, end, stride);\n        offset = end;\n    }\n    return offset;\n}\nfunction $7892dc06ffd23218$export$ea9ed55fc2a85010(flatCoordinates, offset, endss, stride, right) {\n    for(let i = 0, ii = endss.length; i < ii; ++i)offset = $7892dc06ffd23218$export$b71b604ddfc778c7(flatCoordinates, offset, endss[i], stride, right);\n    return offset;\n}\nfunction $7892dc06ffd23218$export$cb72ae403d6e78e6(flatCoordinates, ends) {\n    const endss = [];\n    let offset = 0;\n    let prevEndIndex = 0;\n    let startOrientation;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        // classifies an array of rings into polygons with outer rings and holes\n        const orientation = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, 2);\n        if (startOrientation === undefined) startOrientation = orientation;\n        if (orientation === startOrientation) endss.push(ends.slice(prevEndIndex, i + 1));\n        else {\n            if (endss.length === 0) continue;\n            endss[endss.length - 1].push(ends[prevEndIndex]);\n        }\n        prevEndIndex = i + 1;\n        offset = end;\n    }\n    return endss;\n}\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */ class $40aa8d43bbe572bf$var$Polygon extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */ constructor(coordinates, layout, ends){\n        super();\n        /**\n     * @type {Array<number>}\n     * @private\n     */ this.ends_ = [];\n        /**\n     * @private\n     * @type {number}\n     */ this.flatInteriorPointRevision_ = -1;\n        /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */ this.flatInteriorPoint_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDeltaRevision_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.orientedRevision_ = -1;\n        /**\n     * @private\n     * @type {Array<number>|null}\n     */ this.orientedFlatCoordinates_ = null;\n        if (layout !== undefined && ends) {\n            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n            this.ends_ = ends;\n        } else this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ coordinates, layout);\n    }\n    /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */ appendLinearRing(linearRing) {\n        if (!this.flatCoordinates) this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n        else (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, linearRing.getFlatCoordinates());\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   * @override\n   */ clone() {\n        const polygon = new $40aa8d43bbe572bf$var$Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        polygon.applyProperties(this);\n        return polygon;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$fbf31c8f2668ed5a)(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$5a48a0eefcf14992)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   * @override\n   */ containsXY(x, y) {\n        return (0, $239aa88e7a573859$export$ae868c0f6acc3355)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n    }\n    /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n    }\n    /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   * @override\n   */ getCoordinates(right) {\n        let flatCoordinates;\n        if (right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            (0, $7892dc06ffd23218$export$b71b604ddfc778c7)(flatCoordinates, 0, this.ends_, this.stride, right);\n        } else flatCoordinates = this.flatCoordinates;\n        return (0, $5454470599558ddd$export$cbb9596fc0f40db2)(flatCoordinates, 0, this.ends_, this.stride);\n    }\n    /**\n   * @return {Array<number>} Ends.\n   */ getEnds() {\n        return this.ends_;\n    }\n    /**\n   * @return {Array<number>} Interior point.\n   */ getFlatInteriorPoint() {\n        if (this.flatInteriorPointRevision_ != this.getRevision()) {\n            const flatCenter = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n            this.flatInteriorPoint_ = (0, $2166f19777f69377$export$50e3b25928a5e892)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n            this.flatInteriorPointRevision_ = this.getRevision();\n        }\n        return /** @type {import(\"../coordinate.js\").Coordinate} */ this.flatInteriorPoint_;\n    }\n    /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */ getInteriorPoint() {\n        return new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(this.getFlatInteriorPoint(), 'XYM');\n    }\n    /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */ getLinearRingCount() {\n        return this.ends_.length;\n    }\n    /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */ getLinearRing(index) {\n        if (index < 0 || this.ends_.length <= index) return null;\n        return new (0, $548636579b4087f2$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    }\n    /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */ getLinearRings() {\n        const layout = this.layout;\n        const flatCoordinates = this.flatCoordinates;\n        const ends = this.ends_;\n        const linearRings = [];\n        let offset = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const linearRing = new (0, $548636579b4087f2$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout);\n            linearRings.push(linearRing);\n            offset = end;\n        }\n        return linearRings;\n    }\n    /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */ getOrientedFlatCoordinates() {\n        if (this.orientedRevision_ != this.getRevision()) {\n            const flatCoordinates = this.flatCoordinates;\n            if ((0, $7892dc06ffd23218$export$f27cd06e85f4ba28)(flatCoordinates, 0, this.ends_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = (0, $7892dc06ffd23218$export$b71b604ddfc778c7)(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return /** @type {Array<number>} */ this.orientedFlatCoordinates_;\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   * @override\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        /** @type {Array<number>} */ const simplifiedFlatCoordinates = [];\n        /** @type {Array<number>} */ const simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$60a9904b67f8d51b)(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new $40aa8d43bbe572bf$var$Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */ getType() {\n        return 'Polygon';\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$76dcd8f8f83b6ddb)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n    }\n    /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 2);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        const ends = (0, $6b086aa46281540d$export$47c3746a74384d45)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    }\n}\nvar $40aa8d43bbe572bf$export$2e2bcd8739ae039 = $40aa8d43bbe572bf$var$Polygon;\nfunction $40aa8d43bbe572bf$export$f99d756c6d81ae3f(center, radius, n, sphereRadius) {\n    n = n ? n : 32;\n    /** @type {Array<number>} */ const flatCoordinates = [];\n    for(let i = 0; i < n; ++i)(0, $b998d41b678ed5d1$export$8b58be045bf06082)(flatCoordinates, (0, $fb75384508533d8f$export$cc800923e997bb8)(center, radius, 2 * Math.PI * i / n, sphereRadius));\n    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n    return new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, 'XY', [\n        flatCoordinates.length\n    ]);\n}\nfunction $40aa8d43bbe572bf$export$c16b671815801c75(extent) {\n    if ((0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(extent)) throw new Error('Cannot create polygon from empty extent');\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const flatCoordinates = [\n        minX,\n        minY,\n        minX,\n        maxY,\n        maxX,\n        maxY,\n        maxX,\n        minY,\n        minX,\n        minY\n    ];\n    return new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, 'XY', [\n        flatCoordinates.length\n    ]);\n}\nfunction $40aa8d43bbe572bf$export$2451009d645fb8c2(circle, sides, angle) {\n    sides = sides ? sides : 32;\n    const stride = circle.getStride();\n    const layout = circle.getLayout();\n    const center = circle.getCenter();\n    const arrayLength = stride * (sides + 1);\n    const flatCoordinates = new Array(arrayLength);\n    for(let i = 0; i < arrayLength; i += stride){\n        flatCoordinates[i] = 0;\n        flatCoordinates[i + 1] = 0;\n        for(let j = 2; j < stride; j++)flatCoordinates[i + j] = center[j];\n    }\n    const ends = [\n        flatCoordinates.length\n    ];\n    const polygon = new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, layout, ends);\n    $40aa8d43bbe572bf$export$87d6a1539a56e47f(polygon, center, circle.getRadius(), angle);\n    return polygon;\n}\nfunction $40aa8d43bbe572bf$export$87d6a1539a56e47f(polygon, center, radius, angle) {\n    const flatCoordinates = polygon.getFlatCoordinates();\n    const stride = polygon.getStride();\n    const sides = flatCoordinates.length / stride - 1;\n    const startAngle = angle ? angle : 0;\n    for(let i = 0; i <= sides; ++i){\n        const offset = i * stride;\n        const angle = startAngle + (0, $6b000a049d919fe5$export$ba467bec01d66def)(i, sides) * 2 * Math.PI / sides;\n        flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n        flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n    }\n    polygon.changed();\n}\n\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */ /**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */ /**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to\n * fit the extent into. Defaults to the size of the map the view is associated with.\n * If no map or multiple maps are connected to the view, provide the desired box size\n * (e.g. `map.getSize()`).\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */ /**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */ /**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */ /**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */ /**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateLayerStateExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\n */ /**\n * Default min zoom level for the map view.\n * @type {number}\n */ const $70364d0195659942$var$DEFAULT_MIN_ZOOM = 0;\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */ /***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */ /**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */ class $70364d0195659942$var$View extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {ViewOptions} [options] View options.\n   */ constructor(options){\n        super();\n        /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {ViewOnSignature<void>}\n     */ this.un;\n        options = Object.assign({}, options);\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.hints_ = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */ this.animations_ = [];\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.updateAnimationKey_;\n        /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */ this.projection_ = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, 'EPSG:3857');\n        /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */ this.viewportSize_ = [\n            100,\n            100\n        ];\n        /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */ this.targetCenter_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.targetResolution_;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.targetRotation_;\n        /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */ this.nextCenter_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.nextResolution_;\n        /**\n     * @private\n     * @type {number}\n     */ this.nextRotation_;\n        /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */ this.cancelAnchor_ = undefined;\n        if (options.projection) (0, $9c4744460e43e41b$export$ed949affbc7c4223)();\n        if (options.center) options.center = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.center, this.projection_);\n        if (options.extent) options.extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(options.extent, this.projection_);\n        this.applyOptions_(options);\n    }\n    /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */ applyOptions_(options) {\n        const properties = Object.assign({}, options);\n        for(const key in 0, $d35baefbe89be4c5$export$2e2bcd8739ae039)delete properties[key];\n        this.setProperties(properties, true);\n        const resolutionConstraintInfo = $70364d0195659942$export$c68d65f9148da196(options);\n        /**\n     * @private\n     * @type {number}\n     */ this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n        /**\n     * @private\n     * @type {number}\n     */ this.minResolution_ = resolutionConstraintInfo.minResolution;\n        /**\n     * @private\n     * @type {number}\n     */ this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n        /**\n     * @private\n     * @type {Array<number>|undefined}\n     */ this.resolutions_ = options.resolutions;\n        /**\n     * @type {Array<number>|undefined}\n     * @private\n     */ this.padding_ = options.padding;\n        /**\n     * @private\n     * @type {number}\n     */ this.minZoom_ = resolutionConstraintInfo.minZoom;\n        const centerConstraint = $70364d0195659942$export$964345001ee9ac52(options);\n        const resolutionConstraint = resolutionConstraintInfo.constraint;\n        const rotationConstraint = $70364d0195659942$export$4eeaa08dd550e3c0(options);\n        /**\n     * @private\n     * @type {Constraints}\n     */ this.constraints_ = {\n            center: centerConstraint,\n            resolution: resolutionConstraint,\n            rotation: rotationConstraint\n        };\n        this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n        this.setCenterInternal(options.center !== undefined ? options.center : null);\n        if (options.resolution !== undefined) this.setResolution(options.resolution);\n        else if (options.zoom !== undefined) this.setZoom(options.zoom);\n    }\n    /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */ get padding() {\n        return this.padding_;\n    }\n    set padding(padding) {\n        let oldPadding = this.padding_;\n        this.padding_ = padding;\n        const center = this.getCenterInternal();\n        if (center) {\n            const newPadding = padding || [\n                0,\n                0,\n                0,\n                0\n            ];\n            oldPadding = oldPadding || [\n                0,\n                0,\n                0,\n                0\n            ];\n            const resolution = this.getResolution();\n            const offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n            const offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n            this.setCenterInternal([\n                center[0] + offsetX,\n                center[1] - offsetY\n            ]);\n        }\n    }\n    /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */ getUpdatedOptions_(newOptions) {\n        const options = this.getProperties();\n        // preserve resolution (or zoom)\n        if (options.resolution !== undefined) options.resolution = this.getResolution();\n        else options.zoom = this.getZoom();\n        // preserve center\n        options.center = this.getCenterInternal();\n        // preserve rotation\n        options.rotation = this.getRotation();\n        return Object.assign({}, options, newOptions);\n    }\n    /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */ animate(var_args) {\n        if (this.isDef() && !this.getAnimating()) this.resolveConstraints(0);\n        const args = new Array(arguments.length);\n        for(let i = 0; i < args.length; ++i){\n            let options = arguments[i];\n            if (options.center) {\n                options = Object.assign({}, options);\n                options.center = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.center, this.getProjection());\n            }\n            if (options.anchor) {\n                options = Object.assign({}, options);\n                options.anchor = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.anchor, this.getProjection());\n            }\n            args[i] = options;\n        }\n        this.animateInternal.apply(this, args);\n    }\n    /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */ animateInternal(var_args) {\n        let animationCount = arguments.length;\n        let callback;\n        if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n            callback = arguments[animationCount - 1];\n            --animationCount;\n        }\n        let i = 0;\n        for(; i < animationCount && !this.isDef(); ++i){\n            // if view properties are not yet set, shortcut to the final state\n            const state = arguments[i];\n            if (state.center) this.setCenterInternal(state.center);\n            if (state.zoom !== undefined) this.setZoom(state.zoom);\n            else if (state.resolution) this.setResolution(state.resolution);\n            if (state.rotation !== undefined) this.setRotation(state.rotation);\n        }\n        if (i === animationCount) {\n            if (callback) $70364d0195659942$var$animationCallback(callback, true);\n            return;\n        }\n        let start = Date.now();\n        let center = this.targetCenter_.slice();\n        let resolution = this.targetResolution_;\n        let rotation = this.targetRotation_;\n        const series = [];\n        for(; i < animationCount; ++i){\n            const options = /** @type {AnimationOptions} */ arguments[i];\n            const animation = {\n                start: start,\n                complete: false,\n                anchor: options.anchor,\n                duration: options.duration !== undefined ? options.duration : 1000,\n                easing: options.easing || (0, $c7ccf7e681a9b333$export$9b47139b511b56e4),\n                callback: callback\n            };\n            if (options.center) {\n                animation.sourceCenter = center;\n                animation.targetCenter = options.center.slice();\n                center = animation.targetCenter;\n            }\n            if (options.zoom !== undefined) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = this.getResolutionForZoom(options.zoom);\n                resolution = animation.targetResolution;\n            } else if (options.resolution) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = options.resolution;\n                resolution = animation.targetResolution;\n            }\n            if (options.rotation !== undefined) {\n                animation.sourceRotation = rotation;\n                const delta = (0, $6b000a049d919fe5$export$ba467bec01d66def)(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n                animation.targetRotation = rotation + delta;\n                rotation = animation.targetRotation;\n            }\n            // check if animation is a no-op\n            if ($70364d0195659942$export$ee75376562060184(animation)) animation.complete = true;\n            else start += animation.duration;\n            series.push(animation);\n        }\n        this.animations_.push(series);\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, 1);\n        this.updateAnimations_();\n    }\n    /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */ getAnimating() {\n        return this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] > 0;\n    }\n    /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */ getInteracting() {\n        return this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING] > 0;\n    }\n    /**\n   * Cancel any ongoing animations.\n   * @api\n   */ cancelAnimations() {\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, -this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING]);\n        let anchor;\n        for(let i = 0, ii = this.animations_.length; i < ii; ++i){\n            const series = this.animations_[i];\n            if (series[0].callback) $70364d0195659942$var$animationCallback(series[0].callback, false);\n            if (!anchor) for(let j = 0, jj = series.length; j < jj; ++j){\n                const animation = series[j];\n                if (!animation.complete) {\n                    anchor = animation.anchor;\n                    break;\n                }\n            }\n        }\n        this.animations_.length = 0;\n        this.cancelAnchor_ = anchor;\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n    }\n    /**\n   * Update all animations.\n   */ updateAnimations_() {\n        if (this.updateAnimationKey_ !== undefined) {\n            cancelAnimationFrame(this.updateAnimationKey_);\n            this.updateAnimationKey_ = undefined;\n        }\n        if (!this.getAnimating()) return;\n        const now = Date.now();\n        let more = false;\n        for(let i = this.animations_.length - 1; i >= 0; --i){\n            const series = this.animations_[i];\n            let seriesComplete = true;\n            for(let j = 0, jj = series.length; j < jj; ++j){\n                const animation = series[j];\n                if (animation.complete) continue;\n                const elapsed = now - animation.start;\n                let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n                if (fraction >= 1) {\n                    animation.complete = true;\n                    fraction = 1;\n                } else seriesComplete = false;\n                const progress = animation.easing(fraction);\n                if (animation.sourceCenter) {\n                    const x0 = animation.sourceCenter[0];\n                    const y0 = animation.sourceCenter[1];\n                    const x1 = animation.targetCenter[0];\n                    const y1 = animation.targetCenter[1];\n                    this.nextCenter_ = animation.targetCenter;\n                    const x = x0 + progress * (x1 - x0);\n                    const y = y0 + progress * (y1 - y0);\n                    this.targetCenter_ = [\n                        x,\n                        y\n                    ];\n                }\n                if (animation.sourceResolution && animation.targetResolution) {\n                    const resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n                    if (animation.anchor) {\n                        const size = this.getViewportSize_(this.getRotation());\n                        const constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n                    }\n                    this.nextResolution_ = animation.targetResolution;\n                    this.targetResolution_ = resolution;\n                    this.applyTargetState_(true);\n                }\n                if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n                    const rotation = progress === 1 ? (0, $6b000a049d919fe5$export$ba467bec01d66def)(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n                    if (animation.anchor) {\n                        const constrainedRotation = this.constraints_.rotation(rotation, true);\n                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n                    }\n                    this.nextRotation_ = animation.targetRotation;\n                    this.targetRotation_ = rotation;\n                }\n                this.applyTargetState_(true);\n                more = true;\n                if (!animation.complete) break;\n            }\n            if (seriesComplete) {\n                this.animations_[i] = null;\n                this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, -1);\n                this.nextCenter_ = null;\n                this.nextResolution_ = NaN;\n                this.nextRotation_ = NaN;\n                const callback = series[0].callback;\n                if (callback) $70364d0195659942$var$animationCallback(callback, true);\n            }\n        }\n        // prune completed series\n        this.animations_ = this.animations_.filter(Boolean);\n        if (more && this.updateAnimationKey_ === undefined) this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n    }\n    /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */ calculateCenterRotate(rotation, anchor) {\n        let center;\n        const currentCenter = this.getCenterInternal();\n        if (currentCenter !== undefined) {\n            center = [\n                currentCenter[0] - anchor[0],\n                currentCenter[1] - anchor[1]\n            ];\n            (0, $1bd0a226f9a16141$export$bb628a54ab399bc9)(center, rotation - this.getRotation());\n            (0, $1bd0a226f9a16141$export$e16d8520af44a096)(center, anchor);\n        }\n        return center;\n    }\n    /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */ calculateCenterZoom(resolution, anchor) {\n        let center;\n        const currentCenter = this.getCenterInternal();\n        const currentResolution = this.getResolution();\n        if (currentCenter !== undefined && currentResolution !== undefined) {\n            const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n            const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n            center = [\n                x,\n                y\n            ];\n        }\n        return center;\n    }\n    /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */ getViewportSize_(rotation) {\n        const size = this.viewportSize_;\n        if (rotation) {\n            const w = size[0];\n            const h = size[1];\n            return [\n                Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n                Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation))\n            ];\n        }\n        return size;\n    }\n    /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */ setViewportSize(size) {\n        this.viewportSize_ = Array.isArray(size) ? size.slice() : [\n            100,\n            100\n        ];\n        if (!this.getAnimating()) this.resolveConstraints(0);\n    }\n    /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */ getCenter() {\n        const center = this.getCenterInternal();\n        if (!center) return center;\n        return (0, $9c4744460e43e41b$export$698f563af1ba02a5)(center, this.getProjection());\n    }\n    /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */ getCenterInternal() {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER);\n    }\n    /**\n   * @return {Constraints} Constraints.\n   */ getConstraints() {\n        return this.constraints_;\n    }\n    /**\n   * @return {boolean} Resolution constraint is set\n   */ getConstrainResolution() {\n        return this.get('constrainResolution');\n    }\n    /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */ getHints(hints) {\n        if (hints !== undefined) {\n            hints[0] = this.hints_[0];\n            hints[1] = this.hints_[1];\n            return hints;\n        }\n        return this.hints_.slice();\n    }\n    /**\n   * Calculate the extent for the current view state and the passed box size.\n   * @param {import(\"./size.js\").Size} [size] The pixel dimensions of the box\n   * into which the calculated extent should fit. Defaults to the size of the\n   * map the view is associated with.\n   * If no map or multiple maps are connected to the view, provide the desired\n   * box size (e.g. `map.getSize()`).\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */ calculateExtent(size) {\n        const extent = this.calculateExtentInternal(size);\n        return (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, this.getProjection());\n    }\n    /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */ calculateExtentInternal(size) {\n        size = size || this.getViewportSizeMinusPadding_();\n        const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ this.getCenterInternal();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(center, 'The view center is not defined');\n        const resolution = /** @type {!number} */ this.getResolution();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(resolution !== undefined, 'The view resolution is not defined');\n        const rotation = /** @type {!number} */ this.getRotation();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(rotation !== undefined, 'The view rotation is not defined');\n        return (0, $6da4c8ed3074c92b$export$13ba650faf8308)(center, resolution, rotation, size);\n    }\n    /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */ getMaxResolution() {\n        return this.maxResolution_;\n    }\n    /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */ getMinResolution() {\n        return this.minResolution_;\n    }\n    /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */ getMaxZoom() {\n        return /** @type {number} */ this.getZoomForResolution(this.minResolution_);\n    }\n    /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */ setMaxZoom(zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            maxZoom: zoom\n        }));\n    }\n    /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */ getMinZoom() {\n        return /** @type {number} */ this.getZoomForResolution(this.maxResolution_);\n    }\n    /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */ setMinZoom(zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            minZoom: zoom\n        }));\n    }\n    /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */ setConstrainResolution(enabled) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            constrainResolution: enabled\n        }));\n    }\n    /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */ getProjection() {\n        return this.projection_;\n    }\n    /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */ getResolution() {\n        return /** @type {number|undefined} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION);\n    }\n    /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */ getResolutions() {\n        return this.resolutions_;\n    }\n    /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */ getResolutionForExtent(extent, size) {\n        return this.getResolutionForExtentInternal((0, $9c4744460e43e41b$export$494be3a3a25689ca)(extent, this.getProjection()), size);\n    }\n    /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */ getResolutionForExtentInternal(extent, size) {\n        size = size || this.getViewportSizeMinusPadding_();\n        const xResolution = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / size[0];\n        const yResolution = (0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / size[1];\n        return Math.max(xResolution, yResolution);\n    }\n    /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */ getResolutionForValueFunction(power) {\n        power = power || 2;\n        const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        const minResolution = this.minResolution_;\n        const max = Math.log(maxResolution / minResolution) / Math.log(power);\n        return(/**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */ function(value) {\n            const resolution = maxResolution / Math.pow(power, value * max);\n            return resolution;\n        });\n    }\n    /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */ getRotation() {\n        return /** @type {number} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION);\n    }\n    /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */ getValueForResolutionFunction(power) {\n        const logPower = Math.log(power || 2);\n        const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        const minResolution = this.minResolution_;\n        const max = Math.log(maxResolution / minResolution) / logPower;\n        return(/**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */ function(resolution) {\n            const value = Math.log(maxResolution / resolution) / logPower / max;\n            return value;\n        });\n    }\n    /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */ getViewportSizeMinusPadding_(rotation) {\n        let size = this.getViewportSize_(rotation);\n        const padding = this.padding_;\n        if (padding) size = [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2]\n        ];\n        return size;\n    }\n    /**\n   * @return {State} View state.\n   */ getState() {\n        const projection = this.getProjection();\n        const resolution = this.getResolution();\n        const rotation = this.getRotation();\n        let center = /** @type {import(\"./coordinate.js\").Coordinate} */ this.getCenterInternal();\n        const padding = this.padding_;\n        if (padding) {\n            const reducedSize = this.getViewportSizeMinusPadding_();\n            center = $70364d0195659942$var$calculateCenterOn(center, this.getViewportSize_(), [\n                reducedSize[0] / 2 + padding[3],\n                reducedSize[1] / 2 + padding[0]\n            ], resolution, rotation);\n        }\n        return {\n            center: center.slice(0),\n            projection: projection !== undefined ? projection : null,\n            resolution: resolution,\n            nextCenter: this.nextCenter_,\n            nextResolution: this.nextResolution_,\n            nextRotation: this.nextRotation_,\n            rotation: rotation,\n            zoom: this.getZoom()\n        };\n    }\n    /**\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */ getViewStateAndExtent() {\n        return {\n            viewState: this.getState(),\n            extent: this.calculateExtent()\n        };\n    }\n    /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */ getZoom() {\n        let zoom;\n        const resolution = this.getResolution();\n        if (resolution !== undefined) zoom = this.getZoomForResolution(resolution);\n        return zoom;\n    }\n    /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */ getZoomForResolution(resolution) {\n        let offset = this.minZoom_ || 0;\n        let max, zoomFactor;\n        if (this.resolutions_) {\n            const nearest = (0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(this.resolutions_, resolution, 1);\n            offset = nearest;\n            max = this.resolutions_[nearest];\n            if (nearest == this.resolutions_.length - 1) zoomFactor = 2;\n            else zoomFactor = max / this.resolutions_[nearest + 1];\n        } else {\n            max = this.maxResolution_;\n            zoomFactor = this.zoomFactor_;\n        }\n        return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n    }\n    /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */ getResolutionForZoom(zoom) {\n        if (this.resolutions_?.length) {\n            if (this.resolutions_.length === 1) return this.resolutions_[0];\n            const baseLevel = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(Math.floor(zoom), 0, this.resolutions_.length - 2);\n            const zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n            return this.resolutions_[baseLevel] / Math.pow(zoomFactor, (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(zoom - baseLevel, 0, 1));\n        }\n        return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n    /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */ fit(geometryOrExtent, options) {\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */ let geometry;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ geometryOrExtent.getSimplifiedGeometry === 'function', 'Invalid extent or geometry provided as `geometry`');\n        if (Array.isArray(geometryOrExtent)) {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(!(0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(geometryOrExtent), 'Cannot fit empty extent provided as `geometry`');\n            const extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(geometryOrExtent, this.getProjection());\n            geometry = (0, $40aa8d43bbe572bf$export$c16b671815801c75)(extent);\n        } else if (geometryOrExtent.getType() === 'Circle') {\n            const extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(geometryOrExtent.getExtent(), this.getProjection());\n            geometry = (0, $40aa8d43bbe572bf$export$c16b671815801c75)(extent);\n            geometry.rotate(this.getRotation(), (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(extent));\n        } else {\n            const userProjection = (0, $9c4744460e43e41b$export$3973b77d5f6f2790)();\n            if (userProjection) geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometryOrExtent.clone().transform(userProjection, this.getProjection());\n            else geometry = geometryOrExtent;\n        }\n        this.fitInternal(geometry, options);\n    }\n    /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */ rotatedExtentForGeometry(geometry) {\n        const rotation = this.getRotation();\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(-rotation);\n        const coords = geometry.getFlatCoordinates();\n        const stride = geometry.getStride();\n        let minRotX = Infinity;\n        let minRotY = Infinity;\n        let maxRotX = -Infinity;\n        let maxRotY = -Infinity;\n        for(let i = 0, ii = coords.length; i < ii; i += stride){\n            const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n            const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n            minRotX = Math.min(minRotX, rotX);\n            minRotY = Math.min(minRotY, rotY);\n            maxRotX = Math.max(maxRotX, rotX);\n            maxRotY = Math.max(maxRotY, rotY);\n        }\n        return [\n            minRotX,\n            minRotY,\n            maxRotX,\n            maxRotY\n        ];\n    }\n    /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */ fitInternal(geometry, options) {\n        options = options || {};\n        let size = options.size;\n        if (!size) size = this.getViewportSizeMinusPadding_();\n        const padding = options.padding !== undefined ? options.padding : [\n            0,\n            0,\n            0,\n            0\n        ];\n        const nearest = options.nearest !== undefined ? options.nearest : false;\n        let minResolution;\n        if (options.minResolution !== undefined) minResolution = options.minResolution;\n        else if (options.maxZoom !== undefined) minResolution = this.getResolutionForZoom(options.maxZoom);\n        else minResolution = 0;\n        const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n        // calculate resolution\n        let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2]\n        ]);\n        resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n        // calculate center\n        const rotation = this.getRotation();\n        const sinAngle = Math.sin(rotation);\n        const cosAngle = Math.cos(rotation);\n        const centerRot = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(rotatedExtent);\n        centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n        centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n        const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n        const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n        const center = this.getConstrainedCenter([\n            centerX,\n            centerY\n        ], resolution);\n        const callback = options.callback ? options.callback : (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n        if (options.duration !== undefined) this.animateInternal({\n            resolution: resolution,\n            center: center,\n            duration: options.duration,\n            easing: options.easing\n        }, callback);\n        else {\n            this.targetResolution_ = resolution;\n            this.targetCenter_ = center;\n            this.applyTargetState_(false, true);\n            $70364d0195659942$var$animationCallback(callback, true);\n        }\n    }\n    /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */ centerOn(coordinate, size, position) {\n        this.centerOnInternal((0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(coordinate, this.getProjection()), size, position);\n    }\n    /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */ centerOnInternal(coordinate, size, position) {\n        this.setCenterInternal($70364d0195659942$var$calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n    }\n    /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */ calculateCenterShift(center, resolution, rotation, size) {\n        let centerShift;\n        const padding = this.padding_;\n        if (padding && center) {\n            const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n            const shiftedCenter = $70364d0195659942$var$calculateCenterOn(center, size, [\n                reducedSize[0] / 2 + padding[3],\n                reducedSize[1] / 2 + padding[0]\n            ], resolution, rotation);\n            centerShift = [\n                center[0] - shiftedCenter[0],\n                center[1] - shiftedCenter[1]\n            ];\n        }\n        return centerShift;\n    }\n    /**\n   * @return {boolean} Is defined.\n   */ isDef() {\n        return !!this.getCenterInternal() && this.getResolution() !== undefined;\n    }\n    /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */ adjustCenter(deltaCoordinates) {\n        const center = (0, $9c4744460e43e41b$export$698f563af1ba02a5)(this.targetCenter_, this.getProjection());\n        this.setCenter([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1]\n        ]);\n    }\n    /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */ adjustCenterInternal(deltaCoordinates) {\n        const center = this.targetCenter_;\n        this.setCenterInternal([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1]\n        ]);\n    }\n    /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */ adjustResolution(ratio, anchor) {\n        anchor = anchor && (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.adjustResolutionInternal(ratio, anchor);\n    }\n    /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */ adjustResolutionInternal(ratio, anchor) {\n        const isMoving = this.getAnimating() || this.getInteracting();\n        const size = this.getViewportSize_(this.getRotation());\n        const newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n        if (anchor) this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n        this.targetResolution_ *= ratio;\n        this.applyTargetState_();\n    }\n    /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */ adjustZoom(delta, anchor) {\n        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n    }\n    /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */ adjustRotation(delta, anchor) {\n        if (anchor) anchor = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.adjustRotationInternal(delta, anchor);\n    }\n    /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */ adjustRotationInternal(delta, anchor) {\n        const isMoving = this.getAnimating() || this.getInteracting();\n        const newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n        if (anchor) this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n        this.targetRotation_ += delta;\n        this.applyTargetState_();\n    }\n    /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */ setCenter(center) {\n        this.setCenterInternal(center ? (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(center, this.getProjection()) : center);\n    }\n    /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */ setCenterInternal(center) {\n        this.targetCenter_ = center;\n        this.applyTargetState_();\n    }\n    /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */ setHint(hint, delta) {\n        this.hints_[hint] += delta;\n        this.changed();\n        return this.hints_[hint];\n    }\n    /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */ setResolution(resolution) {\n        this.targetResolution_ = resolution;\n        this.applyTargetState_();\n    }\n    /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */ setRotation(rotation) {\n        this.targetRotation_ = rotation;\n        this.applyTargetState_();\n    }\n    /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */ setZoom(zoom) {\n        this.setResolution(this.getResolutionForZoom(zoom));\n    }\n    /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */ applyTargetState_(doNotCancelAnims, forceMoving) {\n        const isMoving = this.getAnimating() || this.getInteracting() || forceMoving;\n        // compute rotation\n        const newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n        const size = this.getViewportSize_(newRotation);\n        const newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION) !== newRotation) this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION, newRotation);\n        if (this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION) !== newResolution) {\n            this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION, newResolution);\n            this.set('zoom', this.getZoom(), true);\n        }\n        if (!newCenter || !this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER) || !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER), newCenter)) this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER, newCenter);\n        if (this.getAnimating() && !doNotCancelAnims) this.cancelAnimations();\n        this.cancelAnchor_ = undefined;\n    }\n    /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */ resolveConstraints(duration, resolutionDirection, anchor) {\n        duration = duration !== undefined ? duration : 200;\n        const direction = resolutionDirection || 0;\n        const newRotation = this.constraints_.rotation(this.targetRotation_);\n        const size = this.getViewportSize_(newRotation);\n        const newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (duration === 0 && !this.cancelAnchor_) {\n            this.targetResolution_ = newResolution;\n            this.targetRotation_ = newRotation;\n            this.targetCenter_ = newCenter;\n            this.applyTargetState_();\n            return;\n        }\n        anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n        this.cancelAnchor_ = undefined;\n        if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(this.getCenterInternal(), newCenter)) {\n            if (this.getAnimating()) this.cancelAnimations();\n            this.animateInternal({\n                rotation: newRotation,\n                center: newCenter,\n                resolution: newResolution,\n                duration: duration,\n                easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0),\n                anchor: anchor\n            });\n        }\n    }\n    /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */ beginInteraction() {\n        this.resolveConstraints(0);\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING, 1);\n    }\n    /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */ endInteraction(duration, resolutionDirection, anchor) {\n        anchor = anchor && (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.endInteractionInternal(duration, resolutionDirection, anchor);\n    }\n    /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */ endInteractionInternal(duration, resolutionDirection, anchor) {\n        if (!this.getInteracting()) return;\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING, -1);\n        this.resolveConstraints(duration, resolutionDirection, anchor);\n    }\n    /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */ getConstrainedCenter(targetCenter, targetResolution) {\n        const size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.center(targetCenter, targetResolution || this.getResolution(), size);\n    }\n    /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */ getConstrainedZoom(targetZoom, direction) {\n        const targetRes = this.getResolutionForZoom(targetZoom);\n        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, direction));\n    }\n    /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */ getConstrainedResolution(targetResolution, direction) {\n        direction = direction || 0;\n        const size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.resolution(targetResolution, direction, size);\n    }\n}\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */ function $70364d0195659942$var$animationCallback(callback, returnValue) {\n    setTimeout(function() {\n        callback(returnValue);\n    }, 0);\n}\nfunction $70364d0195659942$export$964345001ee9ac52(options) {\n    if (options.extent !== undefined) {\n        const smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n        return (0, $b21a6e049949bb31$export$c2f0af2c946f6897)(options.extent, options.constrainOnlyCenter, smooth);\n    }\n    const projection = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, 'EPSG:3857');\n    if (options.multiWorld !== true && projection.isGlobal()) {\n        const extent = projection.getExtent().slice();\n        extent[0] = -Infinity;\n        extent[2] = Infinity;\n        return (0, $b21a6e049949bb31$export$c2f0af2c946f6897)(extent, false, false);\n    }\n    return 0, $b21a6e049949bb31$export$f883a24d5edde77c;\n}\nfunction $70364d0195659942$export$c68d65f9148da196(options) {\n    let resolutionConstraint;\n    let maxResolution;\n    let minResolution;\n    // TODO: move these to be ol constants\n    // see https://github.com/openlayers/openlayers/issues/2076\n    const defaultMaxZoom = 28;\n    const defaultZoomFactor = 2;\n    let minZoom = options.minZoom !== undefined ? options.minZoom : $70364d0195659942$var$DEFAULT_MIN_ZOOM;\n    let maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n    const zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n    const multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n    const smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n    const showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n    const projection = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, 'EPSG:3857');\n    const projExtent = projection.getExtent();\n    let constrainOnlyCenter = options.constrainOnlyCenter;\n    let extent = options.extent;\n    if (!multiWorld && !extent && projection.isGlobal()) {\n        constrainOnlyCenter = false;\n        extent = projExtent;\n    }\n    if (options.resolutions !== undefined) {\n        const resolutions = options.resolutions;\n        maxResolution = resolutions[minZoom];\n        minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n        if (options.constrainResolution) resolutionConstraint = (0, $bac43a1f4a628548$export$d65a517690fc4385)(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        else resolutionConstraint = (0, $bac43a1f4a628548$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n        // calculate the default min and max resolution\n        const size = !projExtent ? 360 * (0, $03edbd434a9e6608$export$1482081eec883108).degrees / projection.getMetersPerUnit() : Math.max((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projExtent), (0, $6da4c8ed3074c92b$export$c08559766941f856)(projExtent));\n        const defaultMaxResolution = size / (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c) / Math.pow(defaultZoomFactor, $70364d0195659942$var$DEFAULT_MIN_ZOOM);\n        const defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - $70364d0195659942$var$DEFAULT_MIN_ZOOM);\n        // user provided maxResolution takes precedence\n        maxResolution = options.maxResolution;\n        if (maxResolution !== undefined) minZoom = 0;\n        else maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n        // user provided minResolution takes precedence\n        minResolution = options.minResolution;\n        if (minResolution === undefined) {\n            if (options.maxZoom !== undefined) {\n                if (options.maxResolution !== undefined) minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n                else minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n            } else minResolution = defaultMinResolution;\n        }\n        // given discrete zoom levels, minResolution may be different than provided\n        maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n        if (options.constrainResolution) resolutionConstraint = (0, $bac43a1f4a628548$export$22ac0f6b219de91a)(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        else resolutionConstraint = (0, $bac43a1f4a628548$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n    return {\n        constraint: resolutionConstraint,\n        maxResolution: maxResolution,\n        minResolution: minResolution,\n        minZoom: minZoom,\n        zoomFactor: zoomFactor\n    };\n}\nfunction $70364d0195659942$export$4eeaa08dd550e3c0(options) {\n    const enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n    if (enableRotation) {\n        const constrainRotation = options.constrainRotation;\n        if (constrainRotation === undefined || constrainRotation === true) return (0, $d65f0a322291d127$export$17a6e6f3448b17e8)();\n        if (constrainRotation === false) return 0, $d65f0a322291d127$export$f883a24d5edde77c;\n        if (typeof constrainRotation === 'number') return (0, $d65f0a322291d127$export$9ba78806de831083)(constrainRotation);\n        return 0, $d65f0a322291d127$export$f883a24d5edde77c;\n    }\n    return 0, $d65f0a322291d127$export$e20fbacbb41798b;\n}\nfunction $70364d0195659942$export$ee75376562060184(animation) {\n    if (animation.sourceCenter && animation.targetCenter) {\n        if (!(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(animation.sourceCenter, animation.targetCenter)) return false;\n    }\n    if (animation.sourceResolution !== animation.targetResolution) return false;\n    if (animation.sourceRotation !== animation.targetRotation) return false;\n    return true;\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */ function $70364d0195659942$var$calculateCenterOn(coordinate, size, position, resolution, rotation) {\n    // calculate rotated position\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    const centerX = rotX * cosAngle - rotY * sinAngle;\n    const centerY = rotY * cosAngle + rotX * sinAngle;\n    return [\n        centerX,\n        centerY\n    ];\n}\nvar $70364d0195659942$export$2e2bcd8739ae039 = $70364d0195659942$var$View;\n\n\n\n\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */ /**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */ /***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */ /**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */ /**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */ /**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */ class $534f30fce11effcd$var$Layer extends (0, $57c5f0299cb9b82f$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options<SourceType>} options Layer options.\n   */ constructor(options){\n        const baseOptions = Object.assign({}, options);\n        delete baseOptions.source;\n        super(baseOptions);\n        /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {LayerOnSignature<void>}\n     */ this.un;\n        /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */ this.mapPrecomposeKey_ = null;\n        /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */ this.mapRenderKey_ = null;\n        /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */ this.sourceChangeKey_ = null;\n        /**\n     * @private\n     * @type {RendererType}\n     */ this.renderer_ = null;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.sourceReady_ = false;\n        /**\n     * @protected\n     * @type {boolean}\n     */ this.rendered = false;\n        // Overwrite default render method with a custom one\n        if (options.render) this.render = options.render;\n        if (options.map) this.setMap(options.map);\n        this.addChangeListener((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE, this.handleSourcePropertyChange_);\n        const source = options.source ? /** @type {SourceType} */ options.source : null;\n        this.setSource(source);\n    }\n    /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   * @override\n   */ getLayersArray(array) {\n        array = array ? array : [];\n        array.push(this);\n        return array;\n    }\n    /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   * @override\n   */ getLayerStatesArray(states) {\n        states = states ? states : [];\n        states.push(this.getLayerState());\n        return states;\n    }\n    /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */ getSource() {\n        return /** @type {SourceType} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE) || null;\n    }\n    /**\n   * @return {SourceType|null} The source being rendered.\n   */ getRenderSource() {\n        return this.getSource();\n    }\n    /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   * @override\n   */ getSourceState() {\n        const source = this.getSource();\n        return !source ? 'undefined' : source.getState();\n    }\n    /**\n   * @private\n   */ handleSourceChange_() {\n        this.changed();\n        if (this.sourceReady_ || this.getSource().getState() !== 'ready') return;\n        this.sourceReady_ = true;\n        this.dispatchEvent('sourceready');\n    }\n    /**\n   * @private\n   */ handleSourcePropertyChange_() {\n        if (this.sourceChangeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.sourceChangeKey_);\n            this.sourceChangeKey_ = null;\n        }\n        this.sourceReady_ = false;\n        const source = this.getSource();\n        if (source) {\n            this.sourceChangeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(source, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleSourceChange_, this);\n            if (source.getState() === 'ready') {\n                this.sourceReady_ = true;\n                setTimeout(()=>{\n                    this.dispatchEvent('sourceready');\n                }, 0);\n            }\n        }\n        this.changed();\n    }\n    /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */ getFeatures(pixel) {\n        if (!this.renderer_) return Promise.resolve([]);\n        return this.renderer_.getFeatures(pixel);\n    }\n    /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */ getData(pixel) {\n        if (!this.renderer_ || !this.rendered) return null;\n        return this.renderer_.getData(pixel);\n    }\n    /**\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\n   * extent, not set to `visible: false`, and not inside a layer group that is set\n   * to `visible: false`.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {boolean} The layer is visible in the map view.\n   * @api\n   */ isVisible(view) {\n        let frameState;\n        const map = this.getMapInternal();\n        if (!view && map) view = map.getView();\n        if (view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039)) frameState = {\n            viewState: view.getState(),\n            extent: view.calculateExtent()\n        };\n        else frameState = view;\n        if (!frameState.layerStatesArray && map) frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n        let layerState;\n        if (frameState.layerStatesArray) {\n            layerState = frameState.layerStatesArray.find((layerState)=>layerState.layer === this);\n            if (!layerState) return false;\n        } else layerState = this.getLayerState();\n        const layerExtent = this.getExtent();\n        return $534f30fce11effcd$export$acb1e9cb9ce4ca56(layerState, frameState.viewState) && (!layerExtent || (0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(layerExtent, frameState.extent));\n    }\n    /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */ getAttributions(view) {\n        if (!this.isVisible(view)) return [];\n        const getAttributions = this.getSource()?.getAttributions();\n        if (!getAttributions) return [];\n        const frameState = view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039) ? view.getViewStateAndExtent() : view;\n        let attributions = getAttributions(frameState);\n        if (!Array.isArray(attributions)) attributions = [\n            attributions\n        ];\n        return attributions;\n    }\n    /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement|null} The rendered element.\n   */ render(frameState, target) {\n        const layerRenderer = this.getRenderer();\n        if (layerRenderer.prepareFrame(frameState)) {\n            this.rendered = true;\n            return layerRenderer.renderFrame(frameState, target);\n        }\n        return null;\n    }\n    /**\n   * Called when a layer is not visible during a map render.\n   */ unrender() {\n        this.rendered = false;\n    }\n    /** @return {string} Declutter */ getDeclutter() {\n        return undefined;\n    }\n    /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\n   */ renderDeclutter(frameState, layerState) {}\n    /**\n   * When the renderer follows a layout -> render approach, do the final rendering here.\n   * @param {import('../Map.js').FrameState} frameState Frame state\n   */ renderDeferred(frameState) {\n        const layerRenderer = this.getRenderer();\n        if (!layerRenderer) return;\n        layerRenderer.renderDeferred(frameState);\n    }\n    /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */ setMapInternal(map) {\n        if (!map) this.unrender();\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAP, map);\n    }\n    /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */ getMapInternal() {\n        return this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAP);\n    }\n    /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */ setMap(map) {\n        if (this.mapPrecomposeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.mapPrecomposeKey_);\n            this.mapPrecomposeKey_ = null;\n        }\n        if (!map) this.changed();\n        if (this.mapRenderKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.mapRenderKey_);\n            this.mapRenderKey_ = null;\n        }\n        if (map) {\n            this.mapPrecomposeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(map, (0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRECOMPOSE, this.handlePrecompose_, this);\n            this.mapRenderKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, map.render, map);\n            this.changed();\n        }\n    }\n    /**\n   * @param {import(\"../events/Event.js\").default} renderEvent Render event\n   * @private\n   */ handlePrecompose_(renderEvent) {\n        const layerStatesArray = /** @type {import(\"../render/Event.js\").default} */ renderEvent.frameState.layerStatesArray;\n        const layerState = this.getLayerState(false);\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!layerStatesArray.some((arrayLayerState)=>arrayLayerState.layer === layerState.layer), 'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.');\n        layerStatesArray.push(layerState);\n    }\n    /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */ setSource(source) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE, source);\n    }\n    /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */ getRenderer() {\n        if (!this.renderer_) this.renderer_ = this.createRenderer();\n        return this.renderer_;\n    }\n    /**\n   * @return {boolean} The layer has a renderer.\n   */ hasRenderer() {\n        return !!this.renderer_;\n    }\n    /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */ createRenderer() {\n        return null;\n    }\n    /**\n   * This will clear the renderer so that a new one can be created next time it is needed\n   */ clearRenderer() {\n        if (this.renderer_) {\n            this.renderer_.dispose();\n            delete this.renderer_;\n        }\n    }\n    /**\n   * Clean up.\n   * @override\n   */ disposeInternal() {\n        this.clearRenderer();\n        this.setSource(null);\n        super.disposeInternal();\n    }\n}\nfunction $534f30fce11effcd$export$acb1e9cb9ce4ca56(layerState, viewState) {\n    if (!layerState.visible) return false;\n    const resolution = viewState.resolution;\n    if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) return false;\n    const zoom = viewState.zoom;\n    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nvar $534f30fce11effcd$export$2e2bcd8739ae039 = $534f30fce11effcd$var$Layer;\n\n\n/**\n * @module ol/layer/TileProperty\n */ /**\n * @enum {string}\n */ var $e4c61536de922b84$export$2e2bcd8739ae039 = {\n    PRELOAD: 'preload',\n    USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError'\n};\n\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */ /**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */ /**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */ class $93be2de6a052f587$var$BaseTileLayer extends (0, $534f30fce11effcd$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */ constructor(options){\n        options = options ? options : {};\n        const baseOptions = Object.assign({}, options);\n        const cacheSize = options.cacheSize;\n        delete options.cacheSize;\n        delete baseOptions.preload;\n        delete baseOptions.useInterimTilesOnError;\n        super(baseOptions);\n        /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */ this.un;\n        /**\n     * @type {number|undefined}\n     * @private\n     */ this.cacheSize_ = cacheSize;\n        this.setPreload(options.preload !== undefined ? options.preload : 0);\n        this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);\n    }\n    /**\n   * @return {number|undefined} The suggested cache size\n   * @protected\n   */ getCacheSize() {\n        return this.cacheSize_;\n    }\n    /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */ getPreload() {\n        return /** @type {number} */ this.get((0, $e4c61536de922b84$export$2e2bcd8739ae039).PRELOAD);\n    }\n    /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */ setPreload(preload) {\n        this.set((0, $e4c61536de922b84$export$2e2bcd8739ae039).PRELOAD, preload);\n    }\n    /**\n   * Deprecated.  Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */ getUseInterimTilesOnError() {\n        return /** @type {boolean} */ this.get((0, $e4c61536de922b84$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR);\n    }\n    /**\n   * Deprecated.  Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */ setUseInterimTilesOnError(useInterimTilesOnError) {\n        this.set((0, $e4c61536de922b84$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n    }\n    /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */ getData(pixel) {\n        return super.getData(pixel);\n    }\n}\nvar $93be2de6a052f587$export$2e2bcd8739ae039 = $93be2de6a052f587$var$BaseTileLayer;\n\n\n/**\n * @module ol/renderer/canvas/TileLayer\n */ /**\n * @module ol/renderer/canvas/Layer\n */ /**\n * @module ol/renderer/Layer\n */ \n\n\n\nconst $cb18cdefd702a327$var$maxStaleKeys = 5;\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */ class $cb18cdefd702a327$var$LayerRenderer extends (0, $1f093ab5083c8a1f$export$2e2bcd8739ae039) {\n    /**\n   * @param {LayerType} layer Layer.\n   */ constructor(layer){\n        super();\n        /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */ this.ready = true;\n        /** @private */ this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n        /**\n     * @private\n     * @type {LayerType}\n     */ this.layer_ = layer;\n        /**\n     * @type {Array<string>}\n     * @private\n     */ this.staleKeys_ = new Array();\n        /**\n     * @type {number}\n     * @protected\n     */ this.maxStaleKeys = $cb18cdefd702a327$var$maxStaleKeys;\n    }\n    /**\n   * @return {Array<string>} Get the list of stale keys.\n   */ getStaleKeys() {\n        return this.staleKeys_;\n    }\n    /**\n   * @param {string} key The new stale key.\n   */ prependStaleKey(key) {\n        this.staleKeys_.unshift(key);\n        if (this.staleKeys_.length > this.maxStaleKeys) this.staleKeys_.length = this.maxStaleKeys;\n    }\n    /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */ getFeatures(pixel) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */ getData(pixel) {\n        return null;\n    }\n    /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */ prepareFrame(frameState) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Render the layer.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */ renderFrame(frameState, target) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n        return undefined;\n    }\n    /**\n   * @return {LayerType} Layer.\n   */ getLayer() {\n        return this.layer_;\n    }\n    /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */ handleFontsChanged() {}\n    /**\n   * Handle changes in image state.\n   * @param {import(\"../events/Event.js\").default} event Image change event.\n   * @private\n   */ handleImageChange_(event) {\n        const image = /** @type {import(\"../Image.js\").default} */ event.target;\n        if (image.getState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED || image.getState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) this.renderIfReadyAndVisible();\n    }\n    /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import(\"../Image.js\").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */ loadImage(image) {\n        let imageState = image.getState();\n        if (imageState != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED && imageState != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) image.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.boundHandleImageChange_);\n        if (imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) {\n            image.load();\n            imageState = image.getState();\n        }\n        return imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n    }\n    /**\n   * @protected\n   */ renderIfReadyAndVisible() {\n        const layer = this.getLayer();\n        if (layer && layer.getVisible() && layer.getSourceState() === 'ready') layer.changed();\n    }\n    /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */ renderDeferred(frameState) {}\n    /**\n   * Clean up.\n   * @override\n   */ disposeInternal() {\n        delete this.layer_;\n        super.disposeInternal();\n    }\n}\nvar $cb18cdefd702a327$export$2e2bcd8739ae039 = $cb18cdefd702a327$var$LayerRenderer;\n\n\n/**\n * @module ol/render/Event\n */ \nclass $b80dddceb0c42ad4$var$RenderEvent extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */ constructor(type, inversePixelTransform, frameState, context){\n        super(type);\n        /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */ this.inversePixelTransform = inversePixelTransform;\n        /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */ this.frameState = frameState;\n        /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */ this.context = context;\n    }\n}\nvar $b80dddceb0c42ad4$export$2e2bcd8739ae039 = $b80dddceb0c42ad4$var$RenderEvent;\n\n\n\n/**\n * @module ol/render/canvas/ZIndexContext\n */ \n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */ /**\n * @extends {CanvasRenderingContext2D}\n */ class $c1cb593c98d2cbd0$var$ZIndexContext {\n    constructor(){\n        /**\n     * @private\n     * @type {Array<Array<*>>}\n     */ this.instructions_ = [];\n        /**\n     * @type {number}\n     */ this.zIndex = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.offset_ = 0;\n        /**\n     * @private\n     * @type {ZIndexContextProxy}\n     */ this.context_ = /** @type {ZIndexContextProxy} */ new Proxy((0, $075f937d7366f1a2$export$fcb72ce088a6632c)(), {\n            get: (target, property)=>{\n                if (typeof /** @type {*} */ (0, $075f937d7366f1a2$export$fcb72ce088a6632c)()[property] !== 'function') // we only accept calling functions on the proxy, not accessing properties\n                return undefined;\n                if (!this.instructions_[this.zIndex + this.offset_]) this.instructions_[this.zIndex + this.offset_] = [];\n                this.instructions_[this.zIndex + this.offset_].push(property);\n                return this.pushMethodArgs_;\n            },\n            set: (target, property, value)=>{\n                if (!this.instructions_[this.zIndex + this.offset_]) this.instructions_[this.zIndex + this.offset_] = [];\n                this.instructions_[this.zIndex + this.offset_].push(property, value);\n                return true;\n            }\n        });\n    }\n    /**\n   * @private\n   * @param {...*} args Args.\n   * @return {ZIndexContext} This.\n   */ pushMethodArgs_ = (...args)=>{\n        this.instructions_[this.zIndex + this.offset_].push(args);\n        return this;\n    };\n    /**\n   * Push a function that renders to the context directly.\n   * @param {function(CanvasRenderingContext2D): void} render Function.\n   */ pushFunction(render) {\n        this.instructions_[this.zIndex + this.offset_].push(render);\n    }\n    /**\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\n   * @return {ZIndexContextProxy} Context.\n   */ getContext() {\n        return this.context_;\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   */ draw(context) {\n        this.instructions_.forEach((instructionsAtIndex)=>{\n            for(let i = 0, ii = instructionsAtIndex.length; i < ii; ++i){\n                const property = instructionsAtIndex[i];\n                if (typeof property === 'function') {\n                    property(context);\n                    continue;\n                }\n                const instructionAtIndex = instructionsAtIndex[++i];\n                if (typeof /** @type {*} */ context[property] === 'function') /** @type {*} */ context[property](...instructionAtIndex);\n                else {\n                    if (typeof instructionAtIndex === 'function') {\n                        /** @type {*} */ context[property] = instructionAtIndex(context);\n                        continue;\n                    }\n                    /** @type {*} */ context[property] = instructionAtIndex;\n                }\n            }\n        });\n    }\n    clear() {\n        this.instructions_.length = 0;\n        this.zIndex = 0;\n        this.offset_ = 0;\n    }\n    /**\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\n   * avoid conflicting context.clip() or context.save()/restore() calls.\n   */ offset() {\n        this.offset_ = this.instructions_.length;\n        this.zIndex = 0;\n    }\n}\nvar $c1cb593c98d2cbd0$export$2e2bcd8739ae039 = $c1cb593c98d2cbd0$var$ZIndexContext;\n\n\n\n/**\n * @module ol/color\n */ /**\n * Cylindrical CIE LUV\n *\n * @module color-space/lchuv\n */ /**\n * CIE LUV (C'est la vie)\n *\n * @module color-space/luv\n */ /**\n * CIE XYZ\n *\n * @module  color-space/xyz\n */ /**\n * RGB space.\n *\n * @module  color-space/rgb\n */ var $3751ab4954229b70$export$2e2bcd8739ae039 = {\n    name: 'rgb',\n    min: [\n        0,\n        0,\n        0\n    ],\n    max: [\n        255,\n        255,\n        255\n    ],\n    channel: [\n        'red',\n        'green',\n        'blue'\n    ],\n    alias: [\n        'RGB'\n    ]\n};\n\n\nvar $3d55e8295660d0b8$var$xyz = {\n    name: 'xyz',\n    min: [\n        0,\n        0,\n        0\n    ],\n    channel: [\n        'X',\n        'Y',\n        'Z'\n    ],\n    alias: [\n        'XYZ',\n        'ciexyz',\n        'cie1931'\n    ]\n};\n/**\n * Whitepoint reference values with observer/illuminant\n *\n * http://en.wikipedia.org/wiki/Standard_illuminant\n */ $3d55e8295660d0b8$var$xyz.whitepoint = {\n    //1931 2°\n    2: {\n        //incadescent\n        A: [\n            109.85,\n            100,\n            35.585\n        ],\n        // B:[],\n        C: [\n            98.074,\n            100,\n            118.232\n        ],\n        D50: [\n            96.422,\n            100,\n            82.521\n        ],\n        D55: [\n            95.682,\n            100,\n            92.149\n        ],\n        //daylight\n        D65: [\n            95.045592705167,\n            100,\n            108.9057750759878\n        ],\n        D75: [\n            94.972,\n            100,\n            122.638\n        ],\n        //flourescent\n        // F1: [],\n        F2: [\n            99.187,\n            100,\n            67.395\n        ],\n        // F3: [],\n        // F4: [],\n        // F5: [],\n        // F6:[],\n        F7: [\n            95.044,\n            100,\n            108.755\n        ],\n        // F8: [],\n        // F9: [],\n        // F10: [],\n        F11: [\n            100.966,\n            100,\n            64.370\n        ],\n        // F12: [],\n        E: [\n            100,\n            100,\n            100\n        ]\n    },\n    //1964  10°\n    10: {\n        //incadescent\n        A: [\n            111.144,\n            100,\n            35.200\n        ],\n        C: [\n            97.285,\n            100,\n            116.145\n        ],\n        D50: [\n            96.720,\n            100,\n            81.427\n        ],\n        D55: [\n            95.799,\n            100,\n            90.926\n        ],\n        //daylight\n        D65: [\n            94.811,\n            100,\n            107.304\n        ],\n        D75: [\n            94.416,\n            100,\n            120.641\n        ],\n        //flourescent\n        F2: [\n            103.280,\n            100,\n            69.026\n        ],\n        F7: [\n            95.792,\n            100,\n            107.687\n        ],\n        F11: [\n            103.866,\n            100,\n            65.627\n        ],\n        E: [\n            100,\n            100,\n            100\n        ]\n    }\n};\n/**\n * Top values are the whitepoint’s top values, default are D65\n */ $3d55e8295660d0b8$var$xyz.max = $3d55e8295660d0b8$var$xyz.whitepoint[2].D65;\n/**\n * Transform xyz to rgb\n *\n * @param {Array} xyz Array of xyz values\n *\n * @return {Array} RGB values\n */ $3d55e8295660d0b8$var$xyz.rgb = function(_xyz, white) {\n    //FIXME: make sure we have to divide like this. Probably we have to replace matrix as well then\n    white = white || $3d55e8295660d0b8$var$xyz.whitepoint[2].E;\n    var x = _xyz[0] / white[0], y = _xyz[1] / white[1], z = _xyz[2] / white[2], r, g, b;\n    // assume sRGB\n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    r = x * 3.240969941904521 + y * -1.537383177570093 + z * -0.498610760293;\n    g = x * -0.96924363628087 + y * 1.87596750150772 + z * 0.041555057407175;\n    b = x * 0.055630079696993 + y * -0.20397695888897 + z * 1.056971514242878;\n    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r = r * 12.92;\n    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g = g * 12.92;\n    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b = b * 12.92;\n    r = Math.min(Math.max(0, r), 1);\n    g = Math.min(Math.max(0, g), 1);\n    b = Math.min(Math.max(0, b), 1);\n    return [\n        r * 255,\n        g * 255,\n        b * 255\n    ];\n};\n/**\n * RGB to XYZ\n *\n * @param {Array} rgb RGB channels\n *\n * @return {Array} XYZ channels\n */ (0, $3751ab4954229b70$export$2e2bcd8739ae039).xyz = function(rgb, white) {\n    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255;\n    // assume sRGB\n    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n    var x = r * 0.41239079926595 + g * 0.35758433938387 + b * 0.18048078840183;\n    var y = r * 0.21263900587151 + g * 0.71516867876775 + b * 0.072192315360733;\n    var z = r * 0.019330818715591 + g * 0.11919477979462 + b * 0.95053215224966;\n    white = white || $3d55e8295660d0b8$var$xyz.whitepoint[2].E;\n    return [\n        x * white[0],\n        y * white[1],\n        z * white[2]\n    ];\n};\nvar $3d55e8295660d0b8$export$2e2bcd8739ae039 = $3d55e8295660d0b8$var$xyz;\n\n\nvar $f857682ac15a36ea$export$2e2bcd8739ae039 = {\n    name: 'luv',\n    //NOTE: luv has no rigidly defined limits\n    //easyrgb fails to get proper coords\n    //boronine states no rigid limits\n    //colorMine refers this ones:\n    min: [\n        0,\n        -134,\n        -140\n    ],\n    max: [\n        100,\n        224,\n        122\n    ],\n    channel: [\n        'lightness',\n        'u',\n        'v'\n    ],\n    alias: [\n        'LUV',\n        'cieluv',\n        'cie1976'\n    ],\n    xyz: function(arg, i, o) {\n        var _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\n        l = arg[0], u = arg[1], v = arg[2];\n        if (l === 0) return [\n            0,\n            0,\n            0\n        ];\n        //get constants\n        //var e = 0.008856451679035631; //(6/29)^3\n        var k = 0.0011070564598794539; //(3/29)^3\n        //get illuminant/observer\n        i = i || 'D65';\n        o = o || 2;\n        xn = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).whitepoint[o][i][0];\n        yn = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).whitepoint[o][i][1];\n        zn = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).whitepoint[o][i][2];\n        un = 4 * xn / (xn + 15 * yn + 3 * zn);\n        vn = 9 * yn / (xn + 15 * yn + 3 * zn);\n        // un = 0.19783000664283;\n        // vn = 0.46831999493879;\n        _u = u / (13 * l) + un || 0;\n        _v = v / (13 * l) + vn || 0;\n        y = l > 8 ? yn * Math.pow((l + 16) / 116, 3) : yn * l * k;\n        //wikipedia method\n        x = y * 9 * _u / (4 * _v) || 0;\n        z = y * (12 - 3 * _u - 20 * _v) / (4 * _v) || 0;\n        //boronine method\n        //https://github.com/boronine/husl/blob/master/husl.coffee#L201\n        // x = 0 - (9 * y * _u) / ((_u - 4) * _v - _u * _v);\n        // z = (9 * y - (15 * _v * y) - (_v * x)) / (3 * _v);\n        return [\n            x,\n            y,\n            z\n        ];\n    }\n};\n// http://www.brucelindbloom.com/index.html?Equations.html\n// https://github.com/boronine/husl/blob/master/husl.coffee\n//i - illuminant\n//o - observer\n(0, $3d55e8295660d0b8$export$2e2bcd8739ae039).luv = function(arg, i, o) {\n    var _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\n    //get constants\n    var e = 0.008856451679035631; //(6/29)^3\n    var k = 903.2962962962961; //(29/3)^3\n    //get illuminant/observer coords\n    i = i || 'D65';\n    o = o || 2;\n    xn = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).whitepoint[o][i][0];\n    yn = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).whitepoint[o][i][1];\n    zn = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).whitepoint[o][i][2];\n    un = 4 * xn / (xn + 15 * yn + 3 * zn);\n    vn = 9 * yn / (xn + 15 * yn + 3 * zn);\n    x = arg[0], y = arg[1], z = arg[2];\n    _u = 4 * x / (x + 15 * y + 3 * z) || 0;\n    _v = 9 * y / (x + 15 * y + 3 * z) || 0;\n    var yr = y / yn;\n    l = yr <= e ? k * yr : 116 * Math.pow(yr, 1 / 3) - 16;\n    u = 13 * l * (_u - un);\n    v = 13 * l * (_v - vn);\n    return [\n        l,\n        u,\n        v\n    ];\n};\n\n\n\n//cylindrical luv\nvar $2abac224ee1f2820$var$lchuv = {\n    name: 'lchuv',\n    channel: [\n        'lightness',\n        'chroma',\n        'hue'\n    ],\n    alias: [\n        'LCHuv',\n        'cielchuv'\n    ],\n    min: [\n        0,\n        0,\n        0\n    ],\n    max: [\n        100,\n        100,\n        360\n    ],\n    luv: function(luv) {\n        var l = luv[0], c = luv[1], h = luv[2], u, v, hr;\n        hr = h / 360 * 2 * Math.PI;\n        u = c * Math.cos(hr);\n        v = c * Math.sin(hr);\n        return [\n            l,\n            u,\n            v\n        ];\n    },\n    xyz: function(arg) {\n        return (0, $f857682ac15a36ea$export$2e2bcd8739ae039).xyz($2abac224ee1f2820$var$lchuv.luv(arg));\n    }\n};\nvar $2abac224ee1f2820$export$2e2bcd8739ae039 = $2abac224ee1f2820$var$lchuv;\n(0, $f857682ac15a36ea$export$2e2bcd8739ae039).lchuv = function(luv) {\n    var l = luv[0], u = luv[1], v = luv[2];\n    var c = Math.sqrt(u * u + v * v);\n    var hr = Math.atan2(v, u);\n    var h = hr * 360 / 2 / Math.PI;\n    if (h < 0) h += 360;\n    return [\n        l,\n        c,\n        h\n    ];\n};\n(0, $3d55e8295660d0b8$export$2e2bcd8739ae039).lchuv = function(arg) {\n    return (0, $f857682ac15a36ea$export$2e2bcd8739ae039).lchuv((0, $3d55e8295660d0b8$export$2e2bcd8739ae039).luv(arg));\n};\n\n\n/** @module  color-rgba */ /**\n * @module color-parse\n */ var $e81b4034aa9db203$export$2e2bcd8739ae039 = {\n    aliceblue: [\n        240,\n        248,\n        255\n    ],\n    antiquewhite: [\n        250,\n        235,\n        215\n    ],\n    aqua: [\n        0,\n        255,\n        255\n    ],\n    aquamarine: [\n        127,\n        255,\n        212\n    ],\n    azure: [\n        240,\n        255,\n        255\n    ],\n    beige: [\n        245,\n        245,\n        220\n    ],\n    bisque: [\n        255,\n        228,\n        196\n    ],\n    black: [\n        0,\n        0,\n        0\n    ],\n    blanchedalmond: [\n        255,\n        235,\n        205\n    ],\n    blue: [\n        0,\n        0,\n        255\n    ],\n    blueviolet: [\n        138,\n        43,\n        226\n    ],\n    brown: [\n        165,\n        42,\n        42\n    ],\n    burlywood: [\n        222,\n        184,\n        135\n    ],\n    cadetblue: [\n        95,\n        158,\n        160\n    ],\n    chartreuse: [\n        127,\n        255,\n        0\n    ],\n    chocolate: [\n        210,\n        105,\n        30\n    ],\n    coral: [\n        255,\n        127,\n        80\n    ],\n    cornflowerblue: [\n        100,\n        149,\n        237\n    ],\n    cornsilk: [\n        255,\n        248,\n        220\n    ],\n    crimson: [\n        220,\n        20,\n        60\n    ],\n    cyan: [\n        0,\n        255,\n        255\n    ],\n    darkblue: [\n        0,\n        0,\n        139\n    ],\n    darkcyan: [\n        0,\n        139,\n        139\n    ],\n    darkgoldenrod: [\n        184,\n        134,\n        11\n    ],\n    darkgray: [\n        169,\n        169,\n        169\n    ],\n    darkgreen: [\n        0,\n        100,\n        0\n    ],\n    darkgrey: [\n        169,\n        169,\n        169\n    ],\n    darkkhaki: [\n        189,\n        183,\n        107\n    ],\n    darkmagenta: [\n        139,\n        0,\n        139\n    ],\n    darkolivegreen: [\n        85,\n        107,\n        47\n    ],\n    darkorange: [\n        255,\n        140,\n        0\n    ],\n    darkorchid: [\n        153,\n        50,\n        204\n    ],\n    darkred: [\n        139,\n        0,\n        0\n    ],\n    darksalmon: [\n        233,\n        150,\n        122\n    ],\n    darkseagreen: [\n        143,\n        188,\n        143\n    ],\n    darkslateblue: [\n        72,\n        61,\n        139\n    ],\n    darkslategray: [\n        47,\n        79,\n        79\n    ],\n    darkslategrey: [\n        47,\n        79,\n        79\n    ],\n    darkturquoise: [\n        0,\n        206,\n        209\n    ],\n    darkviolet: [\n        148,\n        0,\n        211\n    ],\n    deeppink: [\n        255,\n        20,\n        147\n    ],\n    deepskyblue: [\n        0,\n        191,\n        255\n    ],\n    dimgray: [\n        105,\n        105,\n        105\n    ],\n    dimgrey: [\n        105,\n        105,\n        105\n    ],\n    dodgerblue: [\n        30,\n        144,\n        255\n    ],\n    firebrick: [\n        178,\n        34,\n        34\n    ],\n    floralwhite: [\n        255,\n        250,\n        240\n    ],\n    forestgreen: [\n        34,\n        139,\n        34\n    ],\n    fuchsia: [\n        255,\n        0,\n        255\n    ],\n    gainsboro: [\n        220,\n        220,\n        220\n    ],\n    ghostwhite: [\n        248,\n        248,\n        255\n    ],\n    gold: [\n        255,\n        215,\n        0\n    ],\n    goldenrod: [\n        218,\n        165,\n        32\n    ],\n    gray: [\n        128,\n        128,\n        128\n    ],\n    green: [\n        0,\n        128,\n        0\n    ],\n    greenyellow: [\n        173,\n        255,\n        47\n    ],\n    grey: [\n        128,\n        128,\n        128\n    ],\n    honeydew: [\n        240,\n        255,\n        240\n    ],\n    hotpink: [\n        255,\n        105,\n        180\n    ],\n    indianred: [\n        205,\n        92,\n        92\n    ],\n    indigo: [\n        75,\n        0,\n        130\n    ],\n    ivory: [\n        255,\n        255,\n        240\n    ],\n    khaki: [\n        240,\n        230,\n        140\n    ],\n    lavender: [\n        230,\n        230,\n        250\n    ],\n    lavenderblush: [\n        255,\n        240,\n        245\n    ],\n    lawngreen: [\n        124,\n        252,\n        0\n    ],\n    lemonchiffon: [\n        255,\n        250,\n        205\n    ],\n    lightblue: [\n        173,\n        216,\n        230\n    ],\n    lightcoral: [\n        240,\n        128,\n        128\n    ],\n    lightcyan: [\n        224,\n        255,\n        255\n    ],\n    lightgoldenrodyellow: [\n        250,\n        250,\n        210\n    ],\n    lightgray: [\n        211,\n        211,\n        211\n    ],\n    lightgreen: [\n        144,\n        238,\n        144\n    ],\n    lightgrey: [\n        211,\n        211,\n        211\n    ],\n    lightpink: [\n        255,\n        182,\n        193\n    ],\n    lightsalmon: [\n        255,\n        160,\n        122\n    ],\n    lightseagreen: [\n        32,\n        178,\n        170\n    ],\n    lightskyblue: [\n        135,\n        206,\n        250\n    ],\n    lightslategray: [\n        119,\n        136,\n        153\n    ],\n    lightslategrey: [\n        119,\n        136,\n        153\n    ],\n    lightsteelblue: [\n        176,\n        196,\n        222\n    ],\n    lightyellow: [\n        255,\n        255,\n        224\n    ],\n    lime: [\n        0,\n        255,\n        0\n    ],\n    limegreen: [\n        50,\n        205,\n        50\n    ],\n    linen: [\n        250,\n        240,\n        230\n    ],\n    magenta: [\n        255,\n        0,\n        255\n    ],\n    maroon: [\n        128,\n        0,\n        0\n    ],\n    mediumaquamarine: [\n        102,\n        205,\n        170\n    ],\n    mediumblue: [\n        0,\n        0,\n        205\n    ],\n    mediumorchid: [\n        186,\n        85,\n        211\n    ],\n    mediumpurple: [\n        147,\n        112,\n        219\n    ],\n    mediumseagreen: [\n        60,\n        179,\n        113\n    ],\n    mediumslateblue: [\n        123,\n        104,\n        238\n    ],\n    mediumspringgreen: [\n        0,\n        250,\n        154\n    ],\n    mediumturquoise: [\n        72,\n        209,\n        204\n    ],\n    mediumvioletred: [\n        199,\n        21,\n        133\n    ],\n    midnightblue: [\n        25,\n        25,\n        112\n    ],\n    mintcream: [\n        245,\n        255,\n        250\n    ],\n    mistyrose: [\n        255,\n        228,\n        225\n    ],\n    moccasin: [\n        255,\n        228,\n        181\n    ],\n    navajowhite: [\n        255,\n        222,\n        173\n    ],\n    navy: [\n        0,\n        0,\n        128\n    ],\n    oldlace: [\n        253,\n        245,\n        230\n    ],\n    olive: [\n        128,\n        128,\n        0\n    ],\n    olivedrab: [\n        107,\n        142,\n        35\n    ],\n    orange: [\n        255,\n        165,\n        0\n    ],\n    orangered: [\n        255,\n        69,\n        0\n    ],\n    orchid: [\n        218,\n        112,\n        214\n    ],\n    palegoldenrod: [\n        238,\n        232,\n        170\n    ],\n    palegreen: [\n        152,\n        251,\n        152\n    ],\n    paleturquoise: [\n        175,\n        238,\n        238\n    ],\n    palevioletred: [\n        219,\n        112,\n        147\n    ],\n    papayawhip: [\n        255,\n        239,\n        213\n    ],\n    peachpuff: [\n        255,\n        218,\n        185\n    ],\n    peru: [\n        205,\n        133,\n        63\n    ],\n    pink: [\n        255,\n        192,\n        203\n    ],\n    plum: [\n        221,\n        160,\n        221\n    ],\n    powderblue: [\n        176,\n        224,\n        230\n    ],\n    purple: [\n        128,\n        0,\n        128\n    ],\n    rebeccapurple: [\n        102,\n        51,\n        153\n    ],\n    red: [\n        255,\n        0,\n        0\n    ],\n    rosybrown: [\n        188,\n        143,\n        143\n    ],\n    royalblue: [\n        65,\n        105,\n        225\n    ],\n    saddlebrown: [\n        139,\n        69,\n        19\n    ],\n    salmon: [\n        250,\n        128,\n        114\n    ],\n    sandybrown: [\n        244,\n        164,\n        96\n    ],\n    seagreen: [\n        46,\n        139,\n        87\n    ],\n    seashell: [\n        255,\n        245,\n        238\n    ],\n    sienna: [\n        160,\n        82,\n        45\n    ],\n    silver: [\n        192,\n        192,\n        192\n    ],\n    skyblue: [\n        135,\n        206,\n        235\n    ],\n    slateblue: [\n        106,\n        90,\n        205\n    ],\n    slategray: [\n        112,\n        128,\n        144\n    ],\n    slategrey: [\n        112,\n        128,\n        144\n    ],\n    snow: [\n        255,\n        250,\n        250\n    ],\n    springgreen: [\n        0,\n        255,\n        127\n    ],\n    steelblue: [\n        70,\n        130,\n        180\n    ],\n    tan: [\n        210,\n        180,\n        140\n    ],\n    teal: [\n        0,\n        128,\n        128\n    ],\n    thistle: [\n        216,\n        191,\n        216\n    ],\n    tomato: [\n        255,\n        99,\n        71\n    ],\n    turquoise: [\n        64,\n        224,\n        208\n    ],\n    violet: [\n        238,\n        130,\n        238\n    ],\n    wheat: [\n        245,\n        222,\n        179\n    ],\n    white: [\n        255,\n        255,\n        255\n    ],\n    whitesmoke: [\n        245,\n        245,\n        245\n    ],\n    yellow: [\n        255,\n        255,\n        0\n    ],\n    yellowgreen: [\n        154,\n        205,\n        50\n    ]\n};\n\n\nvar $5481cadd51b98557$export$2e2bcd8739ae039 = $5481cadd51b98557$var$parse;\n/**\n * Base hues\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\n */ //FIXME: use external hue detector\nvar $5481cadd51b98557$var$baseHues = {\n    red: 0,\n    orange: 60,\n    yellow: 120,\n    green: 180,\n    blue: 240,\n    purple: 300\n};\n/**\n * Parse color from the string passed\n *\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\n */ function $5481cadd51b98557$var$parse(cstr) {\n    var m, parts = [], alpha = 1, space;\n    //numeric case\n    if (typeof cstr === 'number') return {\n        space: 'rgb',\n        values: [\n            cstr >>> 16,\n            (cstr & 0x00ff00) >>> 8,\n            cstr & 0x0000ff\n        ],\n        alpha: 1\n    };\n    if (typeof cstr === 'number') return {\n        space: 'rgb',\n        values: [\n            cstr >>> 16,\n            (cstr & 0x00ff00) >>> 8,\n            cstr & 0x0000ff\n        ],\n        alpha: 1\n    };\n    cstr = String(cstr).toLowerCase();\n    //keyword\n    if ((0, $e81b4034aa9db203$export$2e2bcd8739ae039)[cstr]) {\n        parts = (0, $e81b4034aa9db203$export$2e2bcd8739ae039)[cstr].slice();\n        space = 'rgb';\n    } else if (cstr === 'transparent') {\n        alpha = 0;\n        space = 'rgb';\n        parts = [\n            0,\n            0,\n            0\n        ];\n    } else if (cstr[0] === '#') {\n        var base = cstr.slice(1);\n        var size = base.length;\n        var isShort = size <= 4;\n        alpha = 1;\n        if (isShort) {\n            parts = [\n                parseInt(base[0] + base[0], 16),\n                parseInt(base[1] + base[1], 16),\n                parseInt(base[2] + base[2], 16)\n            ];\n            if (size === 4) alpha = parseInt(base[3] + base[3], 16) / 255;\n        } else {\n            parts = [\n                parseInt(base[0] + base[1], 16),\n                parseInt(base[2] + base[3], 16),\n                parseInt(base[4] + base[5], 16)\n            ];\n            if (size === 8) alpha = parseInt(base[6] + base[7], 16) / 255;\n        }\n        if (!parts[0]) parts[0] = 0;\n        if (!parts[1]) parts[1] = 0;\n        if (!parts[2]) parts[2] = 0;\n        space = 'rgb';\n    } else if (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n        var name = m[1];\n        space = name.replace(/a$/, '');\n        var dims = space === 'cmyk' ? 4 : space === 'gray' ? 1 : 3;\n        parts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/);\n        // color(srgb-linear x x x) -> srgb-linear(x x x)\n        if (space === 'color') space = parts.shift();\n        parts = parts.map(function(x, i) {\n            //<percentage>\n            if (x[x.length - 1] === '%') {\n                x = parseFloat(x) / 100;\n                // alpha -> 0..1\n                if (i === 3) return x;\n                // rgb -> 0..255\n                if (space === 'rgb') return x * 255;\n                // hsl, hwb H -> 0..100\n                if (space[0] === 'h') return x * 100;\n                // lch, lab L -> 0..100\n                if (space[0] === 'l' && !i) return x * 100;\n                // lab A B -> -125..125\n                if (space === 'lab') return x * 125;\n                // lch C -> 0..150, H -> 0..360\n                if (space === 'lch') return i < 2 ? x * 150 : x * 360;\n                // oklch/oklab L -> 0..1\n                if (space[0] === 'o' && !i) return x;\n                // oklab A B -> -0.4..0.4\n                if (space === 'oklab') return x * 0.4;\n                // oklch C -> 0..0.4, H -> 0..360\n                if (space === 'oklch') return i < 2 ? x * 0.4 : x * 360;\n                // color(xxx) -> 0..1\n                return x;\n            }\n            //hue\n            if (space[i] === 'h' || i === 2 && space[space.length - 1] === 'h') {\n                //<base-hue>\n                if ($5481cadd51b98557$var$baseHues[x] !== undefined) return $5481cadd51b98557$var$baseHues[x];\n                //<deg>\n                if (x.endsWith('deg')) return parseFloat(x);\n                //<turn>\n                if (x.endsWith('turn')) return parseFloat(x) * 360;\n                if (x.endsWith('grad')) return parseFloat(x) * 360 / 400;\n                if (x.endsWith('rad')) return parseFloat(x) * 180 / Math.PI;\n            }\n            if (x === 'none') return 0;\n            return parseFloat(x);\n        });\n        alpha = parts.length > dims ? parts.pop() : 1;\n    } else if (/[0-9](?:\\s|\\/|,)/.test(cstr)) {\n        parts = cstr.match(/([0-9]+)/g).map(function(value) {\n            return parseFloat(value);\n        });\n        space = cstr.match(/([a-z])/ig)?.join('')?.toLowerCase() || 'rgb';\n    }\n    return {\n        space: space,\n        values: parts,\n        alpha: alpha\n    };\n}\n\n\n\n/**\n * @module color-space/hsl\n */ \nvar $4b161c5b6bfbd933$export$2e2bcd8739ae039 = {\n    name: 'hsl',\n    min: [\n        0,\n        0,\n        0\n    ],\n    max: [\n        360,\n        100,\n        100\n    ],\n    channel: [\n        'hue',\n        'saturation',\n        'lightness'\n    ],\n    alias: [\n        'HSL'\n    ],\n    rgb: function(hsl) {\n        var h = hsl[0] / 360, s = hsl[1] / 100, l = hsl[2] / 100, t1, t2, t3, rgb, val, i = 0;\n        if (s === 0) return val = l * 255, [\n            val,\n            val,\n            val\n        ];\n        t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        t1 = 2 * l - t2;\n        rgb = [\n            0,\n            0,\n            0\n        ];\n        for(; i < 3;){\n            t3 = h + 1 / 3 * -(i - 1);\n            t3 < 0 ? t3++ : t3 > 1 && t3--;\n            val = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? t2 : 3 * t3 < 2 ? t1 + (t2 - t1) * (2 / 3 - t3) * 6 : t1;\n            rgb[i++] = val * 255;\n        }\n        return rgb;\n    }\n};\n//extend rgb\n(0, $3751ab4954229b70$export$2e2bcd8739ae039).hsl = function(rgb) {\n    var r = rgb[0] / 255, g = rgb[1] / 255, b = rgb[2] / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), delta = max - min, h, s, l;\n    if (max === min) h = 0;\n    else if (r === max) h = (g - b) / delta;\n    else if (g === max) h = 2 + (b - r) / delta;\n    else if (b === max) h = 4 + (r - g) / delta;\n    h = Math.min(h * 60, 360);\n    if (h < 0) h += 360;\n    l = (min + max) / 2;\n    if (max === min) s = 0;\n    else if (l <= 0.5) s = delta / (max + min);\n    else s = delta / (2 - max - min);\n    return [\n        h,\n        s * 100,\n        l * 100\n    ];\n};\n\n\nfunction $6f2ac7eebd53949d$export$2e2bcd8739ae039(color) {\n    // template literals\n    if (Array.isArray(color) && color.raw) color = String.raw(...arguments);\n    if (color instanceof Number) color = +color;\n    var values, i, l;\n    //attempt to parse non-array arguments\n    var parsed = (0, $5481cadd51b98557$export$2e2bcd8739ae039)(color);\n    if (!parsed.space) return [];\n    const min = parsed.space[0] === 'h' ? (0, $4b161c5b6bfbd933$export$2e2bcd8739ae039).min : (0, $3751ab4954229b70$export$2e2bcd8739ae039).min;\n    const max = parsed.space[0] === 'h' ? (0, $4b161c5b6bfbd933$export$2e2bcd8739ae039).max : (0, $3751ab4954229b70$export$2e2bcd8739ae039).max;\n    values = Array(3);\n    values[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0]);\n    values[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1]);\n    values[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2]);\n    if (parsed.space[0] === 'h') values = (0, $4b161c5b6bfbd933$export$2e2bcd8739ae039).rgb(values);\n    values.push(Math.min(Math.max(parsed.alpha, 0), 1));\n    return values;\n}\n\n\n\n\n\nconst $322346e1ff7894ca$export$6c844c64a5efe1ee = [\n    NaN,\n    NaN,\n    NaN,\n    0\n];\nfunction $322346e1ff7894ca$export$590567be997858b6(color) {\n    if (typeof color === 'string') return color;\n    return $322346e1ff7894ca$export$f84e8e69fd4488a5(color);\n}\n/**\n * @type {number}\n */ const $322346e1ff7894ca$var$MAX_CACHE_SIZE = 1024;\n/**\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\n * we delete an arbitrary set of the entries.\n *\n * @type {Object<string, Color>}\n */ const $322346e1ff7894ca$var$cache = {};\n/**\n * @type {number}\n */ let $322346e1ff7894ca$var$cacheSize = 0;\nfunction $322346e1ff7894ca$export$138c09bdd6bd797c(color) {\n    if (color.length === 4) return color;\n    const output = color.slice();\n    output[3] = 1;\n    return output;\n}\nfunction $322346e1ff7894ca$export$44fb54fa2e0c0d4(color) {\n    const output = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).lchuv((0, $3751ab4954229b70$export$2e2bcd8739ae039).xyz(color));\n    output[3] = color[3];\n    return output;\n}\nfunction $322346e1ff7894ca$export$27cc94530c050f00(color) {\n    const output = (0, $3d55e8295660d0b8$export$2e2bcd8739ae039).rgb((0, $2abac224ee1f2820$export$2e2bcd8739ae039).xyz(color));\n    output[3] = color[3];\n    return output;\n}\nfunction $322346e1ff7894ca$export$3004f64547af360e(s) {\n    if (s === 'none') return $322346e1ff7894ca$export$6c844c64a5efe1ee;\n    if ($322346e1ff7894ca$var$cache.hasOwnProperty(s)) return $322346e1ff7894ca$var$cache[s];\n    if ($322346e1ff7894ca$var$cacheSize >= $322346e1ff7894ca$var$MAX_CACHE_SIZE) {\n        let i = 0;\n        for(const key in $322346e1ff7894ca$var$cache)if ((i++ & 3) === 0) {\n            delete $322346e1ff7894ca$var$cache[key];\n            --$322346e1ff7894ca$var$cacheSize;\n        }\n    }\n    const color = (0, $6f2ac7eebd53949d$export$2e2bcd8739ae039)(s);\n    if (color.length !== 4) throw new Error('failed to parse \"' + s + '\" as color');\n    for (const c of color){\n        if (isNaN(c)) throw new Error('failed to parse \"' + s + '\" as color');\n    }\n    $322346e1ff7894ca$export$a3295358bff77e(color);\n    $322346e1ff7894ca$var$cache[s] = color;\n    ++$322346e1ff7894ca$var$cacheSize;\n    return color;\n}\nfunction $322346e1ff7894ca$export$75093a47a9fa838d(color) {\n    if (Array.isArray(color)) return color;\n    return $322346e1ff7894ca$export$3004f64547af360e(color);\n}\nfunction $322346e1ff7894ca$export$a3295358bff77e(color) {\n    color[0] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[0] + 0.5 | 0, 0, 255);\n    color[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[1] + 0.5 | 0, 0, 255);\n    color[2] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[2] + 0.5 | 0, 0, 255);\n    color[3] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[3], 0, 1);\n    return color;\n}\nfunction $322346e1ff7894ca$export$f84e8e69fd4488a5(color) {\n    let r = color[0];\n    if (r != (r | 0)) r = r + 0.5 | 0;\n    let g = color[1];\n    if (g != (g | 0)) g = g + 0.5 | 0;\n    let b = color[2];\n    if (b != (b | 0)) b = b + 0.5 | 0;\n    const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\n    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\nfunction $322346e1ff7894ca$export$40dd713d7775a0b1(s) {\n    try {\n        $322346e1ff7894ca$export$3004f64547af360e(s);\n        return true;\n    } catch (_) {\n        return false;\n    }\n}\n\n\n\n\n\nconst $42152f52b26b6ca7$export$a166f0857c555517 = [];\n/**\n * @type {CanvasRenderingContext2D}\n */ let $42152f52b26b6ca7$var$pixelContext = null;\nfunction $42152f52b26b6ca7$var$createPixelContext() {\n    $42152f52b26b6ca7$var$pixelContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1, undefined, {\n        willReadFrequently: true\n    });\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */ class $42152f52b26b6ca7$var$CanvasLayerRenderer extends (0, $cb18cdefd702a327$export$2e2bcd8739ae039) {\n    /**\n   * @param {LayerType} layer Layer.\n   */ constructor(layer){\n        super(layer);\n        /**\n     * @protected\n     * @type {HTMLElement}\n     */ this.container = null;\n        /**\n     * @protected\n     * @type {number}\n     */ this.renderedResolution;\n        /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.tempTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.pixelTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.inversePixelTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * @type {CanvasRenderingContext2D}\n     */ this.context = null;\n        /**\n     * @private\n     * @type {ZIndexContext}\n     */ this.deferredContext_ = null;\n        /**\n     * @type {boolean}\n     */ this.containerReused = false;\n        /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */ this.frameState = null;\n    }\n    /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */ getImageData(image, col, row) {\n        if (!$42152f52b26b6ca7$var$pixelContext) $42152f52b26b6ca7$var$createPixelContext();\n        $42152f52b26b6ca7$var$pixelContext.clearRect(0, 0, 1, 1);\n        let data;\n        try {\n            $42152f52b26b6ca7$var$pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = $42152f52b26b6ca7$var$pixelContext.getImageData(0, 0, 1, 1).data;\n        } catch (err) {\n            $42152f52b26b6ca7$var$pixelContext = null;\n            return null;\n        }\n        return data;\n    }\n    /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */ getBackground(frameState) {\n        const layer = this.getLayer();\n        let background = layer.getBackground();\n        if (typeof background === 'function') background = background(frameState.viewState.resolution);\n        return background || undefined;\n    }\n    /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */ useContainer(target, transform, backgroundColor) {\n        const layerClassName = this.getLayer().getClassName();\n        let container, context;\n        if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && (0, $b998d41b678ed5d1$export$e9bab7fafb253603)((0, $322346e1ff7894ca$export$75093a47a9fa838d)(target.style.backgroundColor), (0, $322346e1ff7894ca$export$75093a47a9fa838d)(backgroundColor)))) {\n            const canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) context = canvas.getContext('2d');\n        }\n        if (context && context.canvas.style.transform === transform) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        } else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        } else if (this.container) this.container.style.backgroundColor = null;\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            let style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)();\n            const canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n        if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) this.container.style.backgroundColor = backgroundColor;\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */ clipUnrotated(context, frameState, extent) {\n        const topLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(extent);\n        const topRight = (0, $6da4c8ed3074c92b$export$b84fa077c8b05295)(extent);\n        const bottomRight = (0, $6da4c8ed3074c92b$export$e77c1cf70445e168)(extent);\n        const bottomLeft = (0, $6da4c8ed3074c92b$export$8d09f5e2e1bf560d)(extent);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topLeft);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomLeft);\n        const inverted = this.inversePixelTransform;\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, topLeft);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, topRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, bottomRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    }\n    /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @protected\n   */ prepareContainer(frameState, target) {\n        const extent = frameState.extent;\n        const resolution = frameState.viewState.resolution;\n        const rotation = frameState.viewState.rotation;\n        const pixelRatio = frameState.pixelRatio;\n        const width = Math.round((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / resolution * pixelRatio);\n        const height = Math.round((0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / resolution * pixelRatio);\n        // set forward and inverse pixel transforms\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n        (0, $e22e7611e69f42a9$export$bd70ea2a93c0fa4)(this.inversePixelTransform, this.pixelTransform);\n        const canvasTransform = (0, $e22e7611e69f42a9$export$f84e8e69fd4488a5)(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        if (!this.containerReused) {\n            const canvas = this.context.canvas;\n            if (canvas.width != width || canvas.height != height) {\n                canvas.width = width;\n                canvas.height = height;\n            } else this.context.clearRect(0, 0, width, height);\n            if (canvasTransform !== canvas.style.transform) canvas.style.transform = canvasTransform;\n        }\n    }\n    /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */ dispatchRenderEvent_(type, context, frameState) {\n        const layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            const event = new (0, $b80dddceb0c42ad4$export$2e2bcd8739ae039)(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event);\n        }\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */ preRender(context, frameState) {\n        this.frameState = frameState;\n        if (frameState.declutter) return;\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRERENDER, context, frameState);\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */ postRender(context, frameState) {\n        if (frameState.declutter) return;\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTRENDER, context, frameState);\n    }\n    /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */ renderDeferredInternal(frameState) {}\n    /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.\n   */ getRenderContext(frameState) {\n        if (frameState.declutter && !this.deferredContext_) this.deferredContext_ = new (0, $c1cb593c98d2cbd0$export$2e2bcd8739ae039)();\n        return frameState.declutter ? this.deferredContext_.getContext() : this.context;\n    }\n    /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */ renderDeferred(frameState) {\n        if (!frameState.declutter) return;\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRERENDER, this.context, frameState);\n        if (frameState.declutter && this.deferredContext_) {\n            this.deferredContext_.draw(this.context);\n            this.deferredContext_.clear();\n        }\n        this.renderDeferredInternal(frameState);\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTRENDER, this.context, frameState);\n    }\n    /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */ getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        const dx1 = width / 2;\n        const dy1 = height / 2;\n        const sx = pixelRatio / resolution;\n        const sy = -sx;\n        const dx2 = -center[0] + offsetX;\n        const dy2 = -center[1];\n        return (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    }\n    /**\n   * Clean up.\n   * @override\n   */ disposeInternal() {\n        delete this.frameState;\n        super.disposeInternal();\n    }\n}\nvar $42152f52b26b6ca7$export$2e2bcd8739ae039 = $42152f52b26b6ca7$var$CanvasLayerRenderer;\n\n\n/**\n * @module ol/DataTile\n */ \n\n\nfunction $fd518ba473015b27$export$3a7c913cb40dcb7d(data) {\n    return data instanceof Image || data instanceof HTMLCanvasElement || data instanceof HTMLVideoElement || data instanceof ImageBitmap ? data : null;\n}\nfunction $fd518ba473015b27$export$7386cb0413f6b283(data) {\n    return data instanceof Uint8Array || data instanceof Uint8ClampedArray || data instanceof Float32Array || data instanceof DataView ? data : null;\n}\nconst $fd518ba473015b27$export$df4c617b86128e3e = new Error('disposed');\n/**\n * @type {CanvasRenderingContext2D|null}\n */ let $fd518ba473015b27$var$sharedContext = null;\nfunction $fd518ba473015b27$export$45b10814cc054894(image) {\n    if (!$fd518ba473015b27$var$sharedContext) $fd518ba473015b27$var$sharedContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(image.width, image.height, undefined, {\n        willReadFrequently: true\n    });\n    const canvas = $fd518ba473015b27$var$sharedContext.canvas;\n    const width = image.width;\n    if (canvas.width !== width) canvas.width = width;\n    const height = image.height;\n    if (canvas.height !== height) canvas.height = height;\n    $fd518ba473015b27$var$sharedContext.clearRect(0, 0, width, height);\n    $fd518ba473015b27$var$sharedContext.drawImage(image, 0, 0);\n    return $fd518ba473015b27$var$sharedContext.getImageData(0, 0, width, height).data;\n}\n/**\n * @type {import('./size.js').Size}\n */ const $fd518ba473015b27$var$defaultSize = [\n    256,\n    256\n];\n/**\n * @typedef {Object} Options\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\n * the promise should not resolve until the image is loaded.\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\n * @property {AbortController} [controller] An abort controller.\n * @api\n */ class $fd518ba473015b27$var$DataTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Tile options.\n   */ constructor(options){\n        const state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE;\n        super(options.tileCoord, state, {\n            transition: options.transition,\n            interpolate: options.interpolate\n        });\n        /**\n     * @type {function(): Promise<Data>}\n     * @private\n     */ this.loader_ = options.loader;\n        /**\n     * @type {Data}\n     * @private\n     */ this.data_ = null;\n        /**\n     * @type {Error}\n     * @private\n     */ this.error_ = null;\n        /**\n     * @type {import('./size.js').Size|null}\n     * @private\n     */ this.size_ = options.size || null;\n        /**\n     * @type {AbortController|null}\n     * @private\n     */ this.controller_ = options.controller || null;\n    }\n    /**\n   * Get the tile size.\n   * @return {import('./size.js').Size} Tile size.\n   */ getSize() {\n        if (this.size_) return this.size_;\n        const imageData = $fd518ba473015b27$export$3a7c913cb40dcb7d(this.data_);\n        if (imageData) return [\n            imageData.width,\n            imageData.height\n        ];\n        return $fd518ba473015b27$var$defaultSize;\n    }\n    /**\n   * Get the data for the tile.\n   * @return {Data} Tile data.\n   * @api\n   */ getData() {\n        return this.data_;\n    }\n    /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @api\n   */ getError() {\n        return this.error_;\n    }\n    /**\n   * Load the tile data.\n   * @api\n   * @override\n   */ load() {\n        if (this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE && this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) return;\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n        this.changed();\n        const self = this;\n        this.loader_().then(function(data) {\n            self.data_ = data;\n            self.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n            self.changed();\n        }).catch(function(error) {\n            self.error_ = error;\n            self.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n            self.changed();\n        });\n    }\n    /**\n   * Clean up.\n   * @override\n   */ disposeInternal() {\n        if (this.controller_) {\n            this.controller_.abort($fd518ba473015b27$export$df4c617b86128e3e);\n            this.controller_ = null;\n        }\n        super.disposeInternal();\n    }\n}\nvar $fd518ba473015b27$export$2e2bcd8739ae039 = $fd518ba473015b27$var$DataTile;\n\n\n\n/**\n * @module ol/structs/LRUCache\n */ \n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Entry|null} newer Newer.\n * @property {Entry|null} older Older.\n * @property {*} value_ Value.\n */ /**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */ class $859b1614288c6316$var$LRUCache {\n    /**\n   * @param {number} [highWaterMark] High water mark.\n   */ constructor(highWaterMark){\n        /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */ this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n        /**\n     * @private\n     * @type {number}\n     */ this.count_ = 0;\n        /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */ this.entries_ = {};\n        /**\n     * @private\n     * @type {?Entry}\n     */ this.oldest_ = null;\n        /**\n     * @private\n     * @type {?Entry}\n     */ this.newest_ = null;\n    }\n    deleteOldest() {\n        const entry = this.pop();\n        if (entry instanceof (0, $3273ed08087da3da$export$2e2bcd8739ae039)) entry.dispose();\n    }\n    /**\n   * @return {boolean} Can expire cache.\n   */ canExpireCache() {\n        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n    }\n    /**\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\n   * the entry will be disposed.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */ expireCache(keep) {\n        while(this.canExpireCache())this.deleteOldest();\n    }\n    /**\n   * FIXME empty description for jsdoc\n   */ clear() {\n        while(this.oldest_)this.deleteOldest();\n    }\n    /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */ containsKey(key) {\n        return this.entries_.hasOwnProperty(key);\n    }\n    /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */ forEach(f) {\n        let entry = this.oldest_;\n        while(entry){\n            f(entry.value_, entry.key_, this);\n            entry = entry.newer;\n        }\n    }\n    /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */ get(key, options) {\n        const entry = this.entries_[key];\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(entry !== undefined, 'Tried to get a value for a key that does not exist in the cache');\n        if (entry === this.newest_) return entry.value_;\n        if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ this.oldest_.newer;\n            this.oldest_.older = null;\n        } else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        entry.newer = null;\n        entry.older = this.newest_;\n        this.newest_.newer = entry;\n        this.newest_ = entry;\n        return entry.value_;\n    }\n    /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */ remove(key) {\n        const entry = this.entries_[key];\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(entry !== undefined, 'Tried to get a value for a key that does not exist in the cache');\n        if (entry === this.newest_) {\n            this.newest_ = /** @type {Entry} */ entry.older;\n            if (this.newest_) this.newest_.newer = null;\n        } else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ entry.newer;\n            if (this.oldest_) this.oldest_.older = null;\n        } else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        delete this.entries_[key];\n        --this.count_;\n        return entry.value_;\n    }\n    /**\n   * @return {number} Count.\n   */ getCount() {\n        return this.count_;\n    }\n    /**\n   * @return {Array<string>} Keys.\n   */ getKeys() {\n        const keys = new Array(this.count_);\n        let i = 0;\n        let entry;\n        for(entry = this.newest_; entry; entry = entry.older)keys[i++] = entry.key_;\n        return keys;\n    }\n    /**\n   * @return {Array<T>} Values.\n   */ getValues() {\n        const values = new Array(this.count_);\n        let i = 0;\n        let entry;\n        for(entry = this.newest_; entry; entry = entry.older)values[i++] = entry.value_;\n        return values;\n    }\n    /**\n   * @return {T} Last value.\n   */ peekLast() {\n        return this.oldest_.value_;\n    }\n    /**\n   * @return {string} Last key.\n   */ peekLastKey() {\n        return this.oldest_.key_;\n    }\n    /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */ peekFirstKey() {\n        return this.newest_.key_;\n    }\n    /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T|undefined} Value.\n   */ peek(key) {\n        return this.entries_[key]?.value_;\n    }\n    /**\n   * @return {T} value Value.\n   */ pop() {\n        const entry = this.oldest_;\n        delete this.entries_[entry.key_];\n        if (entry.newer) entry.newer.older = null;\n        this.oldest_ = /** @type {Entry} */ entry.newer;\n        if (!this.oldest_) this.newest_ = null;\n        --this.count_;\n        return entry.value_;\n    }\n    /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */ replace(key, value) {\n        this.get(key); // update `newest_`\n        this.entries_[key].value_ = value;\n    }\n    /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */ set(key, value) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!(key in this.entries_), 'Tried to set a value for a key that is used already');\n        const entry = {\n            key_: key,\n            newer: null,\n            older: this.newest_,\n            value_: value\n        };\n        if (!this.newest_) this.oldest_ = entry;\n        else this.newest_.newer = entry;\n        this.newest_ = entry;\n        this.entries_[key] = entry;\n        ++this.count_;\n    }\n    /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */ setSize(size) {\n        this.highWaterMark = size;\n    }\n}\nvar $859b1614288c6316$export$2e2bcd8739ae039 = $859b1614288c6316$var$LRUCache;\n\n\n/**\n * @module ol/reproj/DataTile\n */ \n\n\n\n\n\n/**\n * @module ol/reproj/glreproj\n */ /**\n * @module ol/vec/mat4\n */ /** @typedef {Array<number>} Mat4 */ /**\n * @return {Mat4} \"4x4 matrix representing a 3D identity transform.\"\n */ function $59dd9ee5df48d07b$export$185802fd694ee1f5() {\n    return [\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n    ];\n}\nfunction $59dd9ee5df48d07b$export$cefd10e2681057f4(mat4, transform) {\n    mat4[0] = transform[0];\n    mat4[1] = transform[1];\n    mat4[4] = transform[2];\n    mat4[5] = transform[3];\n    mat4[12] = transform[4];\n    mat4[13] = transform[5];\n    return mat4;\n}\nfunction $59dd9ee5df48d07b$export$8e900afea9060a47(left, right, bottom, top, near, far, out) {\n    out = out ?? $59dd9ee5df48d07b$export$185802fd694ee1f5();\n    const lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\nfunction $59dd9ee5df48d07b$export$dcdf75081b88279d(m, x, y, z, out) {\n    out = out ?? $59dd9ee5df48d07b$export$185802fd694ee1f5();\n    out[0] = m[0] * x;\n    out[1] = m[1] * x;\n    out[2] = m[2] * x;\n    out[3] = m[3] * x;\n    out[4] = m[4] * y;\n    out[5] = m[5] * y;\n    out[6] = m[6] * y;\n    out[7] = m[7] * y;\n    out[8] = m[8] * z;\n    out[9] = m[9] * z;\n    out[10] = m[10] * z;\n    out[11] = m[11] * z;\n    out[12] = m[12];\n    out[13] = m[13];\n    out[14] = m[14];\n    out[15] = m[15];\n    return out;\n}\nfunction $59dd9ee5df48d07b$export$d73ee8ef04f5226a(m, x, y, z, out) {\n    out = out ?? $59dd9ee5df48d07b$export$185802fd694ee1f5();\n    let a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;\n    if (m === out) {\n        out[12] = m[0] * x + m[4] * y + m[8] * z + m[12];\n        out[13] = m[1] * x + m[5] * y + m[9] * z + m[13];\n        out[14] = m[2] * x + m[6] * y + m[10] * z + m[14];\n        out[15] = m[3] * x + m[7] * y + m[11] * z + m[15];\n    } else {\n        a00 = m[0];\n        a01 = m[1];\n        a02 = m[2];\n        a03 = m[3];\n        a10 = m[4];\n        a11 = m[5];\n        a12 = m[6];\n        a13 = m[7];\n        a20 = m[8];\n        a21 = m[9];\n        a22 = m[10];\n        a23 = m[11];\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n        out[12] = a00 * x + a10 * y + a20 * z + m[12];\n        out[13] = a01 * x + a11 * y + a21 * z + m[13];\n        out[14] = a02 * x + a12 * y + a22 * z + m[14];\n        out[15] = a03 * x + a13 * y + a23 * z + m[15];\n    }\n    return out;\n}\nfunction $59dd9ee5df48d07b$export$a984e488de492859(x, y, z, out) {\n    out = out ?? $59dd9ee5df48d07b$export$185802fd694ee1f5();\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = x;\n    out[13] = y;\n    out[14] = z;\n    out[15] = 1;\n    return out;\n}\n\n\n\n\n/**\n * @module ol/webgl/Canvas\n */ const $5fb66954bcb40522$var$VERTEX_SHADER = `\n  attribute vec4 a_position;\n  attribute vec4 a_texcoord;\n\n  uniform mat4 u_matrix;\n  uniform mat4 u_textureMatrix;\n\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n    vec2 texcoord = (u_textureMatrix * a_texcoord).xy;\n    v_texcoord = texcoord;\n  }\n`;\nconst $5fb66954bcb40522$var$FRAGMENT_SHADER = `\n  precision mediump float;\n\n  varying vec2 v_texcoord;\n\n  uniform sampler2D u_texture;\n\n  void main() {\n    if (\n      v_texcoord.x < 0.0 ||\n      v_texcoord.y < 0.0 ||\n      v_texcoord.x > 1.0 ||\n      v_texcoord.y > 1.0\n    ) {\n      discard;\n    }\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n  }\n`;\nclass $5fb66954bcb40522$export$8d01c972ee8b14a9 {\n    /**\n   * @param {WebGLRenderingContext} gl Context to render in.\n   */ constructor(gl){\n        /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */ this.gl_ = gl;\n        /**\n     * @private\n     * @type {WebGLProgram}\n     */ this.program_ = $5fb66954bcb40522$export$327d24a04cd0dc17(gl, $5fb66954bcb40522$var$FRAGMENT_SHADER, $5fb66954bcb40522$var$VERTEX_SHADER);\n        this.positionLocation = gl.getAttribLocation(this.program_, 'a_position');\n        this.texcoordLocation = gl.getAttribLocation(this.program_, 'a_texcoord');\n        this.matrixLocation = gl.getUniformLocation(this.program_, 'u_matrix');\n        this.textureMatrixLocation = gl.getUniformLocation(this.program_, 'u_textureMatrix');\n        this.textureLocation = gl.getUniformLocation(this.program_, 'u_texture');\n        this.positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n        this.positions = [\n            0,\n            0,\n            0,\n            1,\n            1,\n            0,\n            1,\n            0,\n            0,\n            1,\n            1,\n            1\n        ];\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.positions), gl.STATIC_DRAW);\n        this.texcoordBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n        this.texcoords = [\n            0,\n            0,\n            0,\n            1,\n            1,\n            0,\n            1,\n            0,\n            0,\n            1,\n            1,\n            1\n        ];\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.texcoords), gl.STATIC_DRAW);\n    }\n    /**\n   * 2dContext drawImage call implemented in webgl.\n   * Unlike images, textures do not have a width and height associated\n   * with them so we'll pass in the width and height of the texture.\n   *\n   * @param {WebGLTexture} tex Image to draw.\n   * @param {number} texWidth Image width.\n   * @param {number} texHeight Image height.\n   * @param {number} srcX Top-left x-point to read src image.\n   * @param {number} srcY Top-left y-point to read src image.\n   * @param {number} [srcWidth] Width of source to read.\n   * @param {number} [srcHeight] Height of source to read.\n   * @param {number} [dstX] Top-left x-point of destination.\n   * @param {number} [dstY] Top-left y-point of destination.\n   * @param {number} [dstWidth] Width of written image in destination.\n   * @param {number} [dstHeight] Height of written image in destination.\n   * @param {number} [width] Width of canvas.\n   * @param {number} [height] Height of canvas.\n   */ drawImage(tex, texWidth, texHeight, srcX, srcY, srcWidth, srcHeight, dstX, dstY, dstWidth, dstHeight, width, height) {\n        const gl = this.gl_;\n        if (dstX === undefined) dstX = srcX;\n        if (dstY === undefined) dstY = srcY;\n        if (srcWidth === undefined) srcWidth = texWidth;\n        if (srcHeight === undefined) srcHeight = texHeight;\n        if (dstWidth === undefined) dstWidth = srcWidth;\n        if (dstHeight === undefined) dstHeight = srcHeight;\n        if (width === undefined) width = gl.canvas.width;\n        if (height === undefined) height = gl.canvas.height;\n        gl.bindTexture(gl.TEXTURE_2D, tex);\n        gl.useProgram(this.program_);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n        gl.enableVertexAttribArray(this.positionLocation);\n        gl.vertexAttribPointer(this.positionLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n        gl.enableVertexAttribArray(this.texcoordLocation);\n        gl.vertexAttribPointer(this.texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n        // matrix for converting pixels to clip space\n        let matrix = $59dd9ee5df48d07b$export$8e900afea9060a47(0, width, 0, height, -1, 1);\n        matrix = $59dd9ee5df48d07b$export$d73ee8ef04f5226a(matrix, dstX, dstY, 0);\n        matrix = $59dd9ee5df48d07b$export$dcdf75081b88279d(matrix, dstWidth, dstHeight, 1);\n        gl.uniformMatrix4fv(this.matrixLocation, false, matrix);\n        let texMatrix = $59dd9ee5df48d07b$export$a984e488de492859(srcX / texWidth, srcY / texHeight, 0);\n        texMatrix = $59dd9ee5df48d07b$export$dcdf75081b88279d(texMatrix, srcWidth / texWidth, srcHeight / texHeight, 1);\n        gl.uniformMatrix4fv(this.textureMatrixLocation, false, texMatrix);\n        gl.uniform1i(this.textureLocation, 0);\n        gl.drawArrays(gl.TRIANGLES, 0, this.positions.length / 2);\n    }\n}\n/**\n * @param {WebGLRenderingContext} gl Rendering Context.\n * @param {GLenum} type Type of shader.\n * @param {string} source source of shader.\n * @return {WebGLShader} [progam] The program.\n */ function $5fb66954bcb40522$var$createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    if (shader === null) throw new Error('Shader compilation failed');\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const log = gl.getShaderInfoLog(shader);\n        if (log === null) throw new Error('Shader info log creation failed');\n        throw new Error(log);\n    }\n    return shader;\n}\nfunction $5fb66954bcb40522$export$327d24a04cd0dc17(gl, fragmentSource, vertexSource) {\n    const program = gl.createProgram();\n    const vertexShader = $5fb66954bcb40522$var$createShader(gl, gl.VERTEX_SHADER, vertexSource);\n    const fragmentShader = $5fb66954bcb40522$var$createShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n    if (program === null) throw new Error('Program creation failed');\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        const log = gl.getProgramInfoLog(program);\n        if (log === null) throw new Error('Program info log creation failed');\n        throw new Error();\n    }\n    return program;\n}\n\n\n\nconst $ba02ac0b2ef6ec8b$var$EDGE_VERTEX_SHADER = `\n  attribute vec4 a_position;\n\n  uniform mat4 u_matrix;\n\n  void main() {\n     gl_Position = u_matrix * a_position;\n  }\n`;\nconst $ba02ac0b2ef6ec8b$var$EDGE_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform vec4 u_val;\n  void main() {\n     gl_FragColor = u_val;\n  }\n`;\nconst $ba02ac0b2ef6ec8b$var$TRIANGLE_VERTEX_SHADER = `\n  attribute vec4 a_position;\n  attribute vec2 a_texcoord;\n\n  varying vec2 v_texcoord;\n\n  uniform mat4 u_matrix;\n\n  void main() {\n     gl_Position = u_matrix * a_position;\n     v_texcoord = a_texcoord;\n  }\n`;\nconst $ba02ac0b2ef6ec8b$var$TRIANGLE_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  varying vec2 v_texcoord;\n\n  uniform sampler2D u_texture;\n\n  void main() {\n    if (v_texcoord.x < 0.0 || v_texcoord.x > 1.0 || v_texcoord.y < 0.0 || v_texcoord.y > 1.0) {\n      discard;\n    }\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n  }\n`;\nfunction $ba02ac0b2ef6ec8b$export$bf63dd57de5fe35c(width, height, canvasPool, settings) {\n    /** @type {HTMLCanvasElement|OffscreenCanvas} */ let canvas;\n    if (canvasPool && canvasPool.length) canvas = /** @type {HTMLCanvasElement} */ canvasPool.shift();\n    else if (0, $67c66761d21428d0$export$98fcef3dc9973292) canvas = new OffscreenCanvas(width || 300, height || 300);\n    else canvas = document.createElement('canvas');\n    if (width) canvas.width = width;\n    if (height) canvas.height = height;\n    //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n    return /** @type {WebGLRenderingContext} */ canvas.getContext('webgl', settings);\n}\nfunction $ba02ac0b2ef6ec8b$export$e8838428bef5211f(gl) {\n    const canvas = gl.canvas;\n    canvas.width = 1;\n    canvas.height = 1;\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n}\nconst $ba02ac0b2ef6ec8b$export$c7c6dba3373ce727 = [];\nfunction $ba02ac0b2ef6ec8b$export$b3890eb0ae9dca99(gl, width_, height_, pixelRatio, sourceResolution, targetResolution, targetExtent, triangulation, sources, gutter, dataType, renderEdges, interpolate, drawSingle) {\n    const width = Math.round(pixelRatio * width_);\n    const height = Math.round(pixelRatio * height_);\n    gl.canvas.width = width;\n    gl.canvas.height = height;\n    /** @type {WebGLFramebuffer | null} */ let resultFrameBuffer;\n    /** @type {WebGLTexture | null} */ let resultTexture;\n    resultTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, resultTexture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    if (interpolate) {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    } else {\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    }\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, dataType, null);\n    resultFrameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, resultFrameBuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, resultTexture, 0);\n    if (resultFrameBuffer === null) throw new Error('Could not create framebuffer');\n    if (resultTexture === null) throw new Error('Could not create texture');\n    if (sources.length === 0) return {\n        width: width,\n        height: height,\n        framebuffer: resultFrameBuffer,\n        texture: resultTexture\n    };\n    const sourceDataExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n    sources.forEach(function(src, i, arr) {\n        (0, $6da4c8ed3074c92b$export$8b58be045bf06082)(sourceDataExtent, src.extent);\n    });\n    /** @type {WebGLTexture | null} */ let stitchTexture;\n    /** @type {number} */ let stitchWidth;\n    /** @type {number} */ let stitchHeight;\n    const stitchScale = 1 / sourceResolution;\n    if (!drawSingle || sources.length !== 1 || gutter !== 0) {\n        stitchTexture = gl.createTexture();\n        if (resultTexture === null) throw new Error('Could not create texture');\n        stitchWidth = Math.round((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceDataExtent) * stitchScale);\n        stitchHeight = Math.round((0, $6da4c8ed3074c92b$export$c08559766941f856)(sourceDataExtent) * stitchScale);\n        // Make sure we do not exceed the max texture size by lowering the resolution for this image.\n        // https://github.com/openlayers/openlayers/pull/15860#issuecomment-2254123580\n        const maxTexSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        const largeSide = Math.max(stitchWidth, stitchHeight);\n        const scaleFactor = largeSide > maxTexSize ? maxTexSize / largeSide : 1;\n        const stitchWidthFixed = Math.round(stitchWidth * scaleFactor);\n        const stitchHeightFixed = Math.round(stitchHeight * scaleFactor);\n        gl.bindTexture(gl.TEXTURE_2D, stitchTexture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        if (interpolate) {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else {\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        }\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, stitchWidthFixed, stitchHeightFixed, 0, gl.RGBA, dataType, null);\n        const fb = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, stitchTexture, 0);\n        const webGLCanvas = new (0, $5fb66954bcb40522$export$8d01c972ee8b14a9)(gl);\n        sources.forEach(function(src, i, arr) {\n            const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale * scaleFactor;\n            const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale * scaleFactor;\n            const srcWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(src.extent) * stitchScale * scaleFactor;\n            const srcHeight = (0, $6da4c8ed3074c92b$export$c08559766941f856)(src.extent) * stitchScale * scaleFactor;\n            gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n            gl.viewport(0, 0, stitchWidthFixed, stitchHeightFixed);\n            if (src.clipExtent) {\n                const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale * scaleFactor;\n                const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale * scaleFactor;\n                const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(src.clipExtent) * stitchScale * scaleFactor;\n                const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(src.clipExtent) * stitchScale * scaleFactor;\n                gl.enable(gl.SCISSOR_TEST);\n                gl.scissor(interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? width : Math.round(xPos + width) - Math.round(xPos), interpolate ? height : Math.round(yPos + height) - Math.round(yPos));\n            }\n            webGLCanvas.drawImage(src.texture, src.width, src.height, gutter, gutter, src.width - 2 * gutter, src.height - 2 * gutter, interpolate ? xPos : Math.round(xPos), interpolate ? yPos : Math.round(yPos), interpolate ? srcWidth : Math.round(xPos + srcWidth) - Math.round(xPos), interpolate ? srcHeight : Math.round(yPos + srcHeight) - Math.round(yPos), stitchWidthFixed, stitchHeightFixed);\n            gl.disable(gl.SCISSOR_TEST);\n        });\n        gl.deleteFramebuffer(fb);\n    } else {\n        stitchTexture = sources[0].texture;\n        stitchWidth = sources[0].width;\n        stitchHeight = sources[0].width;\n    }\n    const targetTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(targetExtent);\n    const sourceTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(sourceDataExtent);\n    const getUVs = (/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ target)=>{\n        const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution * pixelRatio;\n        const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution * pixelRatio;\n        const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution * pixelRatio;\n        const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution * pixelRatio;\n        const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution * pixelRatio;\n        const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution * pixelRatio;\n        return {\n            u1: u1,\n            v1: v1,\n            u0: u0,\n            v0: v0,\n            u2: u2,\n            v2: v2\n        };\n    };\n    gl.bindFramebuffer(gl.FRAMEBUFFER, resultFrameBuffer);\n    gl.viewport(0, 0, width, height);\n    // Draw source to reprojtile\n    {\n        /** @type {Array<number>} */ const vertices = [];\n        /** @type {Array<number>} */ const texcoords = [];\n        const triProgram = (0, $5fb66954bcb40522$export$327d24a04cd0dc17)(gl, $ba02ac0b2ef6ec8b$var$TRIANGLE_FRAGMENT_SHADER, $ba02ac0b2ef6ec8b$var$TRIANGLE_VERTEX_SHADER);\n        gl.useProgram(triProgram);\n        // Bind image\n        const textureLocation = gl.getUniformLocation(triProgram, 'u_texture');\n        gl.bindTexture(gl.TEXTURE_2D, stitchTexture);\n        // Tell the shader to get the texture from texture unit 0\n        gl.uniform1i(textureLocation, 0);\n        // Calculate vert and tex coordinates.\n        triangulation.getTriangles().forEach(function(triangle, i, arr) {\n            const source = triangle.source;\n            const target = triangle.target;\n            // Make sure that everything is on pixel boundaries\n            const { u1: u1, v1: v1, u0: u0, v0: v0, u2: u2, v2: v2 } = getUVs(target);\n            const su0 = (source[0][0] - sourceTopLeft[0]) / sourceResolution / stitchWidth;\n            const sv0 = -(source[0][1] - sourceTopLeft[1]) / sourceResolution / stitchHeight;\n            const su1 = (source[1][0] - sourceTopLeft[0]) / sourceResolution / stitchWidth;\n            const sv1 = -(source[1][1] - sourceTopLeft[1]) / sourceResolution / stitchHeight;\n            const su2 = (source[2][0] - sourceTopLeft[0]) / sourceResolution / stitchWidth;\n            const sv2 = -(source[2][1] - sourceTopLeft[1]) / sourceResolution / stitchHeight;\n            vertices.push(u1, v1, u0, v0, u2, v2);\n            texcoords.push(su1, sv1, su0, sv0, su2, sv2);\n        });\n        // Convert pixel space to clip space.\n        const matrix = $59dd9ee5df48d07b$export$8e900afea9060a47(0, width, height, 0, -1, 1);\n        const matrixLocation = gl.getUniformLocation(triProgram, 'u_matrix');\n        gl.uniformMatrix4fv(matrixLocation, false, matrix);\n        const positionLocation = gl.getAttribLocation(triProgram, 'a_position');\n        const positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(positionLocation);\n        const texcoordLocation = gl.getAttribLocation(triProgram, 'a_texcoord');\n        const texcoordBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texcoords), gl.STATIC_DRAW);\n        gl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(texcoordLocation);\n        gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n    }\n    if (renderEdges) {\n        const edgeProgram = (0, $5fb66954bcb40522$export$327d24a04cd0dc17)(gl, $ba02ac0b2ef6ec8b$var$EDGE_FRAGMENT_SHADER, $ba02ac0b2ef6ec8b$var$EDGE_VERTEX_SHADER);\n        gl.useProgram(edgeProgram);\n        const matrix = $59dd9ee5df48d07b$export$8e900afea9060a47(0, width, height, 0, -1, 1);\n        const matrixLocation = gl.getUniformLocation(edgeProgram, 'u_matrix');\n        gl.uniformMatrix4fv(matrixLocation, false, matrix);\n        const burnval = Array.isArray(renderEdges) ? renderEdges : [\n            0,\n            0,\n            0,\n            255\n        ];\n        const burnvalLocation = gl.getUniformLocation(edgeProgram, 'u_val');\n        const isFloat = true;\n        if (isFloat) gl.uniform4fv(burnvalLocation, burnval);\n        else gl.uniform4iv(burnvalLocation, burnval);\n        const positionLocation = gl.getAttribLocation(edgeProgram, 'a_position');\n        const positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n        gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(positionLocation);\n        /** @type {Array<number>} */ const lines = triangulation.getTriangles().reduce(function(/** @type {Array<number>} */ lines, triangle) {\n            const target = triangle.target;\n            const { u1: u1, v1: v1, u0: u0, v0: v0, u2: u2, v2: v2 } = getUVs(target);\n            return lines.concat([\n                u1,\n                v1,\n                u0,\n                v0,\n                u0,\n                v0,\n                u2,\n                v2,\n                u2,\n                v2,\n                u1,\n                v1\n            ]);\n        }, []);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(lines), gl.STATIC_DRAW);\n        gl.drawArrays(gl.LINES, 0, lines.length / 2);\n    }\n    return {\n        width: width,\n        height: height,\n        framebuffer: resultFrameBuffer,\n        texture: resultTexture\n    };\n}\n\n\n\n\n\n\n/**\n * @typedef {function(number, number, number, number) : import(\"../DataTile.js\").default} TileGetter\n */ /**\n * @typedef {Object} TileOffset\n * @property {DataTile} tile Tile.\n * @property {number} offset Offset.\n */ /**\n * @typedef {Object} Options\n * @property {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n * @property {import(\"../proj/Projection.js\").default} targetProj Target projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n * @property {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n * @property {import(\"../tilecoord.js\").TileCoord} [wrappedTileCoord] Coordinate of the tile wrapped in X.\n * @property {number} pixelRatio Pixel ratio.\n * @property {number} gutter Gutter of the source tiles.\n * @property {TileGetter} getTileFunction Function returning source tiles (z, x, y, pixelRatio).\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {number} [errorThreshold] Acceptable reprojection error (in px).\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {import(\"../transform.js\").Transform} [transformMatrix] Source transform matrix.\n * @property {boolean} [renderEdges] Render reprojection edges.\n */ /**\n * @classdesc\n * Class encapsulating single reprojected data tile.\n * See {@link module:ol/source/DataTile~DataTileSource}.\n *\n */ class $4eec0210e41cb24b$var$ReprojDataTile extends (0, $fd518ba473015b27$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Tile options.\n   */ constructor(options){\n        super({\n            tileCoord: options.tileCoord,\n            loader: ()=>Promise.resolve(new Uint8ClampedArray(4)),\n            interpolate: options.interpolate,\n            transition: options.transition\n        });\n        /**\n     * @private\n     * @type {boolean | Array<number>}\n     */ this.renderEdges_ = options.renderEdges !== undefined ? options.renderEdges : false;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = options.pixelRatio;\n        /**\n     * @private\n     * @type {number}\n     */ this.gutter_ = options.gutter;\n        /**\n     * @type {import(\"../DataTile.js\").Data}\n     * @private\n     */ this.reprojData_ = null;\n        /**\n     * @type {Error}\n     * @private\n     */ this.reprojError_ = null;\n        /**\n     * @type {import('../size.js').Size}\n     * @private\n     */ this.reprojSize_ = undefined;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.sourceTileGrid_ = options.sourceTileGrid;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.targetTileGrid_ = options.targetTileGrid;\n        /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */ this.wrappedTileCoord_ = options.wrappedTileCoord || options.tileCoord;\n        /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */ this.sourceTiles_ = [];\n        /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */ this.sourcesListenerKeys_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.sourceZ_ = 0;\n        const sourceProj = options.sourceProj;\n        const sourceProjExtent = sourceProj.getExtent();\n        const sourceTileGridExtent = options.sourceTileGrid.getExtent();\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.clipExtent_ = sourceProj.canWrapX() ? sourceTileGridExtent ? (0, $6da4c8ed3074c92b$export$72209efa88586d42)(sourceProjExtent, sourceTileGridExtent) : sourceProjExtent : sourceTileGridExtent;\n        const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n        const maxTargetExtent = this.targetTileGrid_.getExtent();\n        let maxSourceExtent = this.sourceTileGrid_.getExtent();\n        const limitedTargetExtent = maxTargetExtent ? (0, $6da4c8ed3074c92b$export$72209efa88586d42)(targetExtent, maxTargetExtent) : targetExtent;\n        if ((0, $6da4c8ed3074c92b$export$520c40045967cb15)(limitedTargetExtent) === 0) {\n            // Tile is completely outside range -> EMPTY\n            // TODO: is it actually correct that the source even creates the tile ?\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        if (sourceProjExtent) {\n            if (!maxSourceExtent) maxSourceExtent = sourceProjExtent;\n            else maxSourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(maxSourceExtent, sourceProjExtent);\n        }\n        const targetResolution = this.targetTileGrid_.getResolution(this.wrappedTileCoord_[0]);\n        const targetProj = options.targetProj;\n        const sourceResolution = (0, $2b0a118af78fb031$export$16d356211d01f1cc)(sourceProj, targetProj, limitedTargetExtent, targetResolution);\n        if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n            // invalid sourceResolution -> EMPTY\n            // probably edges of the projections when no extent is defined\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        const errorThresholdInPixels = options.errorThreshold !== undefined ? options.errorThreshold : (0, $8ea51dd7be3ba5e2$export$3ecb4bcfa5aae855);\n        /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */ this.triangulation_ = new (0, $6be53f6edfbf1854$export$2e2bcd8739ae039)(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution, options.transformMatrix);\n        if (this.triangulation_.getTriangles().length === 0) {\n            // no valid triangles -> EMPTY\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        this.sourceZ_ = this.sourceTileGrid_.getZForResolution(sourceResolution);\n        let sourceExtent = this.triangulation_.calculateSourceExtent();\n        if (maxSourceExtent) {\n            if (sourceProj.canWrapX()) {\n                sourceExtent[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n                sourceExtent[3] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n            } else sourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(sourceExtent, maxSourceExtent);\n        }\n        if (!(0, $6da4c8ed3074c92b$export$520c40045967cb15)(sourceExtent)) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        else {\n            let worldWidth = 0;\n            let worldsAway = 0;\n            if (sourceProj.canWrapX()) {\n                worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceProjExtent);\n                worldsAway = Math.floor((sourceExtent[0] - sourceProjExtent[0]) / worldWidth);\n            }\n            const sourceExtents = (0, $6da4c8ed3074c92b$export$9031237f01de0947)(sourceExtent.slice(), sourceProj, true);\n            sourceExtents.forEach((extent)=>{\n                const sourceRange = this.sourceTileGrid_.getTileRangeForExtentAndZ(extent, this.sourceZ_);\n                const getTile = options.getTileFunction;\n                for(let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++)for(let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++){\n                    const tile = getTile(this.sourceZ_, srcX, srcY, this.pixelRatio_);\n                    if (tile) {\n                        const offset = worldsAway * worldWidth;\n                        this.sourceTiles_.push({\n                            tile: tile,\n                            offset: offset\n                        });\n                    }\n                }\n                ++worldsAway;\n            });\n            if (this.sourceTiles_.length === 0) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        }\n    }\n    /**\n   * Get the tile size.\n   * @return {import('../size.js').Size} Tile size.\n   * @override\n   */ getSize() {\n        return this.reprojSize_;\n    }\n    /**\n   * Get the data for the tile.\n   * @return {import(\"../DataTile.js\").Data} Tile data.\n   * @override\n   */ getData() {\n        return this.reprojData_;\n    }\n    /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @override\n   */ getError() {\n        return this.reprojError_;\n    }\n    /**\n   * @private\n   */ reproject_() {\n        const dataSources = [];\n        let imageLike = false;\n        this.sourceTiles_.forEach((source)=>{\n            const tile = source.tile;\n            if (!tile || tile.getState() !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) return;\n            const size = tile.getSize();\n            const gutter = this.gutter_;\n            /**\n       * @type {import(\"../DataTile.js\").ArrayLike}\n       */ let tileData;\n            const arrayData = (0, $fd518ba473015b27$export$7386cb0413f6b283)(tile.getData());\n            if (arrayData) tileData = arrayData;\n            else {\n                imageLike = true;\n                tileData = (0, $fd518ba473015b27$export$45b10814cc054894)((0, $fd518ba473015b27$export$3a7c913cb40dcb7d)(tile.getData()));\n            }\n            const pixelSize = [\n                size[0] + 2 * gutter,\n                size[1] + 2 * gutter\n            ];\n            const isFloat = tileData instanceof Float32Array;\n            const pixelCount = pixelSize[0] * pixelSize[1];\n            const DataType = isFloat ? Float32Array : Uint8ClampedArray;\n            const tileDataR = new DataType(tileData.buffer);\n            const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n            const bytesPerPixel = bytesPerElement * tileDataR.length / pixelCount;\n            const bytesPerRow = tileDataR.byteLength / pixelSize[1];\n            const bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n            const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n            extent[0] += source.offset;\n            extent[2] += source.offset;\n            const clipExtent = this.clipExtent_?.slice();\n            if (clipExtent) {\n                clipExtent[0] += source.offset;\n                clipExtent[2] += source.offset;\n            }\n            dataSources.push({\n                extent: extent,\n                clipExtent: clipExtent,\n                data: tileDataR,\n                dataType: DataType,\n                bytesPerPixel: bytesPerPixel,\n                pixelSize: pixelSize,\n                bandCount: bandCount\n            });\n        });\n        this.sourceTiles_.length = 0;\n        if (dataSources.length === 0) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n            this.changed();\n            return;\n        }\n        const z = this.wrappedTileCoord_[0];\n        const size = this.targetTileGrid_.getTileSize(z);\n        const targetWidth = typeof size === 'number' ? size : size[0];\n        const targetHeight = typeof size === 'number' ? size : size[1];\n        const outWidth = targetWidth * this.pixelRatio_;\n        const outHeight = targetHeight * this.pixelRatio_;\n        const targetResolution = this.targetTileGrid_.getResolution(z);\n        const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n        const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n        const bandCount = dataSources[0].bandCount;\n        const dataR = new dataSources[0].dataType(bandCount * outWidth * outHeight);\n        const gl = (0, $ba02ac0b2ef6ec8b$export$bf63dd57de5fe35c)(outWidth, outHeight, (0, $ba02ac0b2ef6ec8b$export$c7c6dba3373ce727), {\n            premultipliedAlpha: false,\n            antialias: false\n        });\n        let willInterpolate;\n        const format = gl.RGBA;\n        let textureType;\n        if (dataSources[0].dataType == Float32Array) {\n            textureType = gl.FLOAT;\n            gl.getExtension('WEBGL_color_buffer_float');\n            gl.getExtension('OES_texture_float');\n            gl.getExtension('EXT_float_blend');\n            const extension = gl.getExtension('OES_texture_float_linear');\n            const canInterpolate = extension !== null;\n            willInterpolate = canInterpolate && this.interpolate;\n        } else {\n            textureType = gl.UNSIGNED_BYTE;\n            willInterpolate = this.interpolate;\n        }\n        const BANDS_PR_REPROJ = 4;\n        const reprojs = Math.ceil(bandCount / BANDS_PR_REPROJ);\n        for(let reproj = reprojs - 1; reproj >= 0; --reproj){\n            const sources = [];\n            for(let i = 0, len = dataSources.length; i < len; ++i){\n                const dataSource = dataSources[i];\n                const pixelSize = dataSource.pixelSize;\n                const width = pixelSize[0];\n                const height = pixelSize[1];\n                const data = new dataSource.dataType(BANDS_PR_REPROJ * width * height);\n                const dataS = dataSource.data;\n                let offset = reproj * BANDS_PR_REPROJ;\n                for(let j = 0, len = data.length; j < len; j += BANDS_PR_REPROJ){\n                    data[j] = dataS[offset];\n                    data[j + 1] = dataS[offset + 1];\n                    data[j + 2] = dataS[offset + 2];\n                    data[j + 3] = dataS[offset + 3];\n                    offset += bandCount;\n                }\n                const texture = gl.createTexture();\n                gl.bindTexture(gl.TEXTURE_2D, texture);\n                if (willInterpolate) {\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n                } else {\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                }\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                gl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, textureType, data);\n                sources.push({\n                    extent: dataSource.extent,\n                    clipExtent: dataSource.clipExtent,\n                    texture: texture,\n                    width: width,\n                    height: height\n                });\n            }\n            const { framebuffer: framebuffer, width: width, height: height } = (0, $ba02ac0b2ef6ec8b$export$b3890eb0ae9dca99)(gl, targetWidth, targetHeight, this.pixelRatio_, sourceResolution, targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, textureType, this.renderEdges_, willInterpolate);\n            // The texture is always RGBA.\n            const rows = width;\n            const cols = height * BANDS_PR_REPROJ;\n            const data = new dataSources[0].dataType(rows * cols);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n            gl.readPixels(0, 0, width, height, gl.RGBA, textureType, data);\n            let offset = reproj * BANDS_PR_REPROJ;\n            for(let i = 0, len = data.length; i < len; i += BANDS_PR_REPROJ){\n                // The data read by `readPixels` is flipped in the y-axis so flip it again.\n                const flipY = (rows - 1 - (i / cols | 0)) * cols + i % cols;\n                dataR[offset] = data[flipY];\n                dataR[offset + 1] = data[flipY + 1];\n                dataR[offset + 2] = data[flipY + 2];\n                dataR[offset + 3] = data[flipY + 3];\n                offset += bandCount;\n            }\n        }\n        (0, $ba02ac0b2ef6ec8b$export$e8838428bef5211f)(gl);\n        (0, $ba02ac0b2ef6ec8b$export$c7c6dba3373ce727).push(gl.canvas);\n        if (imageLike) {\n            const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(targetWidth, targetHeight);\n            const imageData = new ImageData(dataR, targetWidth);\n            context.putImageData(imageData, 0, 0);\n            this.reprojData_ = context.canvas;\n        } else this.reprojData_ = dataR;\n        this.reprojSize_ = [\n            Math.round(outWidth),\n            Math.round(outHeight)\n        ];\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        this.changed();\n    }\n    /**\n   * Load not yet loaded URI.\n   * @override\n   */ load() {\n        if (this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE && this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) return;\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n        this.changed();\n        let leftToLoad = 0;\n        this.sourcesListenerKeys_ = [];\n        this.sourceTiles_.forEach(({ tile: tile })=>{\n            const state = tile.getState();\n            if (state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE && state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) return;\n            leftToLoad++;\n            const sourceListenKey = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(tile, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, ()=>{\n                const state = tile.getState();\n                if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) {\n                    (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(sourceListenKey);\n                    leftToLoad--;\n                    if (leftToLoad === 0) {\n                        this.unlistenSources_();\n                        this.reproject_();\n                    }\n                }\n            });\n            this.sourcesListenerKeys_.push(sourceListenKey);\n        });\n        if (leftToLoad === 0) setTimeout(this.reproject_.bind(this), 0);\n        else this.sourceTiles_.forEach(function({ tile: tile }) {\n            const state = tile.getState();\n            if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) tile.load();\n        });\n    }\n    /**\n   * @private\n   */ unlistenSources_() {\n        this.sourcesListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.sourcesListenerKeys_ = null;\n    }\n}\nvar $4eec0210e41cb24b$export$2e2bcd8739ae039 = $4eec0210e41cb24b$var$ReprojDataTile;\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @param {string} sourceKey The source key.\n * @param {number} z The tile z level.\n * @param {number} x The tile x level.\n * @param {number} y The tile y level.\n * @return {string} The cache key.\n */ function $02fffef185f4339b$var$getCacheKey(sourceKey, z, x, y) {\n    return `${sourceKey},${(0, $bf2a04496fadabc6$export$92d0df0f1d25c63c)(z, x, y)}`;\n}\n/**\n * @typedef {Object<number, Set<import(\"../../Tile.js\").default>>} TileLookup\n */ /**\n * Add a tile to the lookup.\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @param {number} z The zoom level.\n * @return {boolean} The tile was added to the lookup.\n */ function $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, z) {\n    if (!(z in tilesByZ)) {\n        tilesByZ[z] = new Set([\n            tile\n        ]);\n        return true;\n    }\n    const set = tilesByZ[z];\n    const existing = set.has(tile);\n    if (!existing) set.add(tile);\n    return !existing;\n}\n/**\n * Remove a tile from the lookup.\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @param {number} z The zoom level.\n * @return {boolean} The tile was removed from the lookup.\n */ function $02fffef185f4339b$var$removeTileFromLookup(tilesByZ, tile, z) {\n    const set = tilesByZ[z];\n    if (set) return set.delete(tile);\n    return false;\n}\n/**\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */ function $02fffef185f4339b$var$getRenderExtent(frameState, extent) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    if (layerState.extent) extent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(extent, (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, frameState.viewState.projection));\n    const source = /** @type {import(\"../../source/Tile.js\").default} */ layerState.layer.getRenderSource();\n    if (!source.getWrapX()) {\n        const gridExtent = source.getTileGridForProjection(frameState.viewState.projection).getExtent();\n        if (gridExtent) extent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(extent, gridExtent);\n    }\n    return extent;\n}\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize=512] The cache size.\n */ /**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */ class $02fffef185f4339b$var$CanvasTileLayerRenderer extends (0, $42152f52b26b6ca7$export$2e2bcd8739ae039) {\n    /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} [options] Options.\n   */ constructor(tileLayer, options){\n        super(tileLayer);\n        options = options || {};\n        /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */ this.extentChanged = true;\n        /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */ this.renderComplete = false;\n        /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */ this.renderedExtent_ = null;\n        /**\n     * @protected\n     * @type {number}\n     */ this.renderedPixelRatio;\n        /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default|null}\n     */ this.renderedProjection = null;\n        /**\n     * @protected\n     * @type {number}\n     */ this.renderedRevision;\n        /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */ this.renderedTiles = [];\n        /**\n     * @private\n     * @type {string}\n     */ this.renderedSourceKey_;\n        /**\n     * @private\n     * @type {number}\n     */ this.renderedSourceRevision_;\n        /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.tempExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */ this.tempTileRange_ = new (0, $550e524b0d1b61d4$export$2e2bcd8739ae039)(0, 0, 0, 0);\n        /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */ this.tempTileCoord_ = (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(0, 0, 0);\n        const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n        /**\n     * @type {import(\"../../structs/LRUCache.js\").default<import(\"../../Tile.js\").default>}\n     * @private\n     */ this.tileCache_ = new (0, $859b1614288c6316$export$2e2bcd8739ae039)(cacheSize);\n        this.maxStaleKeys = cacheSize * 0.5;\n    }\n    /**\n   * @return {LRUCache} Tile cache.\n   */ getTileCache() {\n        return this.tileCache_;\n    }\n    /**\n   * Get a tile from the cache or create one if needed.\n   *\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\n   * @protected\n   */ getOrCreateTile(z, x, y, frameState) {\n        const tileCache = this.tileCache_;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getSource();\n        const cacheKey = $02fffef185f4339b$var$getCacheKey(tileSource.getKey(), z, x, y);\n        /** @type {import(\"../../Tile.js\").default} */ let tile;\n        if (tileCache.containsKey(cacheKey)) tile = tileCache.get(cacheKey);\n        else {\n            tile = tileSource.getTile(z, x, y, frameState.pixelRatio, frameState.viewState.projection);\n            if (!tile) return null;\n            tileCache.set(cacheKey, tile);\n        }\n        return tile;\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\n   * @protected\n   */ getTile(z, x, y, frameState) {\n        const tile = this.getOrCreateTile(z, x, y, frameState);\n        if (!tile) return null;\n        return tile;\n    }\n    /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   * @override\n   */ getData(pixel) {\n        const frameState = this.frameState;\n        if (!frameState) return null;\n        const layer = this.getLayer();\n        const coordinate = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());\n        const layerExtent = layer.getExtent();\n        if (layerExtent) {\n            if (!(0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(layerExtent, coordinate)) return null;\n        }\n        const viewState = frameState.viewState;\n        const source = layer.getRenderSource();\n        const tileGrid = source.getTileGridForProjection(viewState.projection);\n        const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n        for(let z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z){\n            const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n            const tile = this.getTile(z, tileCoord[1], tileCoord[2], frameState);\n            if (!tile || tile.getState() !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) continue;\n            const tileOrigin = tileGrid.getOrigin(z);\n            const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z));\n            const tileResolution = tileGrid.getResolution(z);\n            /**\n       * @type {import('../../DataTile.js').ImageLike}\n       */ let image;\n            if (tile instanceof (0, $cd3bc8d185522361$export$2e2bcd8739ae039) || tile instanceof (0, $398e350e33050c07$export$2e2bcd8739ae039)) image = tile.getImage();\n            else if (tile instanceof (0, $fd518ba473015b27$export$2e2bcd8739ae039)) {\n                image = (0, $fd518ba473015b27$export$3a7c913cb40dcb7d)(tile.getData());\n                if (!image) continue;\n            } else continue;\n            const col = Math.floor(tilePixelRatio * ((coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0]));\n            const row = Math.floor(tilePixelRatio * ((tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1]));\n            const gutter = Math.round(tilePixelRatio * source.getGutterForProjection(viewState.projection));\n            return this.getImageData(image, col + gutter, row + gutter);\n        }\n        return null;\n    }\n    /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */ prepareFrame(frameState) {\n        if (!this.renderedProjection) this.renderedProjection = frameState.viewState.projection;\n        else if (frameState.viewState.projection !== this.renderedProjection) {\n            this.tileCache_.clear();\n            this.renderedProjection = frameState.viewState.projection;\n        }\n        const source = this.getLayer().getSource();\n        if (!source) return false;\n        const sourceRevision = source.getRevision();\n        if (!this.renderedRevision_) this.renderedRevision_ = sourceRevision;\n        else if (this.renderedRevision_ !== sourceRevision) {\n            this.renderedRevision_ = sourceRevision;\n            if (this.renderedSourceKey_ === source.getKey()) this.tileCache_.clear();\n        }\n        return true;\n    }\n    /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n   * @param {number} preload Number of additional levels to load.\n   */ enqueueTiles(frameState, extent, initialZ, tilesByZ, preload) {\n        const viewState = frameState.viewState;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getRenderSource();\n        const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n        const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n        if (!(tileSourceKey in frameState.wantedTiles)) frameState.wantedTiles[tileSourceKey] = {};\n        const wantedTiles = frameState.wantedTiles[tileSourceKey];\n        const map = tileLayer.getMapInternal();\n        const minZ = Math.max(initialZ - preload, tileGrid.getMinZoom(), tileGrid.getZForResolution(Math.min(tileLayer.getMaxResolution(), map ? map.getView().getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0)) : tileGrid.getResolution(0)), tileSource.zDirection));\n        for(let z = initialZ; z >= minZ; --z){\n            const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, this.tempTileRange_);\n            const tileResolution = tileGrid.getResolution(z);\n            for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){\n                const tile = this.getTile(z, x, y, frameState);\n                if (!tile) continue;\n                const added = $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, z);\n                if (!added) continue;\n                const tileQueueKey = tile.getKey();\n                wantedTiles[tileQueueKey] = true;\n                if (tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n                    if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n                        const tileCoord = (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, x, y, this.tempTileCoord_);\n                        frameState.tileQueue.enqueue([\n                            tile,\n                            tileSourceKey,\n                            tileGrid.getTileCoordCenter(tileCoord),\n                            tileResolution\n                        ]);\n                    }\n                }\n            }\n        }\n    }\n    /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */ findStaleTile_(tileCoord, tilesByZ) {\n        const tileCache = this.tileCache_;\n        const z = tileCoord[0];\n        const x = tileCoord[1];\n        const y = tileCoord[2];\n        const staleKeys = this.getStaleKeys();\n        for(let i = 0; i < staleKeys.length; ++i){\n            const cacheKey = $02fffef185f4339b$var$getCacheKey(staleKeys[i], z, x, y);\n            if (tileCache.containsKey(cacheKey)) {\n                const tile = tileCache.get(cacheKey);\n                if (tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                    tile.endTransition((0, $6c5e11070e371322$export$5e82334337e0f204)(this));\n                    $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, z);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */ findAltTiles_(tileGrid, tileCoord, altZ, tilesByZ) {\n        const tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);\n        if (!tileRange) return false;\n        let covered = true;\n        const tileCache = this.tileCache_;\n        const source = this.getLayer().getRenderSource();\n        const sourceKey = source.getKey();\n        for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){\n            const cacheKey = $02fffef185f4339b$var$getCacheKey(sourceKey, altZ, x, y);\n            let loaded = false;\n            if (tileCache.containsKey(cacheKey)) {\n                const tile = tileCache.get(cacheKey);\n                if (tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                    $02fffef185f4339b$var$addTileToLookup(tilesByZ, tile, altZ);\n                    loaded = true;\n                }\n            }\n            if (!loaded) covered = false;\n        }\n        return covered;\n    }\n    /**\n   * Render the layer.\n   *\n   * The frame rendering logic has three parts:\n   *\n   *  1. Enqueue tiles\n   *  2. Find alt tiles for those that are not yet loaded\n   *  3. Render loaded tiles\n   *\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */ renderFrame(frameState, target) {\n        let allTilesIdle = true;\n        this.renderComplete = true;\n        /**\n     * TODO:\n     *  * maybe skip transition when not fully opaque\n     *  * decide if this.renderComplete is useful\n     */ const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const viewState = frameState.viewState;\n        const projection = viewState.projection;\n        const viewResolution = viewState.resolution;\n        const viewCenter = viewState.center;\n        const pixelRatio = frameState.pixelRatio;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getSource();\n        const sourceRevision = tileSource.getRevision();\n        const tileGrid = tileSource.getTileGridForProjection(projection);\n        const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n        const tileResolution = tileGrid.getResolution(z);\n        const sourceKey = tileSource.getKey();\n        if (!this.renderedSourceKey_) this.renderedSourceKey_ = sourceKey;\n        else if (this.renderedSourceKey_ !== sourceKey) {\n            this.prependStaleKey(this.renderedSourceKey_);\n            this.renderedSourceKey_ = sourceKey;\n        }\n        let frameExtent = frameState.extent;\n        const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n        this.prepareContainer(frameState, target);\n        // desired dimensions of the canvas in pixels\n        const width = this.context.canvas.width;\n        const height = this.context.canvas.height;\n        const layerExtent = layerState.extent && (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection);\n        if (layerExtent) frameExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(frameExtent, (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection));\n        const dx = tileResolution * width / 2 / tilePixelRatio;\n        const dy = tileResolution * height / 2 / tilePixelRatio;\n        const canvasExtent = [\n            viewCenter[0] - dx,\n            viewCenter[1] - dy,\n            viewCenter[0] + dx,\n            viewCenter[1] + dy\n        ];\n        /**\n     * @type {TileLookup}\n     */ const tilesByZ = {};\n        this.renderedTiles.length = 0;\n        /**\n     * Part 1: Enqueue tiles\n     */ const preload = tileLayer.getPreload();\n        if (frameState.nextExtent) {\n            const targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);\n            const nextExtent = $02fffef185f4339b$var$getRenderExtent(frameState, frameState.nextExtent);\n            this.enqueueTiles(frameState, nextExtent, targetZ, tilesByZ, preload);\n        }\n        const renderExtent = $02fffef185f4339b$var$getRenderExtent(frameState, frameExtent);\n        this.enqueueTiles(frameState, renderExtent, z, tilesByZ, 0);\n        if (preload > 0) setTimeout(()=>{\n            this.enqueueTiles(frameState, renderExtent, z - 1, tilesByZ, preload - 1);\n        }, 0);\n        if (!(z in tilesByZ)) return this.container;\n        /**\n     * Part 2: Find alt tiles for those that are not yet loaded\n     */ const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        const time = frameState.time;\n        // look for cached tiles to use if a target tile is not ready\n        for (const tile of tilesByZ[z]){\n            const tileState = tile.getState();\n            if ((tile instanceof (0, $398e350e33050c07$export$2e2bcd8739ae039) || tile instanceof (0, $4eec0210e41cb24b$export$2e2bcd8739ae039)) && tileState === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) continue;\n            const tileCoord = tile.tileCoord;\n            if (tileState === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                const alpha = tile.getAlpha(uid, time);\n                if (alpha === 1) {\n                    // no need to look for alt tiles\n                    tile.endTransition(uid);\n                    continue;\n                }\n            }\n            if (tileState !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) allTilesIdle = false;\n            if (tileState !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) this.renderComplete = false;\n            const hasStaleTile = this.findStaleTile_(tileCoord, tilesByZ);\n            if (hasStaleTile) {\n                // use the stale tile before the new tile's transition has completed\n                $02fffef185f4339b$var$removeTileFromLookup(tilesByZ, tile, z);\n                frameState.animate = true;\n                continue;\n            }\n            // first look for child tiles (at z + 1)\n            const coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tilesByZ);\n            if (coveredByChildren) continue;\n            // next look for parent tiles\n            const minZoom = tileGrid.getMinZoom();\n            for(let parentZ = z - 1; parentZ >= minZoom; --parentZ){\n                const coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tilesByZ);\n                if (coveredByParent) break;\n            }\n        }\n        /**\n     * Part 3: Render loaded tiles\n     */ const canvasScale = tileResolution / viewResolution * pixelRatio / tilePixelRatio;\n        const context = this.getRenderContext(frameState);\n        // set scale transform for calculating tile positions on the canvas\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n        if (layerState.extent) this.clipUnrotated(context, frameState, layerExtent);\n        if (!tileSource.getInterpolate()) context.imageSmoothingEnabled = false;\n        this.preRender(context, frameState);\n        /** @type {Array<number>} */ const zs = Object.keys(tilesByZ).map(Number);\n        zs.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        let currentClip;\n        const clips = [];\n        const clipZs = [];\n        for(let i = zs.length - 1; i >= 0; --i){\n            const currentZ = zs[i];\n            const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n            const currentResolution = tileGrid.getResolution(currentZ);\n            const currentScale = currentResolution / tileResolution;\n            const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n            const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n            const originTileCoord = tileGrid.getTileCoordForCoordAndZ((0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(canvasExtent), currentZ);\n            const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n            const origin = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(this.tempTransform, [\n                tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,\n                tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution\n            ]);\n            const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n            for (const tile of tilesByZ[currentZ]){\n                if (tile.getState() !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) continue;\n                const tileCoord = tile.tileCoord;\n                // Calculate integer positions and sizes so that tiles align\n                const xIndex = originTileCoord[1] - tileCoord[1];\n                const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n                const yIndex = originTileCoord[2] - tileCoord[2];\n                const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n                const x = Math.round(origin[0] - xIndex * dx);\n                const y = Math.round(origin[1] - yIndex * dy);\n                const w = nextX - x;\n                const h = nextY - y;\n                const transition = zs.length === 1;\n                let contextSaved = false;\n                // Clip mask for regions in this tile that already filled by a higher z tile\n                currentClip = [\n                    x,\n                    y,\n                    x + w,\n                    y,\n                    x + w,\n                    y + h,\n                    x,\n                    y + h\n                ];\n                for(let i = 0, ii = clips.length; i < ii; ++i)if (!transition && currentZ < clipZs[i]) {\n                    const clip = clips[i];\n                    if ((0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)([\n                        x,\n                        y,\n                        x + w,\n                        y + h\n                    ], [\n                        clip[0],\n                        clip[3],\n                        clip[4],\n                        clip[7]\n                    ])) {\n                        if (!contextSaved) {\n                            context.save();\n                            contextSaved = true;\n                        }\n                        context.beginPath();\n                        // counter-clockwise (outer ring) for current tile\n                        context.moveTo(currentClip[0], currentClip[1]);\n                        context.lineTo(currentClip[2], currentClip[3]);\n                        context.lineTo(currentClip[4], currentClip[5]);\n                        context.lineTo(currentClip[6], currentClip[7]);\n                        // clockwise (inner ring) for higher z tile\n                        context.moveTo(clip[6], clip[7]);\n                        context.lineTo(clip[4], clip[5]);\n                        context.lineTo(clip[2], clip[3]);\n                        context.lineTo(clip[0], clip[1]);\n                        context.clip();\n                    }\n                }\n                clips.push(currentClip);\n                clipZs.push(currentZ);\n                this.drawTile(tile, frameState, x, y, w, h, tileGutter, transition);\n                if (contextSaved) context.restore();\n                this.renderedTiles.unshift(tile);\n                // TODO: decide if this is necessary\n                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n            }\n        }\n        this.renderedRevision = sourceRevision;\n        this.renderedResolution = tileResolution;\n        this.extentChanged = !this.renderedExtent_ || !(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(this.renderedExtent_, canvasExtent);\n        this.renderedExtent_ = canvasExtent;\n        this.renderedPixelRatio = pixelRatio;\n        this.postRender(this.context, frameState);\n        if (layerState.extent) context.restore();\n        context.imageSmoothingEnabled = true;\n        if (this.renderComplete) {\n            /**\n       * @param {import(\"../../Map.js\").default} map Map.\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n       */ const postRenderFunction = (map, frameState)=>{\n                const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n                const wantedTiles = frameState.wantedTiles[tileSourceKey];\n                const tilesCount = wantedTiles ? Object.keys(wantedTiles).length : 0;\n                this.updateCacheSize(tilesCount);\n                this.tileCache_.expireCache();\n            };\n            frameState.postRenderFunctions.push(postRenderFunction);\n        }\n        if (!this.renderComplete && !allTilesIdle) frameState.animate = true;\n        return this.container;\n    }\n    /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   */ updateCacheSize(tileCount) {\n        this.tileCache_.highWaterMark = Math.max(this.tileCache_.highWaterMark, tileCount * 2);\n    }\n    /**\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   * @protected\n   */ drawTile(tile, frameState, x, y, w, h, gutter, transition) {\n        let image;\n        if (tile instanceof (0, $fd518ba473015b27$export$2e2bcd8739ae039)) {\n            image = (0, $fd518ba473015b27$export$3a7c913cb40dcb7d)(tile.getData());\n            if (!image) throw new Error('Rendering array data is not yet supported');\n        } else image = this.getTileImage(/** @type {import(\"../../ImageTile.js\").default} */ tile);\n        if (!image) return;\n        const context = this.getRenderContext(frameState);\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const alpha = layerState.opacity * (transition ? tile.getAlpha(uid, frameState.time) : 1);\n        const alphaChanged = alpha !== context.globalAlpha;\n        if (alphaChanged) {\n            context.save();\n            context.globalAlpha = alpha;\n        }\n        context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n        if (alphaChanged) context.restore();\n        if (alpha !== layerState.opacity) frameState.animate = true;\n        else if (transition) tile.endTransition(uid);\n    }\n    /**\n   * @return {HTMLCanvasElement} Image\n   */ getImage() {\n        const context = this.context;\n        return context ? context.canvas : null;\n    }\n    /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */ getTileImage(tile) {\n        return tile.getImage();\n    }\n    /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */ updateUsedTiles(usedTiles, tileSource, tile) {\n        // FIXME should we use tilesToDrawByZ instead?\n        const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n        if (!(tileSourceKey in usedTiles)) usedTiles[tileSourceKey] = {};\n        usedTiles[tileSourceKey][tile.getKey()] = true;\n    }\n}\nvar $02fffef185f4339b$export$2e2bcd8739ae039 = $02fffef185f4339b$var$CanvasTileLayerRenderer;\n\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} [TileSourceType=import(\"../source/Tile.js\").default]\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */ class $32e67a4d3559554a$var$TileLayer extends (0, $93be2de6a052f587$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\n   */ constructor(options){\n        super(options);\n    }\n    /**\n   * @override\n   */ createRenderer() {\n        return new (0, $02fffef185f4339b$export$2e2bcd8739ae039)(this, {\n            cacheSize: this.getCacheSize()\n        });\n    }\n}\nvar $32e67a4d3559554a$export$2e2bcd8739ae039 = $32e67a4d3559554a$var$TileLayer;\n\n\n\nconst $b4e14b6b8da86996$var$map = new Map({\n    target: \"map\",\n    layers: [\n        new (0, $32e67a4d3559554a$export$2e2bcd8739ae039)({\n            source: new (0, $6c8498cc816f2362$export$2e2bcd8739ae039)()\n        })\n    ],\n    view: new (0, $70364d0195659942$export$2e2bcd8739ae039)({\n        center: [\n            0,\n            0\n        ],\n        zoom: 2\n    })\n});\nfunction $b4e14b6b8da86996$var$helloFunction(user) {\n    console.log(`Hello ${user}`);\n}\n$b4e14b6b8da86996$var$helloFunction(\"\\u4F7F\\u7528\\u80051\\u865F\");\n\n\n//# sourceMappingURL=index.fc974814.js.map\n","import \"./style.css\";\nimport OSM from \"ol/source/OSM.js\";\nimport TileLayer from \"ol/layer/Tile.js\";\nimport View from \"ol/View.js\";\n\nconst map = new Map({\n  target: \"map\",\n  layers: [\n    new TileLayer({\n      source: new OSM(),\n    }),\n  ],\n  view: new View({\n    center: [0, 0],\n    zoom: 2,\n  }),\n});\n\nfunction helloFunction(user: string) {\n  console.log(`Hello ${user}`);\n}\n\nhelloFunction(\"使用者1號\");\n","/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION =\n  '&#169; ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n  'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options} [options] Open Street Map options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default OSM;\n","/**\n * @module ol/source/XYZ\n */\n\nimport TileImage from './TileImage.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader\n * instead.  Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Not used if `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\n * may be used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the\n * url option instead.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case\n * a `tileUrlFunction` can be used, such as:\n * ```js\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\n *  }\n * ```\n * @api\n */\nclass XYZ extends TileImage {\n  /**\n   * @param {Options} [options] XYZ options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    const projection =\n      options.projection !== undefined ? options.projection : 'EPSG:3857';\n\n    const tileGrid =\n      options.tileGrid !== undefined\n        ? options.tileGrid\n        : createXYZ({\n            extent: extentFromProjection(projection),\n            maxResolution: options.maxResolution,\n            maxZoom: options.maxZoom,\n            minZoom: options.minZoom,\n            tileSize: options.tileSize,\n          });\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n  }\n\n  /**\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n}\n\nexport default XYZ;\n","/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   * @override\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   * @override\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions,\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @override\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection,\n      );\n    }\n    const tileCoord = [z, x, y];\n    const key = this.getKey();\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection,\n    );\n    const tile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.tileOptions,\n    );\n    tile.key = key;\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    const key = this.getKey();\n    return this.createTile_(z, x, y, pixelRatio, projection, key);\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/events/EventType\n */\n\n/**\n * @enum {string}\n * @const\n */\nexport default {\n  /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~BaseEvent#change\n   * @api\n   */\n  CHANGE: 'change',\n\n  /**\n   * Generic error event. Triggered when an error occurs.\n   * @event module:ol/events/Event~BaseEvent#error\n   * @api\n   */\n  ERROR: 'error',\n\n  BLUR: 'blur',\n  CLEAR: 'clear',\n  CONTEXTMENU: 'contextmenu',\n  CLICK: 'click',\n  DBLCLICK: 'dblclick',\n  DRAGENTER: 'dragenter',\n  DRAGOVER: 'dragover',\n  DROP: 'drop',\n  FOCUS: 'focus',\n  KEYDOWN: 'keydown',\n  KEYPRESS: 'keypress',\n  LOAD: 'load',\n  RESIZE: 'resize',\n  TOUCHMOVE: 'touchmove',\n  WHEEL: 'wheel',\n};\n","/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {listenImage} from './Image.js';\n\nclass ImageTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    super(tileCoord, state, options);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    this.key = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n  }\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\n   */\n  setImage(element) {\n    this.image_ = element;\n    this.state = TileState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    const image = /** @type {HTMLImageElement} */ (this.image_);\n    if (image.naturalWidth && image.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   *\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\n   * that checks for error status codes and reloads only when the status code is\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\n   * made already:\n   *\n   * ```js\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\n   * const retries = {};\n   * source.setTileLoadFunction((tile, src) => {\n   *   const image = tile.getImage();\n   *   fetch(src)\n   *     .then((response) => {\n   *       if (retryCodes.includes(response.status)) {\n   *         retries[src] = (retries[src] || 0) + 1;\n   *         if (retries[src] <= 3) {\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\n   *         }\n   *         return Promise.reject();\n   *       }\n   *       return response.blob();\n   *     })\n   *     .then((blob) => {\n   *       const imageUrl = URL.createObjectURL(blob);\n   *       image.src = imageUrl;\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\n   *     })\n   *     .catch(() => tile.setState(3)); // error\n   * });\n   * ```\n   * @api\n   * @override\n   */\n  load() {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.tileLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this),\n      );\n    }\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    this.unlistenImage_();\n    this.image_ = null;\n    super.disposeInternal();\n  }\n}\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  const ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile;\n","/**\n * @module ol/Tile\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport {abstract} from './util.js';\nimport {easeIn} from './easing.js';\n\n/**\n * A function that takes a {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState.js';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   const xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     const data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes a {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\nclass Tile extends EventTarget {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.tileCoord = tileCoord;\n\n    /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */\n    this.state = state;\n\n    /**\n     * A key assigned to the tile. This is used in conjunction with a source key\n     * to determine if a cached version of this tile may be used by the renderer.\n     * @type {string}\n     */\n    this.key = '';\n\n    /**\n     * The duration for the opacity transition.\n     * @private\n     * @type {number}\n     */\n    this.transition_ =\n      options.transition === undefined ? 250 : options.transition;\n\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.transitionStarts_ = {};\n\n    /**\n     * @type {boolean}\n     */\n    this.interpolate = !!options.interpolate;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */\n  release() {\n    if (this.state === TileState.ERROR) {\n      // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\n      this.setState(TileState.EMPTY);\n    }\n  }\n\n  /**\n   * @return {string} Key.\n   */\n  getKey() {\n    return this.key + '/' + this.tileCoord;\n  }\n\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */\n  getTileCoord() {\n    return this.tileCoord;\n  }\n\n  /**\n   * @return {import(\"./TileState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */\n  setState(state) {\n    if (this.state !== TileState.ERROR && this.state > state) {\n      throw new Error('Tile load sequence violation');\n    }\n    this.state = state;\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n  getAlpha(id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    let start = this.transitionStarts_[id];\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    const delta = time - start + 1000 / 60; // avoid rendering at 0\n    if (delta >= this.transition_) {\n      return 1;\n    }\n    return easeIn(delta / this.transition_);\n  }\n\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n  inTransition(id) {\n    if (!this.transition_) {\n      return false;\n    }\n    return this.transitionStarts_[id] !== -1;\n  }\n\n  /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */\n  endTransition(id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeInternal() {\n    this.release();\n    super.disposeInternal();\n  }\n}\n\nexport default Tile;\n","/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport Event from './Event.js';\nimport {VOID} from '../functions.js';\nimport {clear} from '../obj.js';\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nclass Target extends Disposable {\n  /**\n   * @param {*} [target] Default event target for dispatched events.\n   */\n  constructor(target) {\n    super();\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.eventTarget_ = target;\n\n    /**\n     * @private\n     * @type {Object<string, number>|null}\n     */\n    this.pendingRemovals_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, number>|null}\n     */\n    this.dispatching_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>|null}\n     */\n    this.listeners_ = null;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  addEventListener(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    const listeners = this.listeners_ || (this.listeners_ = {});\n    const listenersForType = listeners[type] || (listeners[type] = []);\n    if (!listenersForType.includes(listener)) {\n      listenersForType.push(listener);\n    }\n  }\n\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  dispatchEvent(event) {\n    const isString = typeof event === 'string';\n    const type = isString ? event : event.type;\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\n    const pendingRemovals =\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\n    if (!(type in dispatching)) {\n      dispatching[type] = 0;\n      pendingRemovals[type] = 0;\n    }\n    ++dispatching[type];\n    let propagate;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      if ('handleEvent' in listeners[i]) {\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\n          listeners[i]\n        ).handleEvent(evt);\n      } else {\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\n          listeners[i]\n        ).call(this, evt);\n      }\n      if (propagate === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n    if (--dispatching[type] === 0) {\n      let pr = pendingRemovals[type];\n      delete pendingRemovals[type];\n      while (pr--) {\n        this.removeEventListener(type, VOID);\n      }\n      delete dispatching[type];\n    }\n    return propagate;\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.listeners_ && clear(this.listeners_);\n  }\n\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */\n  getListeners(type) {\n    return (this.listeners_ && this.listeners_[type]) || undefined;\n  }\n\n  /**\n   * @param {string} [type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  hasListener(type) {\n    if (!this.listeners_) {\n      return false;\n    }\n    return type\n      ? type in this.listeners_\n      : Object.keys(this.listeners_).length > 0;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  removeEventListener(type, listener) {\n    if (!this.listeners_) {\n      return;\n    }\n    const listeners = this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n      if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n        // make listener a no-op, and remove later in #dispatchEvent()\n        listeners[index] = VOID;\n        ++this.pendingRemovals_[type];\n      } else {\n        listeners.splice(index, 1);\n        if (listeners.length === 0) {\n          delete this.listeners_[type];\n        }\n      }\n    }\n  }\n}\n\nexport default Target;\n","/**\n * @module ol/Disposable\n */\n\n/**\n * @classdesc\n * Objects that need to clean up after themselves.\n */\nclass Disposable {\n  constructor() {\n    /**\n     * The object has already been disposed.\n     * @type {boolean}\n     * @protected\n     */\n    this.disposed = false;\n  }\n\n  /**\n   * Clean up.\n   */\n  dispose() {\n    if (!this.disposed) {\n      this.disposed = true;\n      this.disposeInternal();\n    }\n  }\n\n  /**\n   * Extension point for disposable objects.\n   * @protected\n   */\n  disposeInternal() {}\n}\n\nexport default Disposable;\n","/**\n * @module ol/events/Event\n */\n\n/**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */\nclass BaseEvent {\n  /**\n   * @param {string} type Type.\n   */\n  constructor(type) {\n    /**\n     * @type {boolean}\n     */\n    this.propagationStopped;\n\n    /**\n     * @type {boolean}\n     */\n    this.defaultPrevented;\n\n    /**\n     * The event type.\n     * @type {string}\n     * @api\n     */\n    this.type = type;\n\n    /**\n     * The event target.\n     * @type {Object}\n     * @api\n     */\n    this.target = null;\n  }\n\n  /**\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\n   * will be fired.\n   * @api\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n  /**\n   * Stop event propagation.\n   * @api\n   */\n  stopPropagation() {\n    this.propagationStopped = true;\n  }\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function stopPropagation(evt) {\n  evt.stopPropagation();\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function preventDefault(evt) {\n  evt.preventDefault();\n}\n\nexport default BaseEvent;\n","/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>|undefined} */\n  let lastArgs;\n\n  let lastThis;\n\n  /**\n   * @this {*} Only need to know if `this` changed, don't care what type\n   * @return {ReturnType} Memoized value\n   */\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!lastArgs || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n","/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, comparator) {\n  let mid, cmp;\n  comparator = comparator || ascending;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function sorting arrays in ascending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function ascending(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * Compare function sorting arrays in descending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second.\n */\nexport function descending(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  if (arr[0] <= target) {\n    return 0;\n  }\n\n  const n = arr.length;\n  if (target <= arr[n - 1]) {\n    return n - 1;\n  }\n\n  if (typeof direction === 'function') {\n    for (let i = 1; i < n; ++i) {\n      const candidate = arr[i];\n      if (candidate === target) {\n        return i;\n      }\n      if (candidate < target) {\n        if (direction(target, arr[i - 1], candidate) > 0) {\n          return i - 1;\n        }\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction > 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] < target) {\n        return i - 1;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction < 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] <= target) {\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  for (let i = 1; i < n; ++i) {\n    if (arr[i] == target) {\n      return i;\n    }\n    if (arr[i] < target) {\n      if (arr[i - 1] - target < target - arr[i]) {\n        return i - 1;\n      }\n      return i;\n    }\n  }\n  return n - 1;\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array<any>|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array<any>|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [func] Comparison function.\n * @param {boolean} [strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, func, strict) {\n  const compare = func || ascending;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (strict && res === 0));\n  });\n}\n","/**\n * @module ol/obj\n */\n\n/**\n * Removes all properties from an object.\n * @param {Object<string, unknown>} object The object to clear.\n */\nexport function clear(object) {\n  for (const property in object) {\n    delete object[property];\n  }\n}\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n","/**\n * @module ol/TileState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  /**\n   * Indicates that tile loading failed\n   * @type {number}\n   */\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '10.3.0';\n","/**\n * @module ol/easing\n */\n\n/**\n * Start slow and speed up.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeIn(t) {\n  return Math.pow(t, 3);\n}\n\n/**\n * Start fast and slow down.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeOut(t) {\n  return 1 - easeIn(1 - t);\n}\n\n/**\n * Start slow, speed up, and then slow down again.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function inAndOut(t) {\n  return 3 * t * t - 2 * t * t * t;\n}\n\n/**\n * Maintain a constant speed over time.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function linear(t) {\n  return t;\n}\n\n/**\n * Start slow, speed up, and at the very end slow down again.  This has the\n * same general behavior as {@link module:ol/easing.inAndOut}, but the final\n * slowdown is delayed.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function upAndDown(t) {\n  if (t < 0.5) {\n    return inAndOut(2 * t);\n  }\n  return 1 - inAndOut(2 * (t - 0.5));\n}\n","import {WORKER_OFFSCREEN_CANVAS} from './has.js';\n\n/**\n * @module ol/dom\n */\n\n//FIXME Move this function to the canvas module\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number} [width] Canvas width.\n * @param {number} [height] Canvas height.\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\n  let canvas;\n  if (canvasPool && canvasPool.length) {\n    canvas = /** @type {HTMLCanvasElement} */ (canvasPool.shift());\n  } else if (WORKER_OFFSCREEN_CANVAS) {\n    canvas = new OffscreenCanvas(width || 300, height || 300);\n  } else {\n    canvas = document.createElement('canvas');\n  }\n  if (width) {\n    canvas.width = width;\n  }\n  if (height) {\n    canvas.height = height;\n  }\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n  return /** @type {CanvasRenderingContext2D} */ (\n    canvas.getContext('2d', settings)\n  );\n}\n\n/** @type {CanvasRenderingContext2D} */\nlet sharedCanvasContext;\n\n/**\n * @return {CanvasRenderingContext2D} Shared canvas context.\n */\nexport function getSharedCanvasContext2D() {\n  if (!sharedCanvasContext) {\n    sharedCanvasContext = createCanvasContext2D(1, 1);\n  }\n  return sharedCanvasContext;\n}\n\n/**\n * Releases canvas memory to avoid exceeding memory limits in Safari.\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\n * @param {CanvasRenderingContext2D} context Context.\n */\nexport function releaseCanvas(context) {\n  const canvas = context.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  context.clearRect(0, 0, 1, 1);\n}\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.lastChild.remove();\n  }\n}\n\n/**\n * Transform the children of a parent node so they match the\n * provided list of children.  This function aims to efficiently\n * remove, add, and reorder child nodes while maintaining a simple\n * implementation (it is not guaranteed to minimize DOM operations).\n * @param {Node} node The parent node whose children need reworking.\n * @param {Array<Node>} children The desired children.\n */\nexport function replaceChildren(node, children) {\n  const oldChildren = node.childNodes;\n\n  for (let i = 0; true; ++i) {\n    const oldChild = oldChildren[i];\n    const newChild = children[i];\n\n    // check if our work is done\n    if (!oldChild && !newChild) {\n      break;\n    }\n\n    // check if children match\n    if (oldChild === newChild) {\n      continue;\n    }\n\n    // check if a new child needs to be added\n    if (!oldChild) {\n      node.appendChild(newChild);\n      continue;\n    }\n\n    // check if an old child needs to be removed\n    if (!newChild) {\n      node.removeChild(oldChild);\n      --i;\n      continue;\n    }\n\n    // reorder\n    node.insertBefore(newChild, oldChild);\n  }\n}\n","/**\n * @module ol/has\n */\n\nconst ua =\n  typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'\n    ? navigator.userAgent.toLowerCase()\n    : '';\n\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\nexport const FIREFOX = ua.includes('firefox');\n\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\nexport const SAFARI = ua.includes('safari') && !ua.includes('chrom');\n\n/**\n * https://bugs.webkit.org/show_bug.cgi?id=237906\n * @type {boolean}\n */\nexport const SAFARI_BUG_237906 =\n  SAFARI &&\n  (ua.includes('version/15.4') ||\n    /cpu (os|iphone os) 15_4 like mac os x/.test(ua));\n\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\nexport const WEBKIT = ua.includes('webkit') && !ua.includes('edge');\n\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\nexport const MAC = ua.includes('macintosh');\n\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\nexport const DEVICE_PIXEL_RATIO =\n  typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\n\n/**\n * The execution context is a worker with OffscreenCanvas available.\n * @const\n * @type {boolean}\n */\nexport const WORKER_OFFSCREEN_CANVAS =\n  typeof WorkerGlobalScope !== 'undefined' &&\n  typeof OffscreenCanvas !== 'undefined' &&\n  self instanceof WorkerGlobalScope; //eslint-disable-line\n\n/**\n * Image.prototype.decode() is supported.\n * @type {boolean}\n */\nexport const IMAGE_DECODE =\n  typeof Image !== 'undefined' && Image.prototype.decode;\n\n/**\n * createImageBitmap() is supported.\n * @type {boolean}\n */\nexport const CREATE_IMAGE_BITMAP = typeof createImageBitmap === 'function';\n\n/**\n * @type {boolean}\n */\nexport const PASSIVE_EVENT_LISTENERS = (function () {\n  let passive = false;\n  try {\n    const options = Object.defineProperty({}, 'passive', {\n      get: function () {\n        passive = true;\n      },\n    });\n\n    // @ts-ignore Ignore invalid event type '_'\n    window.addEventListener('_', null, options);\n    // @ts-ignore Ignore invalid event type '_'\n    window.removeEventListener('_', null, options);\n  } catch (error) {\n    // passive not supported\n  }\n  return passive;\n})();\n","/**\n * @module ol/Image\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport ImageState from './ImageState.js';\nimport {CREATE_IMAGE_BITMAP, IMAGE_DECODE} from './has.js';\nimport {listenOnce, unlistenByKey} from './events.js';\nimport {toPromise} from './functions.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\n * @api\n */\n\n/**\n * @typedef {Object} ImageObject\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * For images that cover any extent and resolution (static images), the loader function should not accept\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\n * correct `extent`, `resolution` and `pixelRatio`.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\n * @api\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\n */\n\nclass ImageWrapper extends EventTarget {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\n   * resolution will be assumed.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\n   */\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number|Array<number>|undefined}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state =\n      typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\n\n    /**\n     * @private\n     * @type {import('./DataTile.js').ImageLike|null}\n     */\n    this.image_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./Image.js\").Loader}\n     */\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  getExtent() {\n    return this.extent;\n  }\n\n  /**\n   * @return {import('./DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * @return {number} PixelRatio.\n   */\n  getPixelRatio() {\n    return this.pixelRatio_;\n  }\n\n  /**\n   * @return {number|Array<number>} Resolution.\n   */\n  getResolution() {\n    return /** @type {number} */ (this.resolution);\n  }\n\n  /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      if (this.loader) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        const resolution = this.getResolution();\n        const requestResolution = Array.isArray(resolution)\n          ? resolution[0]\n          : resolution;\n        toPromise(() =>\n          this.loader(\n            this.getExtent(),\n            requestResolution,\n            this.getPixelRatio(),\n          ),\n        )\n          .then((image) => {\n            if ('image' in image) {\n              this.image_ = image.image;\n            }\n            if ('extent' in image) {\n              this.extent = image.extent;\n            }\n            if ('resolution' in image) {\n              this.resolution = image.resolution;\n            }\n            if ('pixelRatio' in image) {\n              this.pixelRatio_ = image.pixelRatio;\n            }\n            if (\n              image instanceof HTMLImageElement ||\n              image instanceof ImageBitmap ||\n              image instanceof HTMLCanvasElement ||\n              image instanceof HTMLVideoElement\n            ) {\n              this.image_ = image;\n            }\n            this.state = ImageState.LOADED;\n          })\n          .catch((error) => {\n            this.state = ImageState.ERROR;\n            console.error(error); // eslint-disable-line no-console\n          })\n          .finally(() => this.changed());\n      }\n    }\n  }\n\n  /**\n   * @param {import('./DataTile.js').ImageLike} image The image.\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * @param {number|Array<number>} resolution Resolution.\n   */\n  setResolution(resolution) {\n    this.resolution = resolution;\n  }\n}\n\n/**\n * @param {import('./DataTile.js').ImageLike} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\n/**\n * Loads an image.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n * @api\n */\nexport function load(image, src) {\n  return new Promise((resolve, reject) => {\n    function handleLoad() {\n      unlisten();\n      resolve(image);\n    }\n    function handleError() {\n      unlisten();\n      reject(new Error('Image load error'));\n    }\n    function unlisten() {\n      image.removeEventListener('load', handleLoad);\n      image.removeEventListener('error', handleError);\n    }\n    image.addEventListener('load', handleLoad);\n    image.addEventListener('error', handleError);\n    if (src) {\n      image.src = src;\n    }\n  });\n}\n\n/**\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n */\nexport function decodeFallback(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return image.src && IMAGE_DECODE\n    ? new Promise((resolve, reject) =>\n        image\n          .decode()\n          .then(() => resolve(image))\n          .catch((e) =>\n            image.complete && image.width ? resolve(image) : reject(e),\n          ),\n      )\n    : load(image);\n}\n\n/**\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\n * the loaded image otherwise.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\n * @api\n */\nexport function decode(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return image.src && IMAGE_DECODE && CREATE_IMAGE_BITMAP\n    ? image\n        .decode()\n        .then(() => createImageBitmap(image))\n        .catch((e) => {\n          if (image.complete && image.width) {\n            return image;\n          }\n          throw e;\n        })\n    : decodeFallback(image);\n}\n\nexport default ImageWrapper;\n","/**\n * @module ol/ImageState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n/**\n * Key to use with {@link module:ol/Observable.unByKey}.\n * @typedef {Object} EventsKey\n * @property {ListenerFunction} listener Listener.\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @property {string} type Type.\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @typedef {Object} ListenerObject\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\n */\n\n/**\n * @typedef {ListenerFunction|ListenerObject} Listener\n */\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events.unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean} [once] If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, thisArg, once) {\n  if (once) {\n    const originalListener = listener;\n    /**\n     * @this {typeof target}\n     */\n    listener = function () {\n      target.removeEventListener(type, listener);\n      originalListener.apply(thisArg ?? this, arguments);\n    };\n  } else if (thisArg && thisArg !== target) {\n    listener = listener.bind(thisArg);\n  }\n  const eventsKey = {\n    target: target,\n    type: type,\n    listener: listener,\n  };\n  target.addEventListener(type, listener);\n  return eventsKey;\n}\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, thisArg) {\n  return listen(target, type, listener, thisArg, true);\n}\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.listener);\n    clear(key);\n  }\n}\n","/**\n * @module ol/reproj/Tile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceExtentResolution,\n  canvasPool,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {clamp} from '../math.js';\nimport {getArea, getIntersection, getWidth, wrapAndSliceX} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {releaseCanvas} from '../dom.js';\n\n/**\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\n */\n\n/**\n * @typedef {Object} TileOffset\n * @property {import(\"../ImageTile.js\").default} tile Tile.\n * @property {number} offset Offset.\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\n   */\n  constructor(\n    sourceProj,\n    sourceTileGrid,\n    targetProj,\n    targetTileGrid,\n    tileCoord,\n    wrappedTileCoord,\n    pixelRatio,\n    gutter,\n    getTileFunction,\n    errorThreshold,\n    renderEdges,\n    options,\n  ) {\n    super(tileCoord, TileState.IDLE, options);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.clipExtent_ = sourceProj.canWrapX()\n      ? sourceProj.getExtent()\n      : undefined;\n\n    const targetExtent = targetTileGrid.getTileCoordExtent(\n      this.wrappedTileCoord_,\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0],\n    );\n\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution,\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      let worldWidth = 0;\n      let worldsAway = 0;\n      if (sourceProj.canWrapX()) {\n        worldWidth = getWidth(sourceProjExtent);\n        worldsAway = Math.floor(\n          (sourceExtent[0] - sourceProjExtent[0]) / worldWidth,\n        );\n      }\n\n      const sourceExtents = wrapAndSliceX(\n        sourceExtent.slice(),\n        sourceProj,\n        true,\n      );\n      sourceExtents.forEach((extent) => {\n        const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n          extent,\n          this.sourceZ_,\n        );\n\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n            const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n            if (tile) {\n              const offset = worldsAway * worldWidth;\n              this.sourceTiles_.push({tile, offset});\n            }\n          }\n        }\n        ++worldsAway;\n      });\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach((source) => {\n      const tile = source.tile;\n      if (tile && tile.getState() == TileState.LOADED) {\n        const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n        extent[0] += source.offset;\n        extent[2] += source.offset;\n        const clipExtent = this.clipExtent_?.slice();\n        if (clipExtent) {\n          clipExtent[0] += source.offset;\n          clipExtent[2] += source.offset;\n        }\n        sources.push({\n          extent: extent,\n          clipExtent: clipExtent,\n          image: tile.getImage(),\n        });\n      }\n    });\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(\n        this.sourceZ_,\n      );\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_,\n      );\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.pixelRatio_,\n        sourceResolution,\n        this.sourceTileGrid_.getExtent(),\n        targetResolution,\n        targetExtent,\n        this.triangulation_,\n        sources,\n        this.gutter_,\n        this.renderEdges_,\n        this.interpolate,\n      );\n\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n\n      let leftToLoad = 0;\n\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach(({tile}) => {\n        const state = tile.getState();\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n\n          const sourceListenKey = listen(tile, EventType.CHANGE, (e) => {\n            const state = tile.getState();\n            if (\n              state == TileState.LOADED ||\n              state == TileState.ERROR ||\n              state == TileState.EMPTY\n            ) {\n              unlistenByKey(sourceListenKey);\n              leftToLoad--;\n              if (leftToLoad === 0) {\n                this.unlistenSources_();\n                this.reproject_();\n              }\n            }\n          });\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      });\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function ({tile}, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   * @override\n   */\n  release() {\n    if (this.canvas_) {\n      releaseCanvas(this.canvas_.getContext('2d'));\n      canvasPool.push(this.canvas_);\n      this.canvas_ = null;\n    }\n    super.release();\n  }\n}\n\nexport default ReprojTile;\n","/**\n * @module ol/reproj/common\n */\n\n/**\n * Default maximum allowed threshold  (in pixels) for reprojection\n * triangulation.\n * @type {number}\n */\nexport const ERROR_THRESHOLD = 0.5;\n","/**\n * @module ol/reproj/Triangulation\n */\nimport {apply as applyMatrix} from '../transform.js';\nimport {\n  boundingExtent,\n  createEmpty,\n  extendCoordinate,\n  getArea,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n  getWidth,\n  intersects,\n} from '../extent.js';\nimport {\n  createTransformFromCoordinateTransform,\n  getTransform,\n  transform,\n} from '../proj.js';\nimport {modulo} from '../math.js';\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\n */\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\nconst MAX_SUBDIVISION = 10;\n\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\nconst MAX_TRIANGLE_WIDTH = 0.25;\n\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\nclass Triangulation {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\n   * @param {import(\"../transform.js\").Transform} [sourceMatrix] Source transform matrix.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    maxSourceExtent,\n    errorThreshold,\n    destinationResolution,\n    sourceMatrix,\n  ) {\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.sourceProj_ = sourceProj;\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.targetProj_ = targetProj;\n\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n    let transformInvCache = {};\n    const transformInv = sourceMatrix\n      ? createTransformFromCoordinateTransform((input) =>\n          applyMatrix(\n            sourceMatrix,\n            transform(input, this.targetProj_, this.sourceProj_),\n          ),\n        )\n      : getTransform(this.targetProj_, this.sourceProj_);\n\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */\n    this.transformInv_ = function (c) {\n      const key = c[0] + '/' + c[1];\n      if (!transformInvCache[key]) {\n        transformInvCache[key] = transformInv(c);\n      }\n      return transformInvCache[key];\n    };\n\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n\n    /**\n     * @type {Array<Triangle>}\n     * @private\n     */\n    this.triangles_ = [];\n\n    /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */\n    this.wrapsXInSource_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.canWrapXInSource_ =\n      this.sourceProj_.canWrapX() &&\n      !!maxSourceExtent &&\n      !!this.sourceProj_.getExtent() &&\n      getWidth(maxSourceExtent) >= getWidth(this.sourceProj_.getExtent());\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent()\n      ? getWidth(this.sourceProj_.getExtent())\n      : null;\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.targetWorldWidth_ = this.targetProj_.getExtent()\n      ? getWidth(this.targetProj_.getExtent())\n      : null;\n\n    const destinationTopLeft = getTopLeft(targetExtent);\n    const destinationTopRight = getTopRight(targetExtent);\n    const destinationBottomRight = getBottomRight(targetExtent);\n    const destinationBottomLeft = getBottomLeft(targetExtent);\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\n    const sourceTopRight = this.transformInv_(destinationTopRight);\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n\n    /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overall reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */\n    const maxSubdivision =\n      MAX_SUBDIVISION +\n      (destinationResolution\n        ? Math.max(\n            0,\n            Math.ceil(\n              Math.log2(\n                getArea(targetExtent) /\n                  (destinationResolution * destinationResolution * 256 * 256),\n              ),\n            ),\n          )\n        : 0);\n\n    this.addQuad_(\n      destinationTopLeft,\n      destinationTopRight,\n      destinationBottomRight,\n      destinationBottomLeft,\n      sourceTopLeft,\n      sourceTopRight,\n      sourceBottomRight,\n      sourceBottomLeft,\n      maxSubdivision,\n    );\n\n    if (this.wrapsXInSource_) {\n      let leftBound = Infinity;\n      this.triangles_.forEach(function (triangle, i, arr) {\n        leftBound = Math.min(\n          leftBound,\n          triangle.source[0][0],\n          triangle.source[1][0],\n          triangle.source[2][0],\n        );\n      });\n\n      // Shift triangles to be as close to `leftBound` as possible\n      // (if the distance is more than `worldWidth / 2` it can be closer.\n      this.triangles_.forEach((triangle) => {\n        if (\n          Math.max(\n            triangle.source[0][0],\n            triangle.source[1][0],\n            triangle.source[2][0],\n          ) -\n            leftBound >\n          this.sourceWorldWidth_ / 2\n        ) {\n          const newTriangle = [\n            [triangle.source[0][0], triangle.source[0][1]],\n            [triangle.source[1][0], triangle.source[1][1]],\n            [triangle.source[2][0], triangle.source[2][1]],\n          ];\n          if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[0][0] -= this.sourceWorldWidth_;\n          }\n          if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[1][0] -= this.sourceWorldWidth_;\n          }\n          if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[2][0] -= this.sourceWorldWidth_;\n          }\n\n          // Rarely (if the extent contains both the dateline and prime meridian)\n          // the shift can in turn break some triangles.\n          // Detect this here and don't shift in such cases.\n          const minX = Math.min(\n            newTriangle[0][0],\n            newTriangle[1][0],\n            newTriangle[2][0],\n          );\n          const maxX = Math.max(\n            newTriangle[0][0],\n            newTriangle[1][0],\n            newTriangle[2][0],\n          );\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\n            triangle.source = newTriangle;\n          }\n        }\n      });\n    }\n\n    transformInvCache = {};\n  }\n\n  /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n    this.triangles_.push({\n      source: [aSrc, bSrc, cSrc],\n      target: [a, b, c],\n    });\n  }\n\n  /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n    const sourceCoverageX = this.sourceWorldWidth_\n      ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\n      : null;\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\n\n    // when the quad is wrapped in the source projection\n    // it covers most of the projection extent, but not fully\n    const wrapsX =\n      this.sourceProj_.canWrapX() &&\n      sourceCoverageX > 0.5 &&\n      sourceCoverageX < 1;\n\n    let needsSubdivision = false;\n\n    if (maxSubdivision > 0) {\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\n        const targetCoverageX =\n          getWidth(targetQuadExtent) / this.targetWorldWidth_;\n        needsSubdivision =\n          targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n        needsSubdivision =\n          sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n    }\n\n    if (!needsSubdivision && this.maxSourceExtent_) {\n      if (\n        isFinite(sourceQuadExtent[0]) &&\n        isFinite(sourceQuadExtent[1]) &&\n        isFinite(sourceQuadExtent[2]) &&\n        isFinite(sourceQuadExtent[3])\n      ) {\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n          // whole quad outside source projection extent -> ignore\n          return;\n        }\n      }\n    }\n\n    let isNotFinite = 0;\n\n    if (!needsSubdivision) {\n      if (\n        !isFinite(aSrc[0]) ||\n        !isFinite(aSrc[1]) ||\n        !isFinite(bSrc[0]) ||\n        !isFinite(bSrc[1]) ||\n        !isFinite(cSrc[0]) ||\n        !isFinite(cSrc[1]) ||\n        !isFinite(dSrc[0]) ||\n        !isFinite(dSrc[1])\n      ) {\n        if (maxSubdivision > 0) {\n          needsSubdivision = true;\n        } else {\n          // It might be the case that only 1 of the points is infinite. In this case\n          // we can draw a single triangle with the other three points\n          isNotFinite =\n            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\n            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\n            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\n            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n          if (\n            isNotFinite != 1 &&\n            isNotFinite != 2 &&\n            isNotFinite != 4 &&\n            isNotFinite != 8\n          ) {\n            return;\n          }\n        }\n      }\n    }\n\n    if (maxSubdivision > 0) {\n      if (!needsSubdivision) {\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n        const centerSrc = this.transformInv_(center);\n\n        let dx;\n        if (wrapsX) {\n          const centerSrcEstimX =\n            (modulo(aSrc[0], sourceWorldWidth) +\n              modulo(cSrc[0], sourceWorldWidth)) /\n            2;\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n        } else {\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n        }\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n        const centerSrcErrorSquared = dx * dx + dy * dy;\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n      }\n      if (needsSubdivision) {\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n          // split horizontally (top & bottom)\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n          const bcSrc = this.transformInv_(bc);\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n          const daSrc = this.transformInv_(da);\n\n          this.addQuad_(\n            a,\n            b,\n            bc,\n            da,\n            aSrc,\n            bSrc,\n            bcSrc,\n            daSrc,\n            maxSubdivision - 1,\n          );\n          this.addQuad_(\n            da,\n            bc,\n            c,\n            d,\n            daSrc,\n            bcSrc,\n            cSrc,\n            dSrc,\n            maxSubdivision - 1,\n          );\n        } else {\n          // split vertically (left & right)\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n          const abSrc = this.transformInv_(ab);\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n          const cdSrc = this.transformInv_(cd);\n\n          this.addQuad_(\n            a,\n            ab,\n            cd,\n            d,\n            aSrc,\n            abSrc,\n            cdSrc,\n            dSrc,\n            maxSubdivision - 1,\n          );\n          this.addQuad_(\n            ab,\n            b,\n            c,\n            cd,\n            abSrc,\n            bSrc,\n            cSrc,\n            cdSrc,\n            maxSubdivision - 1,\n          );\n        }\n        return;\n      }\n    }\n\n    if (wrapsX) {\n      if (!this.canWrapXInSource_) {\n        return;\n      }\n      this.wrapsXInSource_ = true;\n    }\n\n    // Exactly zero or one of *Src is not finite\n    // The triangles must have the diagonal line as the first side\n    // This is to allow easy code in reproj.s to make it straight for broken\n    // browsers that can't handle diagonal clipping\n    if ((isNotFinite & 0xb) == 0) {\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n    }\n    if ((isNotFinite & 0xe) == 0) {\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n    }\n    if (isNotFinite) {\n      // Try the other two triangles\n      if ((isNotFinite & 0xd) == 0) {\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n      }\n      if ((isNotFinite & 0x7) == 0) {\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n      }\n    }\n  }\n\n  /**\n   * Calculates extent of the `source` coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */\n  calculateSourceExtent() {\n    const extent = createEmpty();\n\n    this.triangles_.forEach(function (triangle, i, arr) {\n      const src = triangle.source;\n      extendCoordinate(extent, src[0]);\n      extendCoordinate(extent, src[1]);\n      extendCoordinate(extent, src[2]);\n    });\n\n    return extent;\n  }\n\n  /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */\n  getTriangles() {\n    return this.triangles_;\n  }\n}\n\nexport default Triangulation;\n","/**\n * @module ol/transform\n */\nimport {assert} from './asserts.js';\n\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */\n\n/**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3×3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */\n\n/**\n * @private\n * @type {Transform}\n */\nconst tmp_ = new Array(6);\n\n/**\n * Create an identity transform.\n * @return {!Transform} Identity transform.\n */\nexport function create() {\n  return [1, 0, 0, 1, 0, 0];\n}\n\n/**\n * Resets the given transform to an identity transform.\n * @param {!Transform} transform Transform.\n * @return {!Transform} Transform.\n */\nexport function reset(transform) {\n  return set(transform, 1, 0, 0, 1, 0, 0);\n}\n\n/**\n * Multiply the underlying matrices of two transforms and return the result in\n * the first transform.\n * @param {!Transform} transform1 Transform parameters of matrix 1.\n * @param {!Transform} transform2 Transform parameters of matrix 2.\n * @return {!Transform} transform1 multiplied with transform2.\n */\nexport function multiply(transform1, transform2) {\n  const a1 = transform1[0];\n  const b1 = transform1[1];\n  const c1 = transform1[2];\n  const d1 = transform1[3];\n  const e1 = transform1[4];\n  const f1 = transform1[5];\n  const a2 = transform2[0];\n  const b2 = transform2[1];\n  const c2 = transform2[2];\n  const d2 = transform2[3];\n  const e2 = transform2[4];\n  const f2 = transform2[5];\n\n  transform1[0] = a1 * a2 + c1 * b2;\n  transform1[1] = b1 * a2 + d1 * b2;\n  transform1[2] = a1 * c2 + c1 * d2;\n  transform1[3] = b1 * c2 + d1 * d2;\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\n\n  return transform1;\n}\n\n/**\n * Set the transform components a-f on a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} a The a component of the transform.\n * @param {number} b The b component of the transform.\n * @param {number} c The c component of the transform.\n * @param {number} d The d component of the transform.\n * @param {number} e The e component of the transform.\n * @param {number} f The f component of the transform.\n * @return {!Transform} Matrix with transform applied.\n */\nexport function set(transform, a, b, c, d, e, f) {\n  transform[0] = a;\n  transform[1] = b;\n  transform[2] = c;\n  transform[3] = d;\n  transform[4] = e;\n  transform[5] = f;\n  return transform;\n}\n\n/**\n * Set transform on one matrix from another matrix.\n * @param {!Transform} transform1 Matrix to set transform to.\n * @param {!Transform} transform2 Matrix to set transform from.\n * @return {!Transform} transform1 with transform from transform2 applied.\n */\nexport function setFromArray(transform1, transform2) {\n  transform1[0] = transform2[0];\n  transform1[1] = transform2[1];\n  transform1[2] = transform2[2];\n  transform1[3] = transform2[3];\n  transform1[4] = transform2[4];\n  transform1[5] = transform2[5];\n  return transform1;\n}\n\n/**\n * Transforms the given coordinate with the given transform returning the\n * resulting, transformed coordinate. The coordinate will be modified in-place.\n *\n * @param {Transform} transform The transformation.\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\n *     chained together.\n */\nexport function apply(transform, coordinate) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n  return coordinate;\n}\n\n/**\n * Applies rotation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} angle Angle in radians.\n * @return {!Transform} The rotated transform.\n */\nexport function rotate(transform, angle) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\n}\n\n/**\n * Applies scale to a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scaled transform.\n */\nexport function scale(transform, x, y) {\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\n}\n\n/**\n * Creates a scale transform.\n * @param {!Transform} target Transform to overwrite.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scale transform.\n */\nexport function makeScale(target, x, y) {\n  return set(target, x, 0, 0, y, 0, 0);\n}\n\n/**\n * Applies translation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} dx Translation x.\n * @param {number} dy Translation y.\n * @return {!Transform} The translated transform.\n */\nexport function translate(transform, dx, dy) {\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative).\n * @param {!Transform} transform The transform (will be modified in place).\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {!Transform} The composite transform.\n */\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  transform[0] = sx * cos;\n  transform[1] = sy * sin;\n  transform[2] = -sx * sin;\n  transform[3] = sy * cos;\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n  return transform;\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative). The resulting transform\n * string can be applied as `transform` property of an HTMLElement's style.\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {string} The composite css transform.\n * @api\n */\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (source) transform.\n */\nexport function invert(source) {\n  return makeInverse(source, source);\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} target Transform to be set as the inverse of\n *     the source transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (target) transform.\n */\nexport function makeInverse(target, source) {\n  const det = determinant(source);\n  assert(det !== 0, 'Transformation matrix cannot be inverted');\n\n  const a = source[0];\n  const b = source[1];\n  const c = source[2];\n  const d = source[3];\n  const e = source[4];\n  const f = source[5];\n\n  target[0] = d / det;\n  target[1] = -b / det;\n  target[2] = -c / det;\n  target[3] = a / det;\n  target[4] = (c * f - d * e) / det;\n  target[5] = -(a * f - b * e) / det;\n\n  return target;\n}\n\n/**\n * Returns the determinant of the given matrix.\n * @param {!Transform} mat Matrix.\n * @return {number} Determinant.\n */\nexport function determinant(mat) {\n  return mat[0] * mat[3] - mat[1] * mat[2];\n}\n\n/**\n * @type {Array}\n */\nconst matrixPrecision = [1e6, 1e6, 1e6, 1e6, 2, 2];\n\n/**\n * A rounded string version of the transform.  This can be used\n * for CSS transforms.\n * @param {!Transform} mat Matrix.\n * @return {string} The transform as a string.\n */\nexport function toString(mat) {\n  const transformString =\n    'matrix(' +\n    mat\n      .map(\n        (value, i) =>\n          Math.round(value * matrixPrecision[i]) / matrixPrecision[i],\n      )\n      .join(', ') +\n    ')';\n  return transformString;\n}\n","/**\n * @module ol/asserts\n */\n\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {string} errorMessage Error message.\n */\nexport function assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n","/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [\n    extent[0] - value,\n    extent[1] - value,\n    extent[2] + value,\n    extent[3] + value,\n  ];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest,\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    throw new Error('Invalid corner');\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size,\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest,\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  if (isEmpty(extent)) {\n    return createOrUpdateEmpty(dest);\n  }\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops,\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth,\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @param {boolean} [multiWorld] Return all worlds\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection, multiWorld) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth && !multiWorld) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n    if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    }\n    if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n","/**\n * @module ol/extent/Relationship\n */\n\n/**\n * Relationship to an extent.\n * @enum {number}\n */\nexport default {\n  UNKNOWN: 0,\n  INTERSECTING: 1,\n  ABOVE: 2,\n  RIGHT: 4,\n  BELOW: 8,\n  LEFT: 16,\n};\n","/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport {\n  PROJECTIONS as EPSG3857_PROJECTIONS,\n  fromEPSG4326,\n  toEPSG4326,\n} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport {METERS_PER_UNIT} from './proj/Units.js';\nimport {\n  add as addProj,\n  clear as clearProj,\n  get as getProj,\n} from './proj/projections.js';\nimport {\n  add as addTransformFunc,\n  clear as clearTransformFuncs,\n  get as getTransformFunc,\n} from './proj/transforms.js';\nimport {applyTransform, getWidth} from './extent.js';\nimport {clamp, modulo} from './math.js';\nimport {equals, getWorldsAway} from './coordinate.js';\nimport {getDistance} from './sphere.js';\nimport {\n  makeProjection as makeUTMProjection,\n  makeTransforms as makeUTMTransforms,\n} from './proj/utm.js';\nimport {warn} from './console.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * @typedef {Object} Transforms\n * @property {TransformFunction} forward The forward transform (from geographic).\n * @property {TransformFunction} inverse The inverse transform (to geographic).\n */\n\n/**\n * @type {Array<function(Projection): Transforms|null>}\n */\nconst transformFactories = [makeUTMTransforms];\n\n/**\n * @type {Array<function(string): Projection|null>}\n */\nconst projectionFactories = [makeUTMProjection];\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @callback TransformFunction\n * @param {Array<number>} input\n * @param {Array<number>} [output]\n * @param {number} [dimension]\n * @param {number} [stride]\n * @return {Array<number>}\n *\n * @api\n */\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\nlet showCoordinateWarning = true;\n\n/**\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(disable) {\n  const hide = disable === undefined ? true : disable;\n  showCoordinateWarning = !hide;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, output) {\n  if (output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    output = output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, output) {\n  if (output !== undefined && input !== output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    input = output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  if (!(typeof projectionLike === 'string')) {\n    return projectionLike;\n  }\n  const projection = getProj(projectionLike);\n  if (projection) {\n    return projection;\n  }\n  for (const makeProjection of projectionFactories) {\n    const projection = makeProjection(projectionLike);\n    if (projection) {\n      return projection;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (units && units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution =\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\n      }\n    }\n  } else {\n    const projUnits = projection.getUnits();\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(\n        projection,\n        get('EPSG:4326'),\n      );\n      if (!toEPSG4326 && projUnits !== 'degrees') {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [\n          point[0] - resolution / 2,\n          point[1],\n          point[0] + resolution / 2,\n          point[1],\n          point[0],\n          point[1] - resolution / 2,\n          point[0],\n          point[1] + resolution / 2,\n        ];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = units\n        ? METERS_PER_UNIT[units]\n        : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(\n  projections1,\n  projections2,\n  forwardTransform,\n  inverseTransform,\n) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  }\n  if (typeof projection === 'string') {\n    return get(projection);\n  }\n  return /** @type {Projection} */ (projection);\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimensions that should be transformed.\n     * @param {number} [stride] Stride.\n     * @return {Array<number>} Output.\n     */\n    function (input, output, dimension, stride) {\n      const length = input.length;\n      dimension = dimension !== undefined ? dimension : 2;\n      stride = stride ?? dimension;\n      output = output !== undefined ? output : new Array(length);\n      for (let i = 0; i < length; i += stride) {\n        const point = coordTransform(input.slice(i, i + dimension));\n        const pointLength = point.length;\n        for (let j = 0, jj = stride; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(\n    sourceProj,\n    destProj,\n    createTransformFromCoordinateTransform(forward),\n  );\n  addTransformFunc(\n    destProj,\n    sourceProj,\n    createTransformFromCoordinateTransform(inverse),\n  );\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, projection) {\n  disableCoordinateWarning();\n  return transform(\n    coordinate,\n    'EPSG:4326',\n    projection !== undefined ? projection : 'EPSG:3857',\n  );\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, projection) {\n  const lonLat = transform(\n    coordinate,\n    projection !== undefined ? projection : 'EPSG:3857',\n    'EPSG:4326',\n  );\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  }\n  const transformFunc = getTransformFromProjections(projection1, projection2);\n  return transformFunc === cloneTransform && equalUnits;\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} source Source Projection object.\n * @param {Projection} destination Destination Projection\n *     object.\n * @return {TransformFunction|null} Transform function.\n */\nexport function getTransformFromProjections(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (transformFunc) {\n    return transformFunc;\n  }\n\n  /**\n   * @type {Transforms|null}\n   */\n  let sourceTransforms = null;\n\n  /**\n   * @type {Transforms|null}\n   */\n  let destinationTransforms = null;\n\n  // lazily add projections if we have supported transforms\n  for (const makeTransforms of transformFactories) {\n    if (!sourceTransforms) {\n      sourceTransforms = makeTransforms(source);\n    }\n    if (!destinationTransforms) {\n      destinationTransforms = makeTransforms(destination);\n    }\n  }\n\n  if (!sourceTransforms && !destinationTransforms) {\n    return null;\n  }\n\n  const intermediateCode = 'EPSG:4326';\n  if (!destinationTransforms) {\n    const toDestination = getTransformFunc(intermediateCode, destinationCode);\n    if (toDestination) {\n      transformFunc = composeTransformFuncs(\n        sourceTransforms.inverse,\n        toDestination,\n      );\n    }\n  } else if (!sourceTransforms) {\n    const fromSource = getTransformFunc(sourceCode, intermediateCode);\n    if (fromSource) {\n      transformFunc = composeTransformFuncs(\n        fromSource,\n        destinationTransforms.forward,\n      );\n    }\n  } else {\n    transformFunc = composeTransformFuncs(\n      sourceTransforms.inverse,\n      destinationTransforms.forward,\n    );\n  }\n\n  if (transformFunc) {\n    addProjection(source);\n    addProjection(destination);\n    addTransformFunc(source, destination, transformFunc);\n  }\n\n  return transformFunc;\n}\n\n/**\n * @param {TransformFunction} t1 The first transform function.\n * @param {TransformFunction} t2 The second transform function.\n * @return {TransformFunction} The composed transform function.\n */\nfunction composeTransformFuncs(t1, t2) {\n  return function (input, output, dimensions, stride) {\n    output = t1(input, output, dimensions, stride);\n    return t2(output, output, dimensions, stride);\n  };\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original). If there\n * is no available transform between the two projection, the function will throw\n * an error.\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  if (!transformFunc) {\n    const sourceCode = get(source).getCode();\n    const destinationCode = get(destination).getCode();\n    throw new Error(\n      `No transform available between ${sourceCode} and ${destinationCode}`,\n    );\n  }\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, stops);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(\n  point,\n  sourceProjection,\n  destinationProjection,\n) {\n  const transformFunc = getTransformFromProjections(\n    sourceProjection,\n    destinationProjection,\n  );\n  return transformFunc(point);\n}\n\n/**\n * @type {Projection|null}\n */\nlet userProjection = null;\n\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @api\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (\n      showCoordinateWarning &&\n      !equals(coordinate, [0, 0]) &&\n      coordinate[0] >= -180 &&\n      coordinate[0] <= 180 &&\n      coordinate[1] >= -90 &&\n      coordinate[1] <= 90\n    ) {\n      showCoordinateWarning = false;\n      warn(\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.',\n      );\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return sourceMetersPerUnit && userMetersPerUnit\n    ? (resolution * sourceMetersPerUnit) / userMetersPerUnit\n    : resolution;\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const destMetersPerUnit = get(destProjection).getMetersPerUnit();\n  const userMetersPerUnit = userProjection.getMetersPerUnit();\n  return destMetersPerUnit && userMetersPerUnit\n    ? (resolution * userMetersPerUnit) / destMetersPerUnit\n    : resolution;\n}\n\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(\n    EPSG4326_PROJECTIONS,\n    EPSG3857_PROJECTIONS,\n    fromEPSG4326,\n    toEPSG4326,\n  );\n}\n\naddCommon();\n","/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @param {number} [stride] Stride (default is `dimension`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension, stride) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  stride = stride ?? dimension;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += stride) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @param {number} [stride] Stride (default is `dimension`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension, stride) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  stride = stride ?? dimension;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += stride) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n","/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */\n\n/**\n * @classdesc\n * In most cases, you should not need to create instances of this class.\n * Instead, where projection information is required, you can use a string\n * projection code or identifier (e.g. `EPSG:4326`) instead of a projection\n * instance.\n *\n * The library includes support for transforming coordinates between the following\n * projections:\n *\n *  * WGS 84 / Geographic - Using codes `EPSG:4326`, `CRS:84`, `urn:ogc:def:crs:EPSG:6.6:4326`,\n *    `urn:ogc:def:crs:OGC:1.3:CRS84`, `urn:ogc:def:crs:OGC:2:84`, `http://www.opengis.net/gml/srs/epsg.xml#4326`,\n *    or `urn:x-ogc:def:crs:EPSG:4326`\n *  * WGS 84 / Spherical Mercator - Using codes `EPSG:3857`, `EPSG:102100`, `EPSG:102113`, `EPSG:900913`,\n *    `urn:ogc:def:crs:EPSG:6.18:3:3857`, or `http://www.opengis.net/gml/srs/epsg.xml#3857`\n *  * WGS 84 / UTM zones - Using codes `EPSG:32601` through `EPSG:32660` for northern zones\n *    and `EPSG:32701` through `EPSG:32760` for southern zones. Note that the built-in UTM transforms\n *    are lower accuracy (with errors on the order of 0.1 m) than those that you might get in a\n *    library like [proj4js](https://github.com/proj4js/proj4js).\n *\n * For additional projection support, or to use higher accuracy transforms than the built-in ones, you can use\n * the [proj4js](https://github.com/proj4js/proj4js) library. With `proj4js`, after adding any new projection\n * definitions, call the {@link module:ol/proj/proj4.register} function.\n *\n * You can use the {@link module:ol/proj.get} function to retrieve a projection instance\n * for one of the registered projections.\n *\n * @api\n */\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\n\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.worldExtent_ =\n      options.worldExtent !== undefined ? options.worldExtent : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.axisOrientation_ =\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.global_ = options.global !== undefined ? options.global : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n    this.getPointResolutionFunc_ = options.getPointResolution;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.defaultTileGrid_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n  canWrapX() {\n    return this.canWrapX_;\n  }\n\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n  getCode() {\n    return this.code_;\n  }\n\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */\n  getUnits() {\n    return this.units_;\n  }\n\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n  isGlobal() {\n    return this.global_;\n  }\n\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n}\n\nexport default Projection;\n","/**\n * @module ol/proj/Units\n */\n\n/**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */\n\n/**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */\nconst unitByCode = {\n  '9001': 'm',\n  '9002': 'ft',\n  '9003': 'us-ft',\n  '9101': 'radians',\n  '9102': 'degrees',\n};\n\n/**\n * @param {number} code Unit code.\n * @return {Units} Units.\n */\nexport function fromCode(code) {\n  return unitByCode[code];\n}\n\n/**\n * @typedef {Object} MetersPerUnitLookup\n * @property {number} radians Radians\n * @property {number} degrees Degrees\n * @property {number} ft  Feet\n * @property {number} m Meters\n * @property {number} us-ft US feet\n */\n\n/**\n * Meters per unit lookup table.\n * @const\n * @type {MetersPerUnitLookup}\n * @api\n */\nexport const METERS_PER_UNIT = {\n  // use the radius of the Normal sphere\n  'radians': 6370997 / (2 * Math.PI),\n  'degrees': (2 * Math.PI * 6370997) / 360,\n  'ft': 0.3048,\n  'm': 1,\n  'us-ft': 1200 / 3937,\n};\n","/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */\n  constructor(code, axisOrientation) {\n    super({\n      code: code,\n      units: 'degrees',\n      extent: EXTENT,\n      axisOrientation: axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT,\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\n];\n","/**\n * @module ol/proj/projections\n */\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nlet cache = {};\n\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n  cache = {};\n}\n\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default|null} The projection (if cached).\n */\nexport function get(code) {\n  return (\n    cache[code] ||\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n    null\n  );\n}\n\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n  cache[code] = projection;\n}\n","/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|null} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    return transforms[sourceCode][destinationCode];\n  }\n  return null;\n}\n","/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>|null} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n\n/**\n * Wraps a number between some minimum and maximum values.\n * @param {number} n The number to wrap.\n * @param {number} min The minimum of the range (inclusive).\n * @param {number} max The maximum of the range (exclusive).\n * @return {number} The wrapped number.\n */\nexport function wrap(n, min, max) {\n  if (n >= min && n < max) {\n    return n;\n  }\n  const range = max - min;\n  return ((((n - min) % range) + range) % range) + min;\n}\n","/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo, toFixed} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\n * Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\n  }\n  return '';\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\n    );\n  }\n  return '';\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth,\n    );\n  }\n  return worldsAway;\n}\n","/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","/**\n * @module ol/sphere\n */\nimport {toDegrees, toRadians} from './math.js';\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport const DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a =\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n    Math.sin(deltaLonBy2) *\n      Math.sin(deltaLonBy2) *\n      Math.cos(lat1) *\n      Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint': {\n      break;\n    }\n    case 'LineString':\n    case 'LinearRing': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case 'MultiLineString':\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area +=\n      toRadians(x2 - x1) *\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return (area * radius * radius) / 2.0;\n}\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing': {\n      break;\n    }\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing),\n  );\n  const lon =\n    lon1 +\n    Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat),\n    );\n  return [toDegrees(lon), toDegrees(lat)];\n}\n","/**\n * @module ol/proj/utm\n */\n\n/**\n * Adapted from https://github.com/Turbo87/utm\n * Copyright (c) 2012-2017 Tobias Bieniek\n *\n * The functions here provide approximate transforms to and from UTM.\n * They are not appropriate for use beyond the validity extend of a UTM\n * zone, and the accuracy of the transform decreases toward the zone\n * edges.\n */\n\nimport Projection from './Projection.js';\nimport {toDegrees, toRadians, wrap} from '../math.js';\n\n/**\n * @typedef {Object} UTMZone\n * @property {number} number The zone number (1 - 60).\n * @property {boolean} north The northern hemisphere.\n */\n\nconst K0 = 0.9996;\n\nconst E = 0.00669438;\nconst E2 = E * E;\nconst E3 = E2 * E;\nconst E_P2 = E / (1 - E);\n\nconst SQRT_E = Math.sqrt(1 - E);\nconst _E = (1 - SQRT_E) / (1 + SQRT_E);\nconst _E2 = _E * _E;\nconst _E3 = _E2 * _E;\nconst _E4 = _E3 * _E;\nconst _E5 = _E4 * _E;\n\nconst M1 = 1 - E / 4 - (3 * E2) / 64 - (5 * E3) / 256;\nconst M2 = (3 * E) / 8 + (3 * E2) / 32 + (45 * E3) / 1024;\nconst M3 = (15 * E2) / 256 + (45 * E3) / 1024;\nconst M4 = (35 * E3) / 3072;\n\nconst P2 = (3 / 2) * _E - (27 / 32) * _E3 + (269 / 512) * _E5;\nconst P3 = (21 / 16) * _E2 - (55 / 32) * _E4;\nconst P4 = (151 / 96) * _E3 - (417 / 128) * _E5;\nconst P5 = (1097 / 512) * _E4;\n\nconst R = 6378137;\n\n/**\n * @param {number} easting Easting value of coordinate.\n * @param {number} northing Northing value of coordinate.\n * @param {UTMZone} zone The UTM zone.\n * @return {import(\"../coordinate.js\").Coordinate} The transformed coordinate.\n */\nfunction toLonLat(easting, northing, zone) {\n  const x = easting - 500000;\n  const y = zone.north ? northing : northing - 10000000;\n\n  const m = y / K0;\n  const mu = m / (R * M1);\n\n  const pRad =\n    mu +\n    P2 * Math.sin(2 * mu) +\n    P3 * Math.sin(4 * mu) +\n    P4 * Math.sin(6 * mu) +\n    P5 * Math.sin(8 * mu);\n\n  const pSin = Math.sin(pRad);\n  const pSin2 = pSin * pSin;\n\n  const pCos = Math.cos(pRad);\n\n  const pTan = pSin / pCos;\n  const pTan2 = pTan * pTan;\n  const pTan4 = pTan2 * pTan2;\n\n  const epSin = 1 - E * pSin2;\n  const epSinSqrt = Math.sqrt(1 - E * pSin2);\n\n  const n = R / epSinSqrt;\n  const r = (1 - E) / epSin;\n\n  const c = E_P2 * pCos ** 2;\n  const c2 = c * c;\n\n  const d = x / (n * K0);\n  const d2 = d * d;\n  const d3 = d2 * d;\n  const d4 = d3 * d;\n  const d5 = d4 * d;\n  const d6 = d5 * d;\n\n  const latitude =\n    pRad -\n    (pTan / r) *\n      (d2 / 2 - (d4 / 24) * (5 + 3 * pTan2 + 10 * c - 4 * c2 - 9 * E_P2)) +\n    (d6 / 720) * (61 + 90 * pTan2 + 298 * c + 45 * pTan4 - 252 * E_P2 - 3 * c2);\n\n  let longitude =\n    (d -\n      (d3 / 6) * (1 + 2 * pTan2 + c) +\n      (d5 / 120) * (5 - 2 * c + 28 * pTan2 - 3 * c2 + 8 * E_P2 + 24 * pTan4)) /\n    pCos;\n\n  longitude = wrap(\n    longitude + toRadians(zoneToCentralLongitude(zone.number)),\n    -Math.PI,\n    Math.PI,\n  );\n\n  return [toDegrees(longitude), toDegrees(latitude)];\n}\n\nconst MIN_LATITUDE = -80;\nconst MAX_LATITUDE = 84;\nconst MIN_LONGITUDE = -180;\nconst MAX_LONGITUDE = 180;\n\n/**\n * @param {number} longitude The longitude.\n * @param {number} latitude The latitude.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../coordinate.js').Coordinate} The UTM coordinate.\n */\nfunction fromLonLat(longitude, latitude, zone) {\n  longitude = wrap(longitude, MIN_LONGITUDE, MAX_LONGITUDE);\n\n  if (latitude < MIN_LATITUDE) {\n    latitude = MIN_LATITUDE;\n  } else if (latitude > MAX_LATITUDE) {\n    latitude = MAX_LATITUDE;\n  }\n\n  const latRad = toRadians(latitude);\n  const latSin = Math.sin(latRad);\n  const latCos = Math.cos(latRad);\n\n  const latTan = latSin / latCos;\n  const latTan2 = latTan * latTan;\n  const latTan4 = latTan2 * latTan2;\n\n  const lonRad = toRadians(longitude);\n  const centralLon = zoneToCentralLongitude(zone.number);\n  const centralLonRad = toRadians(centralLon);\n\n  const n = R / Math.sqrt(1 - E * latSin ** 2);\n  const c = E_P2 * latCos ** 2;\n\n  const a = latCos * wrap(lonRad - centralLonRad, -Math.PI, Math.PI);\n  const a2 = a * a;\n  const a3 = a2 * a;\n  const a4 = a3 * a;\n  const a5 = a4 * a;\n  const a6 = a5 * a;\n\n  const m =\n    R *\n    (M1 * latRad -\n      M2 * Math.sin(2 * latRad) +\n      M3 * Math.sin(4 * latRad) -\n      M4 * Math.sin(6 * latRad));\n\n  const easting =\n    K0 *\n      n *\n      (a +\n        (a3 / 6) * (1 - latTan2 + c) +\n        (a5 / 120) * (5 - 18 * latTan2 + latTan4 + 72 * c - 58 * E_P2)) +\n    500000;\n\n  let northing =\n    K0 *\n    (m +\n      n *\n        latTan *\n        (a2 / 2 +\n          (a4 / 24) * (5 - latTan2 + 9 * c + 4 * c ** 2) +\n          (a6 / 720) * (61 - 58 * latTan2 + latTan4 + 600 * c - 330 * E_P2)));\n\n  if (!zone.north) {\n    northing += 10000000;\n  }\n\n  return [easting, northing];\n}\n\n/**\n * @param {number} zone The zone number.\n * @return {number} The central longitude in degrees.\n */\nfunction zoneToCentralLongitude(zone) {\n  return (zone - 1) * 6 - 180 + 3;\n}\n\n/**\n * @type {Array<RegExp>}\n */\nconst epsgRegExes = [\n  /^EPSG:(\\d+)$/,\n  /^urn:ogc:def:crs:EPSG::(\\d+)$/,\n  /^http:\\/\\/www\\.opengis\\.net\\/def\\/crs\\/EPSG\\/0\\/(\\d+)$/,\n];\n\n/**\n * @param {string} code The projection code.\n * @return {UTMZone|null} The UTM zone info (or null if not UTM).\n */\nexport function zoneFromCode(code) {\n  let epsgId = 0;\n  for (const re of epsgRegExes) {\n    const match = code.match(re);\n    if (match) {\n      epsgId = parseInt(match[1]);\n      break;\n    }\n  }\n  if (!epsgId) {\n    return null;\n  }\n\n  let number = 0;\n  let north = false;\n  if (epsgId > 32700 && epsgId < 32761) {\n    number = epsgId - 32700;\n  } else if (epsgId > 32600 && epsgId < 32661) {\n    north = true;\n    number = epsgId - 32600;\n  }\n  if (!number) {\n    return null;\n  }\n\n  return {number, north};\n}\n\n/**\n * @param {function(number, number, UTMZone): import('../coordinate.js').Coordinate} transformer The transformer.\n * @param {UTMZone} zone The UTM zone.\n * @return {import('../proj.js').TransformFunction} The transform function.\n */\nfunction makeTransformFunction(transformer, zone) {\n  return function (input, output, dimension, stride) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    stride = stride ?? dimension;\n    if (!output) {\n      if (dimension > 2) {\n        output = input.slice();\n      } else {\n        output = new Array(length);\n      }\n    }\n    for (let i = 0; i < length; i += stride) {\n      const x = input[i];\n      const y = input[i + 1];\n      const coord = transformer(x, y, zone);\n      output[i] = coord[0];\n      output[i + 1] = coord[1];\n    }\n    return output;\n  };\n}\n\n/**\n * @param {string} code The projection code.\n * @return {import('./Projection.js').default|null} A projection or null if unable to create one.\n */\nexport function makeProjection(code) {\n  const zone = zoneFromCode(code);\n  if (!zone) {\n    return null;\n  }\n  return new Projection({code, units: 'm'});\n}\n\n/**\n * @param {import('./Projection.js').default} projection The projection.\n * @return {import('../proj.js').Transforms|null} The transforms lookup or null if unable to handle projection.\n */\nexport function makeTransforms(projection) {\n  const zone = zoneFromCode(projection.getCode());\n  if (!zone) {\n    return null;\n  }\n\n  return {\n    forward: makeTransformFunction(fromLonLat, zone),\n    inverse: makeTransformFunction(toLonLat, zone),\n  };\n}\n","/**\n * @module ol/console\n */\n\n/**\n * @typedef {'info'|'warn'|'error'|'none'} Level\n */\n\n/**\n * @type {Object<Level, number>}\n */\nconst levels = {\n  info: 1,\n  warn: 2,\n  error: 3,\n  none: 4,\n};\n\n/**\n * @type {number}\n */\nlet level = levels.info;\n\n/**\n * Set the logging level.  By default, the level is set to 'info' and all\n * messages will be logged.  Set to 'warn' to only display warnings and errors.\n * Set to 'error' to only display errors.  Set to 'none' to silence all messages.\n *\n * @param {Level} l The new level.\n */\nexport function setLevel(l) {\n  level = levels[l];\n}\n\n/**\n * @param  {...any} args Arguments to log\n */\nexport function log(...args) {\n  if (level > levels.info) {\n    return;\n  }\n  console.log(...args); // eslint-disable-line no-console\n}\n\n/**\n * @param  {...any} args Arguments to log\n */\nexport function warn(...args) {\n  if (level > levels.warn) {\n    return;\n  }\n  console.warn(...args); // eslint-disable-line no-console\n}\n\n/**\n * @param  {...any} args Arguments to log\n */\nexport function error(...args) {\n  if (level > levels.error) {\n    return;\n  }\n  console.error(...args); // eslint-disable-line no-console\n}\n","/**\n * @module ol/reproj\n */\nimport {\n  containsCoordinate,\n  createEmpty,\n  extend,\n  forEachCorner,\n  getCenter,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from './extent.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getPointResolution, transform} from './proj.js';\nimport {solveLinearSystem} from './math.js';\n\nlet brokenDiagonalRendering_;\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return (\n    Math.abs(data[offset * 4] - 210) > 2 ||\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\n  );\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ =\n      verifyBrokenDiagonalRendering(data, 0) ||\n      verifyBrokenDiagonalRendering(data, 4) ||\n      verifyBrokenDiagonalRendering(data, 8);\n    releaseCanvas(ctx);\n    canvasPool.push(ctx.canvas);\n  }\n\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(\n  sourceProj,\n  targetProj,\n  targetCenter,\n  targetResolution,\n) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(\n    targetProj,\n    targetResolution,\n    targetCenter,\n  );\n\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor =\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n      sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(\n  sourceProj,\n  targetProj,\n  targetExtent,\n  targetResolution,\n) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(\n    sourceProj,\n    targetProj,\n    targetCenter,\n    targetResolution,\n  );\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(\n        sourceProj,\n        targetProj,\n        corner,\n        targetResolution,\n      );\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [clipExtent] Clip extent.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @param {boolean} [drawSingle] Draw single source images directly without stitchContext.\n * @param {boolean} [clipExtent] Clip stitchContext to sourceExtent.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(\n  width,\n  height,\n  pixelRatio,\n  sourceResolution,\n  sourceExtent,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  renderEdges,\n  interpolate,\n  drawSingle,\n  clipExtent,\n) {\n  const context = createCanvasContext2D(\n    Math.round(pixelRatio * width),\n    Math.round(pixelRatio * height),\n    canvasPool,\n  );\n\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  let stitchContext;\n  const stitchScale = pixelRatio / sourceResolution;\n  // Round up Float32 scale values to prevent interpolation in Firefox.\n  const inverseScale = (interpolate ? 1 : 1 + Math.pow(2, -24)) / stitchScale;\n\n  if (!drawSingle || sources.length !== 1 || gutter !== 0) {\n    stitchContext = createCanvasContext2D(\n      Math.round(getWidth(sourceDataExtent) * stitchScale),\n      Math.round(getHeight(sourceDataExtent) * stitchScale),\n      canvasPool,\n    );\n\n    if (!interpolate) {\n      stitchContext.imageSmoothingEnabled = false;\n    }\n    if (sourceExtent && clipExtent) {\n      const xPos = (sourceExtent[0] - sourceDataExtent[0]) * stitchScale;\n      const yPos = -(sourceExtent[3] - sourceDataExtent[3]) * stitchScale;\n      const width = getWidth(sourceExtent) * stitchScale;\n      const height = getHeight(sourceExtent) * stitchScale;\n      stitchContext.rect(xPos, yPos, width, height);\n      stitchContext.clip();\n    }\n\n    sources.forEach(function (src, i, arr) {\n      // This test should never fail -- but it does. Need to find a fix the upstream condition\n      if (src.image.width > 0 && src.image.height > 0) {\n        if (src.clipExtent) {\n          stitchContext.save();\n          const xPos = (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale;\n          const yPos = -(src.clipExtent[3] - sourceDataExtent[3]) * stitchScale;\n          const width = getWidth(src.clipExtent) * stitchScale;\n          const height = getHeight(src.clipExtent) * stitchScale;\n          stitchContext.rect(\n            interpolate ? xPos : Math.round(xPos),\n            interpolate ? yPos : Math.round(yPos),\n            interpolate ? width : Math.round(xPos + width) - Math.round(xPos),\n            interpolate ? height : Math.round(yPos + height) - Math.round(yPos),\n          );\n          stitchContext.clip();\n        }\n\n        const xPos = (src.extent[0] - sourceDataExtent[0]) * stitchScale;\n        const yPos = -(src.extent[3] - sourceDataExtent[3]) * stitchScale;\n        const srcWidth = getWidth(src.extent) * stitchScale;\n        const srcHeight = getHeight(src.extent) * stitchScale;\n        stitchContext.drawImage(\n          src.image,\n          gutter,\n          gutter,\n          src.image.width - 2 * gutter,\n          src.image.height - 2 * gutter,\n          interpolate ? xPos : Math.round(xPos),\n          interpolate ? yPos : Math.round(yPos),\n          interpolate\n            ? srcWidth\n            : Math.round(xPos + srcWidth) - Math.round(xPos),\n          interpolate\n            ? srcHeight\n            : Math.round(yPos + srcHeight) - Math.round(yPos),\n        );\n\n        if (src.clipExtent) {\n          stitchContext.restore();\n        }\n      }\n    });\n  }\n  const targetTopLeft = getTopLeft(targetExtent);\n\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(\n      -(target[0][1] - targetTopLeft[1]) / targetResolution,\n    );\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(\n      -(target[1][1] - targetTopLeft[1]) / targetResolution,\n    );\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(\n      -(target[2][1] - targetTopLeft[1]) / targetResolution,\n    );\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n\n    const augmentedMatrix = [\n      [x1, y1, 0, 0, u1 - u0],\n      [x2, y2, 0, 0, u2 - u0],\n      [0, 0, x1, y1, v1 - v0],\n      [0, 0, x2, y2, v2 - v0],\n    ];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(\n          u1 + pixelRound(((step + 1) * ud) / steps),\n          v1 + pixelRound((step * vd) / (steps - 1)),\n        );\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(\n            u1 + pixelRound(((step + 1) * ud) / steps),\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1)),\n          );\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n\n    context.transform(\n      affineCoefs[0],\n      affineCoefs[2],\n      affineCoefs[1],\n      affineCoefs[3],\n      u0,\n      v0,\n    );\n\n    context.translate(\n      sourceDataExtent[0] - sourceNumericalShiftX,\n      sourceDataExtent[3] - sourceNumericalShiftY,\n    );\n\n    let image;\n    if (stitchContext) {\n      image = stitchContext.canvas;\n      context.scale(inverseScale, -inverseScale);\n    } else {\n      const source = sources[0];\n      const extent = source.extent;\n      image = source.image;\n      context.scale(\n        getWidth(extent) / image.width,\n        -getHeight(extent) / image.height,\n      );\n    }\n\n    context.drawImage(image, 0, 0);\n    context.restore();\n  });\n\n  if (stitchContext) {\n    releaseCanvas(stitchContext);\n    canvasPool.push(stitchContext.canvas);\n  }\n\n  if (renderEdges) {\n    context.save();\n\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n\n    context.restore();\n  }\n  return context.canvas;\n}\n","/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates} from '../tileurlfunction.js';\nimport {expandUrl} from '../uri.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @deprecated Use the ol/source/ImageTile.js instead.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n            ? TileEventType.TILELOADEND\n            : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Deprecated.  Use an ImageTile source instead.\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport {abstract, getUid} from '../util.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {scale as scaleSize, toSize} from '../size.js';\nimport {withinExtentAndZ} from '../tilecoord.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n *\n * @template {import(\"../Tile.js\").default} [TileType=import(\"../Tile.js\").default]\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     * @protected\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || getUid(this);\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   * @override\n   */\n  getResolutions(projection) {\n    const tileGrid = projection\n      ? this.getTileGridForProjection(projection)\n      : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {TileType|null} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    const gridProjection =\n      projection !== undefined ? projection : this.getProjection();\n    const tileGrid =\n      projection !== undefined\n        ? this.getTileGridForProjection(gridProjection)\n        : this.tileGrid || this.getTileGridForProjection(gridProjection);\n    if (this.getWrapX() && gridProjection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, gridProjection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached reprojected tiles from the source. The next render cycle will create new tiles.\n   * @api\n   */\n  clear() {}\n\n  /**\n   * @override\n   */\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n","/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ = options.attributionsCollapsible ?? true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    return null;\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n  if (!Array.isArray(attributionLike)) {\n    attributionLike = [attributionLike];\n  }\n  return (frameState) => attributionLike;\n}\n\nexport default Source;\n","/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport {getUid} from './util.js';\nimport {isEmpty} from './obj.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  constructor(values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>|null}\n     */\n    this.values_ = null;\n\n    if (values !== undefined) {\n      this.setProperties(values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && Object.assign({}, this.values_)) || {};\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>?} Object.\n   */\n  getPropertiesInternal() {\n    return this.values_;\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, silent) {\n    for (const key in values) {\n      this.set(key, values[key], silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n","/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange',\n};\n\n/**\n * @typedef {'propertychange'} Types\n */\n","/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    this.on =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onInternal\n      );\n\n    this.once =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onceInternal\n      );\n\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    }\n    return listen(this, /** @type {string} */ (type), listener);\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n","/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {toSize} from './size.js';\n\nexport {TileGrid};\nexport {default as WMTS} from './tilegrid/WMTS.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth,\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution,\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n","/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport {ceil, clamp, floor} from '../math.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        /**\n         * @param {number} a First resolution\n         * @param {number} b Second resolution\n         * @return {number} Comparison result\n         */\n        (a, b) => b - a,\n        true,\n      ),\n      '`resolutions` must be sorted in descending order',\n    );\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(\n        this.origins_.length == this.resolutions_.length,\n        'Number of `origins` and `resolutions` must be equal',\n      );\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      'Either `origin` or `origins` must be configured, never both',\n    );\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(\n        this.tileSizes_.length == this.resolutions_.length,\n        'Number of `tileSizes` and `resolutions` must be equal',\n      );\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n          ? DEFAULT_TILE_SIZE\n          : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      'Either `tileSize` or `tileSizes` must be configured, never both',\n    );\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map((size, z) => {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1),\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      });\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    tempTileRange,\n    tempExtent,\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n    }\n    while (z >= this.minZoom) {\n      if (x !== undefined && y !== undefined) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          tempTileRange,\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    return this.origins_[z];\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          tempTileRange,\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        tempExtent || this.tmpExtent_,\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        tempTileRange,\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        tempTileRange,\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n    const minX = tmpTileCoord[1];\n    const minY = tmpTileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n    const maxX = tmpTileCoord[1];\n    const maxY = tmpTileCoord[2];\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, tempExtent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord,\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord,\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Integer zoom level, e.g. the result of a `getZForResolution()` method call\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord,\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    return this.tileSizes_[z];\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default|null} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    }\n    return this.fullTileRanges_[z];\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0,\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(\n      viewport,\n      0,\n      viewport.length,\n      2,\n      this.getTileCoordExtent(tileCoord),\n    );\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n","/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\n\nexport default TileRange;\n","/**\n * @module ol/tilegrid/common\n */\n\n/**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */\nexport const DEFAULT_MAX_ZOOM = 42;\n\n/**\n * Default tile size.\n * @type {number}\n */\nexport const DEFAULT_TILE_SIZE = 256;\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return hashZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {number} Hash.\n */\nexport function hashZXY(z, x, y) {\n  return (x << z) + y;\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  containsExtent,\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {forEach as forEachSegment} from './segments.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(),\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n  );\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    },\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1],\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3],\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent,\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent,\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent,\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(\n      flatCoordinates.slice(offset - stride, offset),\n      flatCoordinates.slice(offset, offset + stride),\n    );\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/contains\n */\nimport {forEachCorner} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent,\n) {\n  const outside = forEachCorner(\n    extent,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n      return !linearRingContainsXY(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        coordinate[0],\n        coordinate[1],\n      );\n    },\n  );\n  return !outside;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  x,\n  y,\n) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  let wn = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return wn !== 0;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  x,\n  y,\n) {\n  if (ends.length === 0) {\n    return false;\n  }\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  x,\n  y,\n) {\n  if (endss.length === 0) {\n    return false;\n  }\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}\n","/**\n * @module ol/tileurlfunction\n */\nimport {modulo} from './math.js';\nimport {renderXYZTemplate} from './uri.js';\nimport {hash as tileCoordHash} from './tilecoord.js';\n\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default|null} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplate(template, tileGrid) {\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      let maxY;\n      const z = tileCoord[0];\n      if (tileGrid) {\n        // The `{-y}` placeholder only works for sources that have a tile grid at construction\n        const range = tileGrid.getFullTileRange(z);\n        if (range) {\n          maxY = range.getHeight() - 1;\n        }\n      }\n      return renderXYZTemplate(template, z, tileCoord[1], tileCoord[2], maxY);\n    }\n  );\n}\n\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      const h = tileCoordHash(tileCoord);\n      const index = modulo(h, tileUrlFunctions.length);\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    }\n  );\n}\n\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n\n/**\n * TODO: Update ol-mapbox-style to import this from the uri.js module.\n */\nexport {expandUrl} from './uri.js';\n","/**\n * @module ol/uri\n */\n\nimport {hashZXY} from './tilecoord.js';\nimport {modulo} from './math.js';\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  /** @type {Array<string>} */\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n\nconst zRegEx = /\\{z\\}/g;\nconst xRegEx = /\\{x\\}/g;\nconst yRegEx = /\\{y\\}/g;\nconst dashYRegEx = /\\{-y\\}/g;\n\n/**\n * @param {string} template The URL template.  Should have `{x}`, `{y}`, and `{z}` placeholders.  If\n * the template has a `{-y}` placeholder, the `maxY` parameter must be supplied.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @param {number} [maxY] The maximum y coordinate at the given z level.\n * @return {string} The URL.\n */\nexport function renderXYZTemplate(template, z, x, y, maxY) {\n  return template\n    .replace(zRegEx, z.toString())\n    .replace(xRegEx, x.toString())\n    .replace(yRegEx, y.toString())\n    .replace(dashYRegEx, function () {\n      if (maxY === undefined) {\n        throw new Error(\n          'If the URL template has a {-y} placeholder, the grid extent must be known',\n        );\n      }\n      return (maxY - y).toString();\n    });\n}\n\n/**\n * @param {Array<string>} urls List of URLs.\n * @param {number} z The tile z coordinate.\n * @param {number} x The tile x coordinate.\n * @param {number} y The tile y coordinate.\n * @return {string} The chosen URL.\n */\nexport function pickUrl(urls, z, x, y) {\n  const hash = hashZXY(z, x, y);\n  const index = modulo(hash, urls.length);\n  return urls[index];\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} [TileSourceType=import(\"../source/Tile.js\").default]\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * @override\n   */\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this, {\n      cacheSize: this.getCacheSize(),\n    });\n  }\n}\n\nexport default TileLayer;\n","/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [useInterimTilesOnError=true] Deprecated.  Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n * @property {number} [cacheSize=512] The internal tile cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    const cacheSize = options.cacheSize;\n    delete options.cacheSize;\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.cacheSize_ = cacheSize;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true,\n    );\n  }\n\n  /**\n   * @return {number|undefined} The suggested cache size\n   * @protected\n   */\n  getCacheSize() {\n    return this.cacheSize_;\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Deprecated.  Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Deprecated.  Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   * @override\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n","/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport View from '../View.js';\nimport {assert} from '../asserts.js';\nimport {intersects} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_,\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   * @override\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   * @override\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   * @override\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n      return;\n    }\n    this.sourceReady_ = true;\n    this.dispatchEvent('sourceready');\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    this.sourceReady_ = false;\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this,\n      );\n      if (source.getState() === 'ready') {\n        this.sourceReady_ = true;\n        setTimeout(() => {\n          this.dispatchEvent('sourceready');\n        }, 0);\n      }\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return Promise.resolve([]);\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\n   * extent, not set to `visible: false`, and not inside a layer group that is set\n   * to `visible: false`.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {boolean} The layer is visible in the map view.\n   * @api\n   */\n  isVisible(view) {\n    let frameState;\n    const map = this.getMapInternal();\n    if (!view && map) {\n      view = map.getView();\n    }\n    if (view instanceof View) {\n      frameState = {\n        viewState: view.getState(),\n        extent: view.calculateExtent(),\n      };\n    } else {\n      frameState = view;\n    }\n    if (!frameState.layerStatesArray && map) {\n      frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n    }\n    let layerState;\n    if (frameState.layerStatesArray) {\n      layerState = frameState.layerStatesArray.find(\n        (layerState) => layerState.layer === this,\n      );\n      if (!layerState) {\n        return false;\n      }\n    } else {\n      layerState = this.getLayerState();\n    }\n\n    const layerExtent = this.getExtent();\n\n    return (\n      inView(layerState, frameState.viewState) &&\n      (!layerExtent || intersects(layerExtent, frameState.extent))\n    );\n  }\n\n  /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */\n  getAttributions(view) {\n    if (!this.isVisible(view)) {\n      return [];\n    }\n    const getAttributions = this.getSource()?.getAttributions();\n    if (!getAttributions) {\n      return [];\n    }\n    const frameState =\n      view instanceof View ? view.getViewStateAndExtent() : view;\n    let attributions = getAttributions(frameState);\n    if (!Array.isArray(attributions)) {\n      attributions = [attributions];\n    }\n    return attributions;\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n    return null;\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /** @return {string} Declutter */\n  getDeclutter() {\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../layer/Layer.js\").State} layerState Layer state.\n   */\n  renderDeclutter(frameState, layerState) {}\n\n  /**\n   * When the renderer follows a layout -> render approach, do the final rendering here.\n   * @param {import('../Map.js').FrameState} frameState Frame state\n   */\n  renderDeferred(frameState) {\n    const layerRenderer = this.getRenderer();\n    if (!layerRenderer) {\n      return;\n    }\n    layerRenderer.renderDeferred(frameState);\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        this.handlePrecompose_,\n        this,\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} renderEvent Render event\n   * @private\n   */\n  handlePrecompose_(renderEvent) {\n    const layerStatesArray =\n      /** @type {import(\"../render/Event.js\").default} */ (renderEvent)\n        .frameState.layerStatesArray;\n    const layerState = this.getLayerState(false);\n    assert(\n      !layerStatesArray.some(\n        (arrayLayerState) => arrayLayerState.layer === layerState.layer,\n      ),\n      'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.',\n    );\n    layerStatesArray.push(layerState);\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * This will clear the renderer so that a new one can be created next time it is needed\n   */\n  clearRenderer() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.clearRenderer();\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n","/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] =\n      options.opacity !== undefined ? options.opacity : 1;\n    assert(\n      typeof properties[LayerProperty.OPACITY] === 'number',\n      'Layer opacity must be a number',\n    );\n\n    properties[LayerProperty.VISIBLE] =\n      options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n      options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] =\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] =\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.className_ =\n      properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  getBackground() {\n    return this.background_;\n  }\n\n  /**\n   * @return {string} CSS class name.\n   */\n  getClassName() {\n    return this.className_;\n  }\n\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState(managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state =\n      this.state_ ||\n      /** @type {?} */ ({\n        layer: this,\n        managed: managed === undefined ? true : managed,\n      });\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer. Returns Infinity if\n   * the layer has no maximum resolution set.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer. Returns 0 if\n   * the layer has no minimum resolution set.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum zoom level of the layer. Returns -Infinity if\n   * the layer has no minimum zoom set.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\n  }\n\n  /**\n   * Return the maximum zoom level of the layer. Returns Infinity if\n   * the layer has no maximum zoom set.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the value of this layer's `visible` property. To find out whether the layer\n   * is visible on a map, use `isVisible()` instead.\n   * @return {boolean} The value of the `visible` property of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. Returns undefined if the layer is unmanaged.\n   * @return {number|undefined} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number|undefined} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */\n  setBackground(background) {\n    this.background_ = background;\n    this.changed();\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 'Layer opacity must be a number');\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default BaseLayer;\n","/**\n * @module ol/layer/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  OPACITY: 'opacity',\n  VISIBLE: 'visible',\n  EXTENT: 'extent',\n  Z_INDEX: 'zIndex',\n  MAX_RESOLUTION: 'maxResolution',\n  MIN_RESOLUTION: 'minResolution',\n  MAX_ZOOM: 'maxZoom',\n  MIN_ZOOM: 'minZoom',\n  SOURCE: 'source',\n  MAP: 'map',\n};\n","/**\n * @module ol/render/EventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */\n  PRERENDER: 'prerender',\n\n  /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */\n  PRECOMPOSE: 'precompose',\n\n  /**\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */\n  POSTCOMPOSE: 'postcompose',\n\n  /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */\n  RENDERCOMPLETE: 'rendercomplete',\n};\n\n/**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */\n\n/**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */\n","/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  disableCoordinateWarning,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {VOID} from './functions.js';\nimport {\n  add as addCoordinate,\n  equals as coordinatesEqual,\n  equals,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {assert} from './asserts.js';\nimport {none as centerNone, createExtent} from './centerconstraint.js';\nimport {clamp, modulo} from './math.js';\nimport {\n  createMinMaxResolution,\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {easeOut, inAndOut} from './easing.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {linearFindNearest} from './array.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to\n * fit the extent into. Defaults to the size of the map the view is associated with.\n * If no map or multiple maps are connected to the view, provide the desired box size\n * (e.g. `map.getSize()`).\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateLayerStateExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    const properties = Object.assign({}, options);\n    for (const key in ViewProperty) {\n      delete properties[key];\n    }\n    this.setProperties(properties, true);\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null,\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenterInternal();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX =\n        (resolution / 2) *\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY =\n        (resolution / 2) *\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = this.getProperties();\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return Object.assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = Object.assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection(),\n        );\n      }\n      if (options.anchor) {\n        options = Object.assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection(),\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    let i = 0;\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[i];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true,\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor,\n            );\n          }\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true,\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor,\n            );\n          }\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this),\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(rotation) {\n    const size = this.viewportSize_;\n    if (rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n        Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(size) {\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.get('constrainResolution');\n  }\n\n  /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(hints) {\n    if (hints !== undefined) {\n      hints[0] = this.hints_[0];\n      hints[1] = this.hints_[1];\n      return hints;\n    }\n    return this.hints_.slice();\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed box size.\n   * @param {import(\"./size.js\").Size} [size] The pixel dimensions of the box\n   * into which the calculated extent should fit. Defaults to the size of the\n   * map the view is associated with.\n   * If no map or multiple maps are connected to the view, provide the desired\n   * box size (e.g. `map.getSize()`).\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(size) {\n    const extent = this.calculateExtentInternal(size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    assert(center, 'The view center is not defined');\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 'The view resolution is not defined');\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 'The view rotation is not defined');\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      size,\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(power) {\n    power = power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(power) {\n    const logPower = Math.log(power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(rotation) {\n    let size = this.getViewportSize_(rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [\n        size[0] - padding[1] - padding[3],\n        size[1] - padding[0] - padding[2],\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = this.getResolution();\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(\n        center,\n        this.getViewportSize_(),\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation,\n      );\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */\n  getViewStateAndExtent() {\n    return {\n      viewState: this.getState(),\n      extent: this.calculateExtent(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_?.length) {\n      if (this.resolutions_.length === 1) {\n        return this.resolutions_[0];\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2,\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    }\n    return (\n      this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n    );\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      'Invalid extent or geometry provided as `geometry`',\n    );\n    if (Array.isArray(geometryOrExtent)) {\n      assert(\n        !isEmpty(geometryOrExtent),\n        'Cannot fit empty extent provided as `geometry`',\n      );\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === 'Circle') {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection(),\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n          geometryOrExtent\n            .clone()\n            .transform(userProjection, this.getProjection())\n        );\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */\n  fitInternal(geometry, options) {\n    options = options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n      size[0] - padding[1] - padding[3],\n      size[1] - padding[0] - padding[2],\n    ]);\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback,\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position,\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(\n      calculateCenterOn(\n        coordinate,\n        size,\n        position,\n        this.getResolution(),\n        this.getRotation(),\n      ),\n    );\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(\n        center,\n        size,\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation,\n      );\n      centerShift = [\n        center[0] - shiftedCenter[0],\n        center[1] - shiftedCenter[1],\n      ];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving,\n    );\n\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, anchor) {\n    if (anchor) {\n      anchor = fromUserCoordinate(anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving,\n    );\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(\n      center ? fromUserCoordinate(center, this.getProjection()) : center,\n    );\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(doNotCancelAnims, forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving,\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving,\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size,\n      ),\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n    if (\n      !newCenter ||\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  resolveConstraints(duration, resolutionDirection, anchor) {\n    duration = duration !== undefined ? duration : 200;\n    const direction = resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size,\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      false,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size,\n      ),\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(duration, resolutionDirection, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  endInteractionInternal(duration, resolutionDirection, anchor) {\n    if (!this.getInteracting()) {\n      return;\n    }\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      targetResolution || this.getResolution(),\n      size,\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, direction),\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, direction) {\n    direction = direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor),\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent,\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    }\n    if (constrainRotation === false) {\n      return rotationNone;\n    }\n    if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n\n  return [centerX, centerY];\n}\n\nexport default View;\n","/**\n * @module ol/ViewHint\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  ANIMATING: 0,\n  INTERACTING: 1,\n};\n","/**\n * @module ol/ViewProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  CENTER: 'center',\n  RESOLUTION: 'resolution',\n  ROTATION: 'rotation',\n};\n","/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n      // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY);\n\n      // during an interaction, allow some overscroll\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x +=\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y +=\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n\n      return [x, y];\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n","/**\n * @module ol/resolutionconstraint\n */\nimport {clamp} from './math.js';\nimport {getHeight, getWidth} from './extent.js';\nimport {linearFindNearest} from './array.js';\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */\n\n/**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */\nfunction getViewportClampedResolution(\n  resolution,\n  maxExtent,\n  viewportSize,\n  showFullExtent,\n) {\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\n\n  if (showFullExtent) {\n    return Math.min(resolution, Math.max(xResolution, yResolution));\n  }\n  return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n  let result = Math.min(resolution, maxResolution);\n  const ratio = 50;\n\n  result *=\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\n    1;\n  if (minResolution) {\n    result = Math.max(result, minResolution);\n    result /=\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\n        ratio +\n      1;\n  }\n  return clamp(result, minResolution / 2, maxResolution * 2);\n}\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(\n  resolutions,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const maxResolution = resolutions[0];\n        const minResolution = resolutions[resolutions.length - 1];\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution,\n          );\n        }\n\n        const capped = Math.min(cappedMaxRes, resolution);\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\n          return resolutions[z + 1];\n        }\n        return resolutions[z];\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number} [minResolution] Minimum resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(\n  power,\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  minResolution = minResolution !== undefined ? minResolution : 0;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution,\n          );\n        }\n\n        const tolerance = 1e-9;\n        const minZoomLevel = Math.ceil(\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance,\n        );\n        const offset = -direction * (0.5 - tolerance) + 0.5;\n        const capped = Math.min(cappedMaxRes, resolution);\n        const cappedZoomLevel = Math.floor(\n          Math.log(maxResolution / capped) / Math.log(power) + offset,\n        );\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\n        return clamp(newResolution, minResolution, cappedMaxRes);\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createMinMaxResolution(\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent,\n) {\n  smooth = smooth !== undefined ? smooth : true;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent,\n            )\n          : maxResolution;\n\n        if (!smooth || !isMoving) {\n          return clamp(resolution, minResolution, cappedMaxRes);\n        }\n        return getSmoothClampedResolution(\n          resolution,\n          cappedMaxRes,\n          minResolution,\n        );\n      }\n      return undefined;\n    }\n  );\n}\n","/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  }\n  return undefined;\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  }\n  return undefined;\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} [tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(tolerance) {\n  const t = tolerance === undefined ? toRadians(5) : tolerance;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving || rotation === undefined) {\n        return rotation;\n      }\n\n      if (Math.abs(rotation) <= t) {\n        return 0;\n      }\n      return rotation;\n    }\n  );\n}\n","/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice(),\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   * @override\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y,\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   * @override\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0,\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return /** @type {import(\"../coordinate.js\").Coordinate} */ (\n      this.flatInteriorPoint_\n    );\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index],\n      ),\n      this.layout,\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout,\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride,\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return /** @type {Array<number>} */ (this.orientedFlatCoordinates_);\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   * @override\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds,\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_,\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius),\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n","/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates),\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout,\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0,\n        ),\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   * @override\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   * @override\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    /** @type {Array<number>} */\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n","/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n    this.layout = 'XY';\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent,\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride,\n    );\n  }\n\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @override\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    }\n    // Simplification did not actually remove any coordinates.  We now know\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\n    // than or equal to the current squaredTolerance will also not have any\n    // effect.  This allows us to short circuit simplification (saving CPU\n    // cycles) and prevents the cache of simplified geometries from filling\n    // up with useless identical copies of this geometry (saving memory).\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        }\n        coordinates = /** @type {Array<unknown>} */ (coordinates[0]);\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   * @override\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(\n        this.flatCoordinates,\n        this.flatCoordinates,\n        this.layout.startsWith('XYZ') ? 3 : 2,\n        this.stride,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   * @override\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   * @override\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   * @override\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates,\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\nexport function getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\n}\n\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  }\n  const stride = simpleGeometry.getStride();\n  return transform2D(\n    flatCoordinates,\n    0,\n    flatCoordinates.length,\n    stride,\n    transform,\n    dest,\n  );\n}\n\nexport default SimpleGeometry;\n","/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(\n      (revision, squaredTolerance, transform) => {\n        if (!transform) {\n          return this.getSimplifiedGeometry(squaredTolerance);\n        }\n        const clone = this.clone();\n        clone.applyTransform(transform);\n        return clone.getSimplifiedGeometry(squaredTolerance);\n      },\n    );\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform,\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {this} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0,\n            );\n            const transformed = transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates,\n            );\n            const projTransform = getTransform(sourceProj, destination);\n            if (projTransform) {\n              return projTransform(transformed, transformed, stride);\n            }\n            return transformed;\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest,\n  destinationStride,\n) {\n  dest = dest ? dest : [];\n  destinationStride = destinationStride ? destinationStride : 2;\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n\n    for (let k = 2; k < destinationStride; k++) {\n      dest[i++] = flatCoordinates[j + k];\n    }\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest,\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n","/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(\n  flatCoordinates,\n  offset1,\n  offset2,\n  stride,\n  x,\n  y,\n  closestPoint,\n) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(\n          flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i],\n          t,\n        );\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  max,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  max,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint,\n) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[offset],\n      flatCoordinates[offset + 1],\n    );\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates,\n      index - stride,\n      index,\n      stride,\n      x,\n      y,\n      tmpPoint,\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index +=\n        stride *\n        Math.max(\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n            maxDelta) |\n            0,\n          1,\n        );\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates,\n      end - stride,\n      offset,\n      stride,\n      x,\n      y,\n      tmpPoint,\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint,\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint,\n    );\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint,\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint,\n    );\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n","/**\n * @module ol/geom/flat/deflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(\n  flatCoordinates,\n  offset,\n  coordinates,\n  stride,\n) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatess,\n  stride,\n  ends,\n) {\n  ends = ends ? ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(\n      flatCoordinates,\n      offset,\n      coordinatess[j],\n      stride,\n    );\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatesss,\n  stride,\n  endss,\n) {\n  endss = endss ? endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      coordinatesss[j],\n      stride,\n      endss[i],\n    );\n    if (ends.length === 0) {\n      ends[0] = offset;\n    }\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}\n","/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\nexport function simplifyLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  highQuality,\n  simplifiedFlatCoordinates,\n) {\n  simplifiedFlatCoordinates =\n    simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = radialDistance(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n    );\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = douglasPeucker(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    squaredTolerance,\n    simplifiedFlatCoordinates,\n    0,\n  );\n  return simplifiedFlatCoordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function douglasPeucker(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n) {\n  const n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array<number>} */\n  const markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array<number>} */\n  const stack = [offset, end - stride];\n  let index = 0;\n  while (stack.length > 0) {\n    const last = stack.pop();\n    const first = stack.pop();\n    let maxSquaredDistance = 0;\n    const x1 = flatCoordinates[first];\n    const y1 = flatCoordinates[first + 1];\n    const x2 = flatCoordinates[last];\n    const y2 = flatCoordinates[last + 1];\n    for (let i = first + stride; i < last; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (let i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = douglasPeucker(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds,\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function radialDistance(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2 = x1;\n  let y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\nexport function snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function quantize(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  let x1 = snap(flatCoordinates[offset], tolerance);\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  let x2, y2;\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    // snap the next coordinate (P3)\n    const x3 = snap(flatCoordinates[offset], tolerance);\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    const dx1 = x2 - x1;\n    const dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    const dx2 = x3 - x1;\n    const dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if (\n      dx1 * dy2 == dy1 * dx2 &&\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\n    ) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function quantizeArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds,\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = quantize(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function quantizeMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    /** @type {Array<number>} */\n    const simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds,\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n","/**\n * @module ol/geom/flat/inflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */\nexport function inflateCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  coordinates,\n) {\n  coordinates = coordinates !== undefined ? coordinates : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\n  }\n  coordinates.length = i;\n  return coordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [coordinatess] Coordinatess.\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\n */\nexport function inflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  coordinatess,\n) {\n  coordinatess = coordinatess !== undefined ? coordinatess : [];\n  let i = 0;\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\n    const end = ends[j];\n    coordinatess[i++] = inflateCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      coordinatess[i],\n    );\n    offset = end;\n  }\n  coordinatess.length = i;\n  return coordinatess;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [coordinatesss]\n *     Coordinatesss.\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\n */\nexport function inflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  coordinatesss,\n) {\n  coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n  let i = 0;\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\n    const ends = endss[j];\n    coordinatesss[i++] =\n      ends.length === 1 && ends[0] === offset\n        ? []\n        : inflateCoordinatesArray(\n            flatCoordinates,\n            offset,\n            ends,\n            stride,\n            coordinatesss[i],\n          );\n    offset = ends[ends.length - 1];\n  }\n  coordinatesss.length = i;\n  return coordinatesss;\n}\n","/**\n * @module ol/geom/flat/area\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n  let twiceArea = 0;\n  const x0 = flatCoordinates[end - stride];\n  const y0 = flatCoordinates[end - stride + 1];\n  let dx1 = 0;\n  let dy1 = 0;\n  for (; offset < end; offset += stride) {\n    const dx2 = flatCoordinates[offset] - x0;\n    const dy2 = flatCoordinates[offset + 1] - y0;\n    twiceArea += dy1 * dx2 - dx1 * dy2;\n    dx1 = dx2;\n    dy1 = dy2;\n  }\n  return twiceArea / 2;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n  let area = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    area += linearRing(flatCoordinates, offset, end, stride);\n    offset = end;\n  }\n  return area;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  let area = 0;\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    area += linearRings(flatCoordinates, offset, ends, stride);\n    offset = ends[ends.length - 1];\n  }\n  return area;\n}\n","/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   * @override\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   * @override\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1],\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   * @override\n   */\n  getCoordinates() {\n    return this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @override\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   * @override\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   * @override\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   * @override\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport {ascending} from '../../array.js';\nimport {linearRingsContainsXY} from './contains.js';\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  flatCenters,\n  flatCentersOffset,\n  dest,\n) {\n  let i, ii, x, x1, x2, y1, y2;\n  const y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n  const intersections = [];\n  // Calculate intersections with the horizontal line\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\n    const end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  let pointX = NaN;\n  let maxSegmentLength = -Infinity;\n  intersections.sort(ascending);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    const segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (dest) {\n    dest.push(pointX, y, maxSegmentLength);\n    return dest;\n  }\n  return [pointX, y, maxSegmentLength];\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  flatCenters,\n) {\n  /** @type {Array<number>} */\n  let interiorPoints = [];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      flatCenters,\n      2 * i,\n      interiorPoints,\n    );\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n}\n","/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean|undefined} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right,\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right,\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right,\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      right,\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to construct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  let startOrientation;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    const orientation = linearRingIsClockwise(flatCoordinates, offset, end, 2);\n    if (startOrientation === undefined) {\n      startOrientation = orientation;\n    }\n    if (orientation === startOrientation) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n","/**\n * @module ol/geom/flat/reverse\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n  while (offset < end - stride) {\n    for (let i = 0; i < stride; ++i) {\n      const tmp = flatCoordinates[offset + i];\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n      flatCoordinates[end - stride + i] = tmp;\n    }\n    offset += stride;\n    end -= stride;\n  }\n}\n","/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n","/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport DataTile, {asImageLike} from '../../DataTile.js';\nimport ImageTile from '../../ImageTile.js';\nimport LRUCache from '../../structs/LRUCache.js';\nimport ReprojDataTile from '../../reproj/DataTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n} from '../../transform.js';\nimport {ascending} from '../../array.js';\nimport {\n  containsCoordinate,\n  createEmpty,\n  equals,\n  getIntersection,\n  getTopLeft,\n  intersects,\n} from '../../extent.js';\nimport {createOrUpdate as createTileCoord, getKeyZXY} from '../../tilecoord.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {toSize} from '../../size.js';\n\n/**\n * @param {string} sourceKey The source key.\n * @param {number} z The tile z level.\n * @param {number} x The tile x level.\n * @param {number} y The tile y level.\n * @return {string} The cache key.\n */\nfunction getCacheKey(sourceKey, z, x, y) {\n  return `${sourceKey},${getKeyZXY(z, x, y)}`;\n}\n\n/**\n * @typedef {Object<number, Set<import(\"../../Tile.js\").default>>} TileLookup\n */\n\n/**\n * Add a tile to the lookup.\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @param {number} z The zoom level.\n * @return {boolean} The tile was added to the lookup.\n */\nfunction addTileToLookup(tilesByZ, tile, z) {\n  if (!(z in tilesByZ)) {\n    tilesByZ[z] = new Set([tile]);\n    return true;\n  }\n  const set = tilesByZ[z];\n  const existing = set.has(tile);\n  if (!existing) {\n    set.add(tile);\n  }\n  return !existing;\n}\n\n/**\n * Remove a tile from the lookup.\n * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n * @param {import(\"../../Tile.js\").default} tile A tile.\n * @param {number} z The zoom level.\n * @return {boolean} The tile was removed from the lookup.\n */\nfunction removeTileFromLookup(tilesByZ, tile, z) {\n  const set = tilesByZ[z];\n  if (set) {\n    return set.delete(tile);\n  }\n  return false;\n}\n\n/**\n * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\nfunction getRenderExtent(frameState, extent) {\n  const layerState = frameState.layerStatesArray[frameState.layerIndex];\n  if (layerState.extent) {\n    extent = getIntersection(\n      extent,\n      fromUserExtent(layerState.extent, frameState.viewState.projection),\n    );\n  }\n  const source = /** @type {import(\"../../source/Tile.js\").default} */ (\n    layerState.layer.getRenderSource()\n  );\n  if (!source.getWrapX()) {\n    const gridExtent = source\n      .getTileGridForProjection(frameState.viewState.projection)\n      .getExtent();\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n  return extent;\n}\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize=512] The cache size.\n */\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} [options] Options.\n   */\n  constructor(tileLayer, options) {\n    super(tileLayer);\n\n    options = options || {};\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */\n    this.renderComplete = false;\n\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default|null}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedSourceKey_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedSourceRevision_;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tempExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n    this.tempTileCoord_ = createTileCoord(0, 0, 0);\n\n    const cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<import(\"../../Tile.js\").default>}\n     * @private\n     */\n    this.tileCache_ = new LRUCache(cacheSize);\n\n    this.maxStaleKeys = cacheSize * 0.5;\n  }\n\n  /**\n   * @return {LRUCache} Tile cache.\n   */\n  getTileCache() {\n    return this.tileCache_;\n  }\n\n  /**\n   * Get a tile from the cache or create one if needed.\n   *\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\n   * @protected\n   */\n  getOrCreateTile(z, x, y, frameState) {\n    const tileCache = this.tileCache_;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const cacheKey = getCacheKey(tileSource.getKey(), z, x, y);\n\n    /** @type {import(\"../../Tile.js\").default} */\n    let tile;\n\n    if (tileCache.containsKey(cacheKey)) {\n      tile = tileCache.get(cacheKey);\n    } else {\n      tile = tileSource.getTile(\n        z,\n        x,\n        y,\n        frameState.pixelRatio,\n        frameState.viewState.projection,\n      );\n      if (!tile) {\n        return null;\n      }\n      tileCache.set(cacheKey, tile);\n    }\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import(\"../../Tile.js\").default|null} Tile (or null if outside source extent).\n   * @protected\n   */\n  getTile(z, x, y, frameState) {\n    const tile = this.getOrCreateTile(z, x, y, frameState);\n    if (!tile) {\n      return null;\n    }\n    return tile;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   * @override\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice(),\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const viewState = frameState.viewState;\n    const source = layer.getRenderSource();\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = this.getTile(z, tileCoord[1], tileCoord[2], frameState);\n      if (!tile || tile.getState() !== TileState.LOADED) {\n        continue;\n      }\n\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      /**\n       * @type {import('../../DataTile.js').ImageLike}\n       */\n      let image;\n      if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n        image = tile.getImage();\n      } else if (tile instanceof DataTile) {\n        image = asImageLike(tile.getData());\n        if (!image) {\n          continue;\n        }\n      } else {\n        continue;\n      }\n\n      const col = Math.floor(\n        tilePixelRatio *\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\n            tileCoord[1] * tileSize[0]),\n      );\n\n      const row = Math.floor(\n        tilePixelRatio *\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\n            tileCoord[2] * tileSize[1]),\n      );\n\n      const gutter = Math.round(\n        tilePixelRatio * source.getGutterForProjection(viewState.projection),\n      );\n\n      return this.getImageData(image, col + gutter, row + gutter);\n    }\n\n    return null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    if (!this.renderedProjection) {\n      this.renderedProjection = frameState.viewState.projection;\n    } else if (frameState.viewState.projection !== this.renderedProjection) {\n      this.tileCache_.clear();\n      this.renderedProjection = frameState.viewState.projection;\n    }\n\n    const source = this.getLayer().getSource();\n    if (!source) {\n      return false;\n    }\n    const sourceRevision = source.getRevision();\n    if (!this.renderedRevision_) {\n      this.renderedRevision_ = sourceRevision;\n    } else if (this.renderedRevision_ !== sourceRevision) {\n      this.renderedRevision_ = sourceRevision;\n      if (this.renderedSourceKey_ === source.getKey()) {\n        this.tileCache_.clear();\n      }\n    }\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n   * @param {number} preload Number of additional levels to load.\n   */\n  enqueueTiles(frameState, extent, initialZ, tilesByZ, preload) {\n    const viewState = frameState.viewState;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getRenderSource();\n    const tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n\n    const map = tileLayer.getMapInternal();\n    const minZ = Math.max(\n      initialZ - preload,\n      tileGrid.getMinZoom(),\n      tileGrid.getZForResolution(\n        Math.min(\n          tileLayer.getMaxResolution(),\n          map\n            ? map\n                .getView()\n                .getResolutionForZoom(Math.max(tileLayer.getMinZoom(), 0))\n            : tileGrid.getResolution(0),\n        ),\n        tileSource.zDirection,\n      ),\n    );\n    for (let z = initialZ; z >= minZ; --z) {\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        extent,\n        z,\n        this.tempTileRange_,\n      );\n\n      const tileResolution = tileGrid.getResolution(z);\n\n      for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          const tile = this.getTile(z, x, y, frameState);\n          if (!tile) {\n            continue;\n          }\n          const added = addTileToLookup(tilesByZ, tile, z);\n          if (!added) {\n            continue;\n          }\n\n          const tileQueueKey = tile.getKey();\n          wantedTiles[tileQueueKey] = true;\n\n          if (tile.getState() === TileState.IDLE) {\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n              const tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n              frameState.tileQueue.enqueue([\n                tile,\n                tileSourceKey,\n                tileGrid.getTileCoordCenter(tileCoord),\n                tileResolution,\n              ]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n  findStaleTile_(tileCoord, tilesByZ) {\n    const tileCache = this.tileCache_;\n    const z = tileCoord[0];\n    const x = tileCoord[1];\n    const y = tileCoord[2];\n    const staleKeys = this.getStaleKeys();\n    for (let i = 0; i < staleKeys.length; ++i) {\n      const cacheKey = getCacheKey(staleKeys[i], z, x, y);\n      if (tileCache.containsKey(cacheKey)) {\n        const tile = tileCache.get(cacheKey);\n        if (tile.getState() === TileState.LOADED) {\n          tile.endTransition(getUid(this));\n          addTileToLookup(tilesByZ, tile, z);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {TileLookup} tilesByZ Lookup of tiles by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n  findAltTiles_(tileGrid, tileCoord, altZ, tilesByZ) {\n    const tileRange = tileGrid.getTileRangeForTileCoordAndZ(\n      tileCoord,\n      altZ,\n      this.tempTileRange_,\n    );\n\n    if (!tileRange) {\n      return false;\n    }\n\n    let covered = true;\n    const tileCache = this.tileCache_;\n    const source = this.getLayer().getRenderSource();\n    const sourceKey = source.getKey();\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        const cacheKey = getCacheKey(sourceKey, altZ, x, y);\n        let loaded = false;\n        if (tileCache.containsKey(cacheKey)) {\n          const tile = tileCache.get(cacheKey);\n          if (tile.getState() === TileState.LOADED) {\n            addTileToLookup(tilesByZ, tile, altZ);\n            loaded = true;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * Render the layer.\n   *\n   * The frame rendering logic has three parts:\n   *\n   *  1. Enqueue tiles\n   *  2. Find alt tiles for those that are not yet loaded\n   *  3. Render loaded tiles\n   *\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    let allTilesIdle = true;\n    this.renderComplete = true;\n\n    /**\n     * TODO:\n     *  * maybe skip transition when not fully opaque\n     *  * decide if this.renderComplete is useful\n     */\n\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const pixelRatio = frameState.pixelRatio;\n\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n\n    const sourceKey = tileSource.getKey();\n    if (!this.renderedSourceKey_) {\n      this.renderedSourceKey_ = sourceKey;\n    } else if (this.renderedSourceKey_ !== sourceKey) {\n      this.prependStaleKey(this.renderedSourceKey_);\n      this.renderedSourceKey_ = sourceKey;\n    }\n\n    let frameExtent = frameState.extent;\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n\n    this.prepareContainer(frameState, target);\n\n    // desired dimensions of the canvas in pixels\n    const width = this.context.canvas.width;\n    const height = this.context.canvas.height;\n\n    const layerExtent =\n      layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      frameExtent = getIntersection(\n        frameExtent,\n        fromUserExtent(layerState.extent, projection),\n      );\n    }\n\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\n    const canvasExtent = [\n      viewCenter[0] - dx,\n      viewCenter[1] - dy,\n      viewCenter[0] + dx,\n      viewCenter[1] + dy,\n    ];\n\n    /**\n     * @type {TileLookup}\n     */\n    const tilesByZ = {};\n\n    this.renderedTiles.length = 0;\n\n    /**\n     * Part 1: Enqueue tiles\n     */\n\n    const preload = tileLayer.getPreload();\n    if (frameState.nextExtent) {\n      const targetZ = tileGrid.getZForResolution(\n        viewState.nextResolution,\n        tileSource.zDirection,\n      );\n      const nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(frameState, nextExtent, targetZ, tilesByZ, preload);\n    }\n\n    const renderExtent = getRenderExtent(frameState, frameExtent);\n    this.enqueueTiles(frameState, renderExtent, z, tilesByZ, 0);\n    if (preload > 0) {\n      setTimeout(() => {\n        this.enqueueTiles(\n          frameState,\n          renderExtent,\n          z - 1,\n          tilesByZ,\n          preload - 1,\n        );\n      }, 0);\n    }\n\n    if (!(z in tilesByZ)) {\n      return this.container;\n    }\n\n    /**\n     * Part 2: Find alt tiles for those that are not yet loaded\n     */\n\n    const uid = getUid(this);\n    const time = frameState.time;\n\n    // look for cached tiles to use if a target tile is not ready\n    for (const tile of tilesByZ[z]) {\n      const tileState = tile.getState();\n      if (\n        (tile instanceof ReprojTile || tile instanceof ReprojDataTile) &&\n        tileState === TileState.EMPTY\n      ) {\n        continue;\n      }\n      const tileCoord = tile.tileCoord;\n\n      if (tileState === TileState.LOADED) {\n        const alpha = tile.getAlpha(uid, time);\n        if (alpha === 1) {\n          // no need to look for alt tiles\n          tile.endTransition(uid);\n          continue;\n        }\n      }\n      if (tileState !== TileState.IDLE) {\n        allTilesIdle = false;\n      }\n      if (tileState !== TileState.ERROR) {\n        this.renderComplete = false;\n      }\n\n      const hasStaleTile = this.findStaleTile_(tileCoord, tilesByZ);\n      if (hasStaleTile) {\n        // use the stale tile before the new tile's transition has completed\n        removeTileFromLookup(tilesByZ, tile, z);\n        frameState.animate = true;\n        continue;\n      }\n\n      // first look for child tiles (at z + 1)\n      const coveredByChildren = this.findAltTiles_(\n        tileGrid,\n        tileCoord,\n        z + 1,\n        tilesByZ,\n      );\n\n      if (coveredByChildren) {\n        continue;\n      }\n\n      // next look for parent tiles\n      const minZoom = tileGrid.getMinZoom();\n      for (let parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n        const coveredByParent = this.findAltTiles_(\n          tileGrid,\n          tileCoord,\n          parentZ,\n          tilesByZ,\n        );\n\n        if (coveredByParent) {\n          break;\n        }\n      }\n    }\n\n    /**\n     * Part 3: Render loaded tiles\n     */\n\n    const canvasScale =\n      ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\n\n    const context = this.getRenderContext(frameState);\n\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      canvasScale,\n      canvasScale,\n      0,\n      -width / 2,\n      -height / 2,\n    );\n\n    if (layerState.extent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n\n    if (!tileSource.getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(tilesByZ).map(Number);\n    zs.sort(ascending);\n\n    let currentClip;\n    const clips = [];\n    const clipZs = [];\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(\n        currentZ,\n        pixelRatio,\n        projection,\n      );\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\n        getTopLeft(canvasExtent),\n        currentZ,\n      );\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = applyTransform(this.tempTransform, [\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n          tileResolution,\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n          tileResolution,\n      ]);\n      const tileGutter =\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\n      for (const tile of tilesByZ[currentZ]) {\n        if (tile.getState() !== TileState.LOADED) {\n          continue;\n        }\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = zs.length === 1;\n\n        let contextSaved = false;\n\n        // Clip mask for regions in this tile that already filled by a higher z tile\n        currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n        for (let i = 0, ii = clips.length; i < ii; ++i) {\n          if (!transition && currentZ < clipZs[i]) {\n            const clip = clips[i];\n            if (\n              intersects(\n                [x, y, x + w, y + h],\n                [clip[0], clip[3], clip[4], clip[7]],\n              )\n            ) {\n              if (!contextSaved) {\n                context.save();\n                contextSaved = true;\n              }\n              context.beginPath();\n              // counter-clockwise (outer ring) for current tile\n              context.moveTo(currentClip[0], currentClip[1]);\n              context.lineTo(currentClip[2], currentClip[3]);\n              context.lineTo(currentClip[4], currentClip[5]);\n              context.lineTo(currentClip[6], currentClip[7]);\n              // clockwise (inner ring) for higher z tile\n              context.moveTo(clip[6], clip[7]);\n              context.lineTo(clip[4], clip[5]);\n              context.lineTo(clip[2], clip[3]);\n              context.lineTo(clip[0], clip[1]);\n              context.clip();\n            }\n          }\n        }\n        clips.push(currentClip);\n        clipZs.push(currentZ);\n\n        this.drawTile(tile, frameState, x, y, w, h, tileGutter, transition);\n        if (contextSaved) {\n          context.restore();\n        }\n        this.renderedTiles.unshift(tile);\n\n        // TODO: decide if this is necessary\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged =\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n\n    this.postRender(this.context, frameState);\n\n    if (layerState.extent) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (this.renderComplete) {\n      /**\n       * @param {import(\"../../Map.js\").default} map Map.\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = (map, frameState) => {\n        const tileSourceKey = getUid(tileSource);\n        const wantedTiles = frameState.wantedTiles[tileSourceKey];\n        const tilesCount = wantedTiles ? Object.keys(wantedTiles).length : 0;\n        this.updateCacheSize(tilesCount);\n        this.tileCache_.expireCache();\n      };\n\n      frameState.postRenderFunctions.push(postRenderFunction);\n    }\n    if (!this.renderComplete && !allTilesIdle) {\n      frameState.animate = true;\n    }\n\n    return this.container;\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   */\n  updateCacheSize(tileCount) {\n    this.tileCache_.highWaterMark = Math.max(\n      this.tileCache_.highWaterMark,\n      tileCount * 2,\n    );\n  }\n\n  /**\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   * @protected\n   */\n  drawTile(tile, frameState, x, y, w, h, gutter, transition) {\n    let image;\n    if (tile instanceof DataTile) {\n      image = asImageLike(tile.getData());\n      if (!image) {\n        throw new Error('Rendering array data is not yet supported');\n      }\n    } else {\n      image = this.getTileImage(\n        /** @type {import(\"../../ImageTile.js\").default} */ (tile),\n      );\n    }\n    if (!image) {\n      return;\n    }\n    const context = this.getRenderContext(frameState);\n    const uid = getUid(this);\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const alpha =\n      layerState.opacity *\n      (transition ? tile.getAlpha(uid, frameState.time) : 1);\n    const alphaChanged = alpha !== context.globalAlpha;\n    if (alphaChanged) {\n      context.save();\n      context.globalAlpha = alpha;\n    }\n    context.drawImage(\n      image,\n      gutter,\n      gutter,\n      image.width - 2 * gutter,\n      image.height - 2 * gutter,\n      x,\n      y,\n      w,\n      h,\n    );\n\n    if (alphaChanged) {\n      context.restore();\n    }\n    if (alpha !== layerState.opacity) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n}\n\nexport default CanvasTileLayerRenderer;\n","/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ZIndexContext from '../../render/canvas/ZIndexContext.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getHeight,\n  getTopLeft,\n  getTopRight,\n  getWidth,\n} from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @private\n     * @type {ZIndexContext}\n     */\n    this.deferredContext_ = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor),\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    } else if (this.container) {\n      this.container.style.backgroundColor = null;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @protected\n   */\n  prepareContainer(frameState, target) {\n    const extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2,\n    );\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n\n    if (!this.containerReused) {\n      const canvas = this.context.canvas;\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n      } else {\n        this.context.clearRect(0, 0, width, height);\n      }\n      if (canvasTransform !== canvas.style.transform) {\n        canvas.style.transform = canvasTransform;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context,\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    if (frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    if (frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferredInternal(frameState) {}\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {import('../../render/canvas/ZIndexContext.js').ZIndexContextProxy} Context.\n   */\n  getRenderContext(frameState) {\n    if (frameState.declutter && !this.deferredContext_) {\n      this.deferredContext_ = new ZIndexContext();\n    }\n    return frameState.declutter\n      ? this.deferredContext_.getContext()\n      : this.context;\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  renderDeferred(frameState) {\n    if (!frameState.declutter) {\n      return;\n    }\n    this.dispatchRenderEvent_(\n      RenderEventType.PRERENDER,\n      this.context,\n      frameState,\n    );\n    if (frameState.declutter && this.deferredContext_) {\n      this.deferredContext_.draw(this.context);\n      this.deferredContext_.clear();\n    }\n    this.renderDeferredInternal(frameState);\n    this.dispatchRenderEvent_(\n      RenderEventType.POSTRENDER,\n      this.context,\n      frameState,\n    );\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX,\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2,\n    );\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n","/**\n * @module ol/renderer/Layer\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport Observable from '../Observable.js';\nimport {abstract} from '../util.js';\n\nconst maxStaleKeys = 5;\n\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */\nclass LayerRenderer extends Observable {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super();\n\n    /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */\n    this.ready = true;\n\n    /** @private */\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {LayerType}\n     */\n    this.layer_ = layer;\n\n    /**\n     * @type {Array<string>}\n     * @private\n     */\n    this.staleKeys_ = new Array();\n\n    /**\n     * @type {number}\n     * @protected\n     */\n    this.maxStaleKeys = maxStaleKeys;\n  }\n\n  /**\n   * @return {Array<string>} Get the list of stale keys.\n   */\n  getStaleKeys() {\n    return this.staleKeys_;\n  }\n\n  /**\n   * @param {string} key The new stale key.\n   */\n  prependStaleKey(key) {\n    this.staleKeys_.unshift(key);\n    if (this.staleKeys_.length > this.maxStaleKeys) {\n      this.staleKeys_.length = this.maxStaleKeys;\n    }\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    return null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return abstract();\n  }\n\n  /**\n   * Render the layer.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    return undefined;\n  }\n\n  /**\n   * @return {LayerType} Layer.\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */\n  handleFontsChanged() {}\n\n  /**\n   * Handle changes in image state.\n   * @param {import(\"../events/Event.js\").default} event Image change event.\n   * @private\n   */\n  handleImageChange_(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    if (\n      image.getState() === ImageState.LOADED ||\n      image.getState() === ImageState.ERROR\n    ) {\n      this.renderIfReadyAndVisible();\n    }\n  }\n\n  /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import(\"../Image.js\").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */\n  loadImage(image) {\n    let imageState = image.getState();\n    if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\n      image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\n    }\n    if (imageState == ImageState.IDLE) {\n      image.load();\n      imageState = image.getState();\n    }\n    return imageState == ImageState.LOADED;\n  }\n\n  /**\n   * @protected\n   */\n  renderIfReadyAndVisible() {\n    const layer = this.getLayer();\n    if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {\n      layer.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeferred(frameState) {}\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    delete this.layer_;\n    super.disposeInternal();\n  }\n}\n\nexport default LayerRenderer;\n","/**\n * @module ol/render/Event\n */\n\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */\n  constructor(type, inversePixelTransform, frameState, context) {\n    super(type);\n\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n    this.inversePixelTransform = inversePixelTransform;\n\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */\n    this.frameState = frameState;\n\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n    this.context = context;\n  }\n}\n\nexport default RenderEvent;\n","/**\n * @module ol/render/canvas/ZIndexContext\n */\n\nimport {getSharedCanvasContext2D} from '../../dom.js';\n\n/** @typedef {CanvasRenderingContext2D & {globalAlpha: any}} ZIndexContextProxy */\n\n/**\n * @extends {CanvasRenderingContext2D}\n */\nclass ZIndexContext {\n  constructor() {\n    /**\n     * @private\n     * @type {Array<Array<*>>}\n     */\n    this.instructions_ = [];\n    /**\n     * @type {number}\n     */\n    this.zIndex = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offset_ = 0;\n\n    /**\n     * @private\n     * @type {ZIndexContextProxy}\n     */\n    this.context_ = /** @type {ZIndexContextProxy} */ (\n      new Proxy(getSharedCanvasContext2D(), {\n        get: (target, property) => {\n          if (\n            typeof (/** @type {*} */ (getSharedCanvasContext2D())[property]) !==\n            'function'\n          ) {\n            // we only accept calling functions on the proxy, not accessing properties\n            return undefined;\n          }\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property);\n          return this.pushMethodArgs_;\n        },\n        set: (target, property, value) => {\n          if (!this.instructions_[this.zIndex + this.offset_]) {\n            this.instructions_[this.zIndex + this.offset_] = [];\n          }\n          this.instructions_[this.zIndex + this.offset_].push(property, value);\n          return true;\n        },\n      })\n    );\n  }\n\n  /**\n   * @private\n   * @param {...*} args Args.\n   * @return {ZIndexContext} This.\n   */\n  pushMethodArgs_ = (...args) => {\n    this.instructions_[this.zIndex + this.offset_].push(args);\n    return this;\n  };\n\n  /**\n   * Push a function that renders to the context directly.\n   * @param {function(CanvasRenderingContext2D): void} render Function.\n   */\n  pushFunction(render) {\n    this.instructions_[this.zIndex + this.offset_].push(render);\n  }\n\n  /**\n   * Get a proxy for CanvasRenderingContext2D which does not support getting state\n   * (e.g. `context.globalAlpha`, which will return `undefined`). To set state, if it relies on a\n   * previous state (e.g. `context.globalAlpha = context.globalAlpha / 2`), set a function,\n   * e.g. `context.globalAlpha = (context) => context.globalAlpha / 2`.\n   * @return {ZIndexContextProxy} Context.\n   */\n  getContext() {\n    return this.context_;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  draw(context) {\n    this.instructions_.forEach((instructionsAtIndex) => {\n      for (let i = 0, ii = instructionsAtIndex.length; i < ii; ++i) {\n        const property = instructionsAtIndex[i];\n        if (typeof property === 'function') {\n          property(context);\n          continue;\n        }\n        const instructionAtIndex = instructionsAtIndex[++i];\n        if (typeof (/** @type {*} */ (context)[property]) === 'function') {\n          /** @type {*} */ (context)[property](...instructionAtIndex);\n        } else {\n          if (typeof instructionAtIndex === 'function') {\n            /** @type {*} */ (context)[property] = instructionAtIndex(context);\n            continue;\n          }\n          /** @type {*} */ (context)[property] = instructionAtIndex;\n        }\n      }\n    });\n  }\n\n  clear() {\n    this.instructions_.length = 0;\n    this.zIndex = 0;\n    this.offset_ = 0;\n  }\n\n  /**\n   * Offsets the zIndex by the highest current zIndex. Useful for rendering multiple worlds or tiles, to\n   * avoid conflicting context.clip() or context.save()/restore() calls.\n   */\n  offset() {\n    this.offset_ = this.instructions_.length;\n    this.zIndex = 0;\n  }\n}\n\nexport default ZIndexContext;\n","/**\n * @module ol/color\n */\nimport lchuv from 'color-space/lchuv.js';\nimport parseRgba from 'color-rgba';\nimport rgb from 'color-space/rgb.js';\nimport xyz from 'color-space/xyz.js';\nimport {clamp} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * Color to indicate that no color should be rendered. This is meant to be used for per-reference\n * comparisons only.\n * @type {Color}\n */\nexport const NO_COLOR = [NaN, NaN, NaN, 0];\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  }\n  return toString(color);\n}\n\n/**\n * @type {number}\n */\nconst MAX_CACHE_SIZE = 1024;\n\n/**\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\n * we delete an arbitrary set of the entries.\n *\n * @type {Object<string, Color>}\n */\nconst cache = {};\n\n/**\n * @type {number}\n */\nlet cacheSize = 0;\n\n/**\n * @param {Color} color A color that may or may not have an alpha channel.\n * @return {Color} The input color with an alpha channel.  If the input color has\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\n * array will be returned with the input color and an alpha channel of 1.\n */\nexport function withAlpha(color) {\n  if (color.length === 4) {\n    return color;\n  }\n  const output = color.slice();\n  output[3] = 1;\n  return output;\n}\n\n/**\n * @param {Color} color RGBA color.\n * @return {Color} LCHuv color with alpha.\n */\nexport function rgbaToLcha(color) {\n  const output = xyz.lchuv(rgb.xyz(color));\n  output[3] = color[3];\n  return output;\n}\n\n/**\n * @param {Color} color LCHuv color with alpha.\n * @return {Color} RGBA color.\n */\nexport function lchaToRgba(color) {\n  const output = xyz.rgb(lchuv.xyz(color));\n  output[3] = color[3];\n  return output;\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport function fromString(s) {\n  if (s === 'none') {\n    return NO_COLOR;\n  }\n  if (cache.hasOwnProperty(s)) {\n    return cache[s];\n  }\n  if (cacheSize >= MAX_CACHE_SIZE) {\n    let i = 0;\n    for (const key in cache) {\n      if ((i++ & 3) === 0) {\n        delete cache[key];\n        --cacheSize;\n      }\n    }\n  }\n\n  const color = parseRgba(s);\n  if (color.length !== 4) {\n    throw new Error('failed to parse \"' + s + '\" as color');\n  }\n  for (const c of color) {\n    if (isNaN(c)) {\n      throw new Error('failed to parse \"' + s + '\" as color');\n    }\n  }\n  normalize(color);\n  cache[s] = color;\n  ++cacheSize;\n  return color;\n}\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  }\n  return fromString(color);\n}\n\n/**\n * Exported for the tests.\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  try {\n    fromString(s);\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n","/**\n * Cylindrical CIE LUV\n *\n * @module color-space/lchuv\n */\nimport luv from './luv.js';\nimport xyz from './xyz.js';\n\n//cylindrical luv\nvar lchuv = {\n\tname: 'lchuv',\n\tchannel: ['lightness', 'chroma', 'hue'],\n\talias: ['LCHuv', 'cielchuv'],\n\tmin: [0,0,0],\n\tmax: [100,100,360],\n\n\tluv: function(luv){\n\t\tvar l = luv[0],\n\t\tc = luv[1],\n\t\th = luv[2],\n\t\tu, v, hr;\n\n\t\thr = h / 360 * 2 * Math.PI;\n\t\tu = c * Math.cos(hr);\n\t\tv = c * Math.sin(hr);\n\t\treturn [l, u, v];\n\t},\n\n\txyz: function(arg) {\n\t\treturn luv.xyz(lchuv.luv(arg));\n\t}\n};\n\nexport default lchuv;\n\nluv.lchuv = function(luv){\n\tvar l = luv[0], u = luv[1], v = luv[2];\n\n\tvar c = Math.sqrt(u*u + v*v);\n\tvar hr = Math.atan2(v,u);\n\tvar h = hr * 360 / 2 / Math.PI;\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\treturn [l,c,h]\n};\n\nxyz.lchuv = function(arg){\n  return luv.lchuv(xyz.luv(arg));\n};\n","/**\n * CIE LUV (C'est la vie)\n *\n * @module color-space/luv\n */\n import xyz from './xyz.js';\n\nexport default {\n\tname: 'luv',\n\t//NOTE: luv has no rigidly defined limits\n\t//easyrgb fails to get proper coords\n\t//boronine states no rigid limits\n\t//colorMine refers this ones:\n\tmin: [0,-134,-140],\n\tmax: [100,224,122],\n\tchannel: ['lightness', 'u', 'v'],\n\talias: ['LUV', 'cieluv', 'cie1976'],\n\n\txyz: function(arg, i, o){\n\t\tvar _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\n\t\tl = arg[0], u = arg[1], v = arg[2];\n\n\t\tif (l === 0) return [0,0,0];\n\n\t\t//get constants\n\t\t//var e = 0.008856451679035631; //(6/29)^3\n\t\tvar k = 0.0011070564598794539; //(3/29)^3\n\n\t\t//get illuminant/observer\n\t\ti = i || 'D65';\n\t\to = o || 2;\n\n\t\txn = xyz.whitepoint[o][i][0];\n\t\tyn = xyz.whitepoint[o][i][1];\n\t\tzn = xyz.whitepoint[o][i][2];\n\n\t\tun = (4 * xn) / (xn + (15 * yn) + (3 * zn));\n\t\tvn = (9 * yn) / (xn + (15 * yn) + (3 * zn));\n\t\t// un = 0.19783000664283;\n\t\t// vn = 0.46831999493879;\n\n\n\t\t_u = u / (13 * l) + un || 0;\n\t\t_v = v / (13 * l) + vn || 0;\n\n\t\ty = l > 8 ? yn * Math.pow( (l + 16) / 116 , 3) : yn * l * k;\n\n\t\t//wikipedia method\n\t\tx = y * 9 * _u / (4 * _v) || 0;\n\t\tz = y * (12 - 3 * _u - 20 * _v) / (4 * _v) || 0;\n\n\t\t//boronine method\n\t\t//https://github.com/boronine/husl/blob/master/husl.coffee#L201\n\t\t// x = 0 - (9 * y * _u) / ((_u - 4) * _v - _u * _v);\n\t\t// z = (9 * y - (15 * _v * y) - (_v * x)) / (3 * _v);\n\n\t\treturn [x, y, z];\n\t}\n};\n\n// http://www.brucelindbloom.com/index.html?Equations.html\n// https://github.com/boronine/husl/blob/master/husl.coffee\n//i - illuminant\n//o - observer\nxyz.luv = function(arg, i, o) {\n\tvar _u, _v, l, u, v, x, y, z, xn, yn, zn, un, vn;\n\n\t//get constants\n\tvar e = 0.008856451679035631; //(6/29)^3\n\tvar k = 903.2962962962961; //(29/3)^3\n\n\t//get illuminant/observer coords\n\ti = i || 'D65';\n\to = o || 2;\n\n\txn = xyz.whitepoint[o][i][0];\n\tyn = xyz.whitepoint[o][i][1];\n\tzn = xyz.whitepoint[o][i][2];\n\n\tun = (4 * xn) / (xn + (15 * yn) + (3 * zn));\n\tvn = (9 * yn) / (xn + (15 * yn) + (3 * zn));\n\n\n\tx = arg[0], y = arg[1], z = arg[2];\n\n\n\t_u = (4 * x) / (x + (15 * y) + (3 * z)) || 0;\n\t_v = (9 * y) / (x + (15 * y) + (3 * z)) || 0;\n\n\tvar yr = y/yn;\n\n\tl = yr <= e ? k * yr : 116 * Math.pow(yr, 1/3) - 16;\n\n\tu = 13 * l * (_u - un);\n\tv = 13 * l * (_v - vn);\n\n\treturn [l, u, v];\n};\n","/**\n * CIE XYZ\n *\n * @module  color-space/xyz\n */\nimport rgb from './rgb.js';\n\nvar xyz = {\n\tname: 'xyz',\n\tmin: [0,0,0],\n\tchannel: ['X','Y','Z'],\n\talias: ['XYZ', 'ciexyz', 'cie1931']\n};\n\n\n/**\n * Whitepoint reference values with observer/illuminant\n *\n * http://en.wikipedia.org/wiki/Standard_illuminant\n */\nxyz.whitepoint = {\n\t//1931 2°\n\t2: {\n\t\t//incadescent\n\t\tA:[109.85, 100, 35.585],\n\t\t// B:[],\n\t\tC: [98.074, 100, 118.232],\n\t\tD50: [96.422, 100, 82.521],\n\t\tD55: [95.682, 100, 92.149],\n\t\t//daylight\n\t\tD65: [95.045592705167, 100, 108.9057750759878],\n\t\tD75: [94.972, 100, 122.638],\n\t\t//flourescent\n\t\t// F1: [],\n\t\tF2: [99.187, 100, 67.395],\n\t\t// F3: [],\n\t\t// F4: [],\n\t\t// F5: [],\n\t\t// F6:[],\n\t\tF7: [95.044, 100, 108.755],\n\t\t// F8: [],\n\t\t// F9: [],\n\t\t// F10: [],\n\t\tF11: [100.966, 100, 64.370],\n\t\t// F12: [],\n\t\tE: [100,100,100]\n\t},\n\n\t//1964  10°\n\t10: {\n\t\t//incadescent\n\t\tA:[111.144, 100, 35.200],\n\t\tC: [97.285, 100, 116.145],\n\t\tD50: [96.720, 100, 81.427],\n\t\tD55: [95.799, 100, 90.926],\n\t\t//daylight\n\t\tD65: [94.811, 100, 107.304],\n\t\tD75: [94.416, 100, 120.641],\n\t\t//flourescent\n\t\tF2: [103.280, 100, 69.026],\n\t\tF7: [95.792, 100, 107.687],\n\t\tF11: [103.866, 100, 65.627],\n\t\tE: [100,100,100]\n\t}\n};\n\n\n/**\n * Top values are the whitepoint’s top values, default are D65\n */\nxyz.max = xyz.whitepoint[2].D65;\n\n\n/**\n * Transform xyz to rgb\n *\n * @param {Array} xyz Array of xyz values\n *\n * @return {Array} RGB values\n */\nxyz.rgb = function (_xyz, white) {\n\t//FIXME: make sure we have to divide like this. Probably we have to replace matrix as well then\n\twhite = white || xyz.whitepoint[2].E;\n\n\tvar x = _xyz[0] / white[0],\n\t\ty = _xyz[1] / white[1],\n\t\tz = _xyz[2] / white[2],\n\t\tr, g, b;\n\n\t// assume sRGB\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\tr = (x * 3.240969941904521) + (y * -1.537383177570093) + (z * -0.498610760293);\n\tg = (x * -0.96924363628087) + (y * 1.87596750150772) + (z * 0.041555057407175);\n\tb = (x * 0.055630079696993) + (y * -0.20397695888897) + (z * 1.056971514242878);\n\n\tr = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r = (r * 12.92);\n\n\tg = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g = (g * 12.92);\n\n\tb = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b = (b * 12.92);\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n}\n\n\n\n/**\n * RGB to XYZ\n *\n * @param {Array} rgb RGB channels\n *\n * @return {Array} XYZ channels\n */\nrgb.xyz = function(rgb, white) {\n\tvar r = rgb[0] / 255,\n\t\t\tg = rgb[1] / 255,\n\t\t\tb = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.41239079926595) + (g * 0.35758433938387) + (b * 0.18048078840183);\n\tvar y = (r * 0.21263900587151) + (g * 0.71516867876775) + (b * 0.072192315360733);\n\tvar z = (r * 0.019330818715591) + (g * 0.11919477979462) + (b * 0.95053215224966);\n\n\twhite = white || xyz.whitepoint[2].E;\n\n\treturn [x * white[0], y * white[1], z * white[2]];\n};\n\n\n\nexport default xyz;\n","/**\n * RGB space.\n *\n * @module  color-space/rgb\n */\n\nexport default {\n\tname: 'rgb',\n\tmin: [0,0,0],\n\tmax: [255,255,255],\n\tchannel: ['red', 'green', 'blue'],\n\talias: ['RGB']\n};\n","/** @module  color-rgba */\nimport parse from 'color-parse'\nimport rgb from 'color-space/rgb.js'\nimport hsl from 'color-space/hsl.js'\n\nexport default function rgba(color) {\n\t// template literals\n\tif (Array.isArray(color) && color.raw) color = String.raw(...arguments)\n\tif (color instanceof Number) color = +color\n\n\tvar values, i, l\n\n\t//attempt to parse non-array arguments\n\tvar parsed = parse(color)\n\n\tif (!parsed.space) return []\n\n\tconst min = parsed.space[0] === 'h' ? hsl.min : rgb.min\n\tconst max = parsed.space[0] === 'h' ? hsl.max : rgb.max\n\n\tvalues = Array(3)\n\tvalues[0] = Math.min(Math.max(parsed.values[0], min[0]), max[0])\n\tvalues[1] = Math.min(Math.max(parsed.values[1], min[1]), max[1])\n\tvalues[2] = Math.min(Math.max(parsed.values[2], min[2]), max[2])\n\n\tif (parsed.space[0] === 'h') {\n\t\tvalues = hsl.rgb(values)\n\t}\n\n\tvalues.push(Math.min(Math.max(parsed.alpha, 0), 1))\n\n\treturn values\n}\n","/**\n * @module color-parse\n */\nimport names from 'color-name'\n\nexport default parse\n\n/**\n * Base hues\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\n */\n//FIXME: use external hue detector\nvar baseHues = {\n\tred: 0,\n\torange: 60,\n\tyellow: 120,\n\tgreen: 180,\n\tblue: 240,\n\tpurple: 300\n}\n\n/**\n * Parse color from the string passed\n *\n * @return {Object} A space indicator `space`, an array `values` and `alpha`\n */\nfunction parse(cstr) {\n\tvar m, parts = [], alpha = 1, space\n\n\t//numeric case\n\tif (typeof cstr === 'number') {\n\t\treturn { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\n\t}\n\tif (typeof cstr === 'number') return { space: 'rgb', values: [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff], alpha: 1 }\n\n\tcstr = String(cstr).toLowerCase();\n\n\t//keyword\n\tif (names[cstr]) {\n\t\tparts = names[cstr].slice()\n\t\tspace = 'rgb'\n\t}\n\n\t//reserved words\n\telse if (cstr === 'transparent') {\n\t\talpha = 0\n\t\tspace = 'rgb'\n\t\tparts = [0, 0, 0]\n\t}\n\n\t//hex\n\telse if (cstr[0] === '#') {\n\t\tvar base = cstr.slice(1)\n\t\tvar size = base.length\n\t\tvar isShort = size <= 4\n\t\talpha = 1\n\n\t\tif (isShort) {\n\t\t\tparts = [\n\t\t\t\tparseInt(base[0] + base[0], 16),\n\t\t\t\tparseInt(base[1] + base[1], 16),\n\t\t\t\tparseInt(base[2] + base[2], 16)\n\t\t\t]\n\t\t\tif (size === 4) {\n\t\t\t\talpha = parseInt(base[3] + base[3], 16) / 255\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tparts = [\n\t\t\t\tparseInt(base[0] + base[1], 16),\n\t\t\t\tparseInt(base[2] + base[3], 16),\n\t\t\t\tparseInt(base[4] + base[5], 16)\n\t\t\t]\n\t\t\tif (size === 8) {\n\t\t\t\talpha = parseInt(base[6] + base[7], 16) / 255\n\t\t\t}\n\t\t}\n\n\t\tif (!parts[0]) parts[0] = 0\n\t\tif (!parts[1]) parts[1] = 0\n\t\tif (!parts[2]) parts[2] = 0\n\n\t\tspace = 'rgb'\n\t}\n\n\t// color space\n\telse if (m = /^((?:rgba?|hs[lvb]a?|hwba?|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms|oklch|oklab|color))\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n\t\tvar name = m[1]\n\t\tspace = name.replace(/a$/, '')\n\t\tvar dims = space === 'cmyk' ? 4 : space === 'gray' ? 1 : 3\n\t\tparts = m[2].trim().split(/\\s*[,\\/]\\s*|\\s+/)\n\n\t\t// color(srgb-linear x x x) -> srgb-linear(x x x)\n\t\tif (space === 'color') space = parts.shift()\n\n\t\tparts = parts.map(function (x, i) {\n\t\t\t//<percentage>\n\t\t\tif (x[x.length - 1] === '%') {\n\t\t\t\tx = parseFloat(x) / 100\n\t\t\t\t// alpha -> 0..1\n\t\t\t\tif (i === 3) return x\n\t\t\t\t// rgb -> 0..255\n\t\t\t\tif (space === 'rgb') return x * 255\n\t\t\t\t// hsl, hwb H -> 0..100\n\t\t\t\tif (space[0] === 'h') return x * 100\n\t\t\t\t// lch, lab L -> 0..100\n\t\t\t\tif (space[0] === 'l' && !i) return x * 100\n\t\t\t\t// lab A B -> -125..125\n\t\t\t\tif (space === 'lab') return x * 125\n\t\t\t\t// lch C -> 0..150, H -> 0..360\n\t\t\t\tif (space === 'lch') return i < 2 ? x * 150 : x * 360\n\t\t\t\t// oklch/oklab L -> 0..1\n\t\t\t\tif (space[0] === 'o' && !i) return x\n\t\t\t\t// oklab A B -> -0.4..0.4\n\t\t\t\tif (space === 'oklab') return x * 0.4\n\t\t\t\t// oklch C -> 0..0.4, H -> 0..360\n\t\t\t\tif (space === 'oklch') return i < 2 ? x * 0.4 : x * 360\n\t\t\t\t// color(xxx) -> 0..1\n\t\t\t\treturn x\n\t\t\t}\n\n\t\t\t//hue\n\t\t\tif (space[i] === 'h' || (i === 2 && space[space.length - 1] === 'h')) {\n\t\t\t\t//<base-hue>\n\t\t\t\tif (baseHues[x] !== undefined) return baseHues[x]\n\t\t\t\t//<deg>\n\t\t\t\tif (x.endsWith('deg')) return parseFloat(x)\n\t\t\t\t//<turn>\n\t\t\t\tif (x.endsWith('turn')) return parseFloat(x) * 360\n\t\t\t\tif (x.endsWith('grad')) return parseFloat(x) * 360 / 400\n\t\t\t\tif (x.endsWith('rad')) return parseFloat(x) * 180 / Math.PI\n\t\t\t}\n\t\t\tif (x === 'none') return 0\n\t\t\treturn parseFloat(x)\n\t\t});\n\n\t\talpha = parts.length > dims ? parts.pop() : 1\n\t}\n\n\t//named channels case\n\telse if (/[0-9](?:\\s|\\/|,)/.test(cstr)) {\n\t\tparts = cstr.match(/([0-9]+)/g).map(function (value) {\n\t\t\treturn parseFloat(value)\n\t\t})\n\n\t\tspace = cstr.match(/([a-z])/ig)?.join('')?.toLowerCase() || 'rgb'\n\t}\n\n\treturn {\n\t\tspace,\n\t\tvalues: parts,\n\t\talpha\n\t}\n}\n","export default {\n\taliceblue: [240, 248, 255],\n\tantiquewhite: [250, 235, 215],\n\taqua: [0, 255, 255],\n\taquamarine: [127, 255, 212],\n\tazure: [240, 255, 255],\n\tbeige: [245, 245, 220],\n\tbisque: [255, 228, 196],\n\tblack: [0, 0, 0],\n\tblanchedalmond: [255, 235, 205],\n\tblue: [0, 0, 255],\n\tblueviolet: [138, 43, 226],\n\tbrown: [165, 42, 42],\n\tburlywood: [222, 184, 135],\n\tcadetblue: [95, 158, 160],\n\tchartreuse: [127, 255, 0],\n\tchocolate: [210, 105, 30],\n\tcoral: [255, 127, 80],\n\tcornflowerblue: [100, 149, 237],\n\tcornsilk: [255, 248, 220],\n\tcrimson: [220, 20, 60],\n\tcyan: [0, 255, 255],\n\tdarkblue: [0, 0, 139],\n\tdarkcyan: [0, 139, 139],\n\tdarkgoldenrod: [184, 134, 11],\n\tdarkgray: [169, 169, 169],\n\tdarkgreen: [0, 100, 0],\n\tdarkgrey: [169, 169, 169],\n\tdarkkhaki: [189, 183, 107],\n\tdarkmagenta: [139, 0, 139],\n\tdarkolivegreen: [85, 107, 47],\n\tdarkorange: [255, 140, 0],\n\tdarkorchid: [153, 50, 204],\n\tdarkred: [139, 0, 0],\n\tdarksalmon: [233, 150, 122],\n\tdarkseagreen: [143, 188, 143],\n\tdarkslateblue: [72, 61, 139],\n\tdarkslategray: [47, 79, 79],\n\tdarkslategrey: [47, 79, 79],\n\tdarkturquoise: [0, 206, 209],\n\tdarkviolet: [148, 0, 211],\n\tdeeppink: [255, 20, 147],\n\tdeepskyblue: [0, 191, 255],\n\tdimgray: [105, 105, 105],\n\tdimgrey: [105, 105, 105],\n\tdodgerblue: [30, 144, 255],\n\tfirebrick: [178, 34, 34],\n\tfloralwhite: [255, 250, 240],\n\tforestgreen: [34, 139, 34],\n\tfuchsia: [255, 0, 255],\n\tgainsboro: [220, 220, 220],\n\tghostwhite: [248, 248, 255],\n\tgold: [255, 215, 0],\n\tgoldenrod: [218, 165, 32],\n\tgray: [128, 128, 128],\n\tgreen: [0, 128, 0],\n\tgreenyellow: [173, 255, 47],\n\tgrey: [128, 128, 128],\n\thoneydew: [240, 255, 240],\n\thotpink: [255, 105, 180],\n\tindianred: [205, 92, 92],\n\tindigo: [75, 0, 130],\n\tivory: [255, 255, 240],\n\tkhaki: [240, 230, 140],\n\tlavender: [230, 230, 250],\n\tlavenderblush: [255, 240, 245],\n\tlawngreen: [124, 252, 0],\n\tlemonchiffon: [255, 250, 205],\n\tlightblue: [173, 216, 230],\n\tlightcoral: [240, 128, 128],\n\tlightcyan: [224, 255, 255],\n\tlightgoldenrodyellow: [250, 250, 210],\n\tlightgray: [211, 211, 211],\n\tlightgreen: [144, 238, 144],\n\tlightgrey: [211, 211, 211],\n\tlightpink: [255, 182, 193],\n\tlightsalmon: [255, 160, 122],\n\tlightseagreen: [32, 178, 170],\n\tlightskyblue: [135, 206, 250],\n\tlightslategray: [119, 136, 153],\n\tlightslategrey: [119, 136, 153],\n\tlightsteelblue: [176, 196, 222],\n\tlightyellow: [255, 255, 224],\n\tlime: [0, 255, 0],\n\tlimegreen: [50, 205, 50],\n\tlinen: [250, 240, 230],\n\tmagenta: [255, 0, 255],\n\tmaroon: [128, 0, 0],\n\tmediumaquamarine: [102, 205, 170],\n\tmediumblue: [0, 0, 205],\n\tmediumorchid: [186, 85, 211],\n\tmediumpurple: [147, 112, 219],\n\tmediumseagreen: [60, 179, 113],\n\tmediumslateblue: [123, 104, 238],\n\tmediumspringgreen: [0, 250, 154],\n\tmediumturquoise: [72, 209, 204],\n\tmediumvioletred: [199, 21, 133],\n\tmidnightblue: [25, 25, 112],\n\tmintcream: [245, 255, 250],\n\tmistyrose: [255, 228, 225],\n\tmoccasin: [255, 228, 181],\n\tnavajowhite: [255, 222, 173],\n\tnavy: [0, 0, 128],\n\toldlace: [253, 245, 230],\n\tolive: [128, 128, 0],\n\tolivedrab: [107, 142, 35],\n\torange: [255, 165, 0],\n\torangered: [255, 69, 0],\n\torchid: [218, 112, 214],\n\tpalegoldenrod: [238, 232, 170],\n\tpalegreen: [152, 251, 152],\n\tpaleturquoise: [175, 238, 238],\n\tpalevioletred: [219, 112, 147],\n\tpapayawhip: [255, 239, 213],\n\tpeachpuff: [255, 218, 185],\n\tperu: [205, 133, 63],\n\tpink: [255, 192, 203],\n\tplum: [221, 160, 221],\n\tpowderblue: [176, 224, 230],\n\tpurple: [128, 0, 128],\n\trebeccapurple: [102, 51, 153],\n\tred: [255, 0, 0],\n\trosybrown: [188, 143, 143],\n\troyalblue: [65, 105, 225],\n\tsaddlebrown: [139, 69, 19],\n\tsalmon: [250, 128, 114],\n\tsandybrown: [244, 164, 96],\n\tseagreen: [46, 139, 87],\n\tseashell: [255, 245, 238],\n\tsienna: [160, 82, 45],\n\tsilver: [192, 192, 192],\n\tskyblue: [135, 206, 235],\n\tslateblue: [106, 90, 205],\n\tslategray: [112, 128, 144],\n\tslategrey: [112, 128, 144],\n\tsnow: [255, 250, 250],\n\tspringgreen: [0, 255, 127],\n\tsteelblue: [70, 130, 180],\n\ttan: [210, 180, 140],\n\tteal: [0, 128, 128],\n\tthistle: [216, 191, 216],\n\ttomato: [255, 99, 71],\n\tturquoise: [64, 224, 208],\n\tviolet: [238, 130, 238],\n\twheat: [245, 222, 179],\n\twhite: [255, 255, 255],\n\twhitesmoke: [245, 245, 245],\n\tyellow: [255, 255, 0],\n\tyellowgreen: [154, 205, 50]\n}\n","/**\n * @module color-space/hsl\n */\nimport rgb from './rgb.js';\n\nexport default {\n\tname: 'hsl',\n\tmin: [0,0,0],\n\tmax: [360,100,100],\n\tchannel: ['hue', 'saturation', 'lightness'],\n\talias: ['HSL'],\n\n\trgb: function(hsl) {\n\t\tvar h = hsl[0]/360, s = hsl[1]/100, l = hsl[2]/100, t1, t2, t3, rgb, val, i=0;\n\n\t\tif (s === 0) return val = l * 255, [val, val, val];\n\n\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s;\n\t\tt1 = 2 * l - t2;\n\n\t\trgb = [0, 0, 0];\n\t\tfor (;i<3;) {\n\t\t\tt3 = h + 1 / 3 * - (i - 1);\n\t\t\tt3 < 0 ? t3++ : t3 > 1 && t3--;\n\t\t\tval = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 :\n\t\t\t2 * t3 < 1 ? t2 :\n\t\t\t3 * t3 < 2 ?  t1 + (t2 - t1) * (2 / 3 - t3) * 6 :\n\t\t\tt1;\n\t\t\trgb[i++] = val * 255;\n\t\t}\n\n\t\treturn rgb;\n\t}\n};\n\n\n//extend rgb\nrgb.hsl = function(rgb) {\n\tvar r = rgb[0]/255,\n\t\t\tg = rgb[1]/255,\n\t\t\tb = rgb[2]/255,\n\t\t\tmin = Math.min(r, g, b),\n\t\t\tmax = Math.max(r, g, b),\n\t\t\tdelta = max - min,\n\t\t\th, s, l;\n\n\tif (max === min) {\n\t\th = 0;\n\t}\n\telse if (r === max) {\n\t\th = (g - b) / delta;\n\t}\n\telse if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t}\n\telse if (b === max) {\n\t\th = 4 + (r - g)/ delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t}\n\telse if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t}\n\telse {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n","/**\n * @module ol/DataTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\n\n/**\n * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap} ImageLike\n */\n\n/**\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike\n */\n\n/**\n * Data that can be used with a DataTile.\n * @typedef {ArrayLike|ImageLike} Data\n */\n\n/**\n * @param {Data} data Tile data.\n * @return {ImageLike|null} The image-like data.\n */\nexport function asImageLike(data) {\n  return data instanceof Image ||\n    data instanceof HTMLCanvasElement ||\n    data instanceof HTMLVideoElement ||\n    data instanceof ImageBitmap\n    ? data\n    : null;\n}\n\n/**\n * @param {Data} data Tile data.\n * @return {ArrayLike|null} The array-like data.\n */\nexport function asArrayLike(data) {\n  return data instanceof Uint8Array ||\n    data instanceof Uint8ClampedArray ||\n    data instanceof Float32Array ||\n    data instanceof DataView\n    ? data\n    : null;\n}\n\n/**\n * This is set as the cancellation reason when a tile is disposed.\n */\nexport const disposedError = new Error('disposed');\n\n/**\n * @type {CanvasRenderingContext2D|null}\n */\nlet sharedContext = null;\n\n/**\n * @param {ImageLike} image The image.\n * @return {Uint8ClampedArray} The data.\n */\nexport function toArray(image) {\n  if (!sharedContext) {\n    sharedContext = createCanvasContext2D(\n      image.width,\n      image.height,\n      undefined,\n      {willReadFrequently: true},\n    );\n  }\n  const canvas = sharedContext.canvas;\n  const width = image.width;\n  if (canvas.width !== width) {\n    canvas.width = width;\n  }\n  const height = image.height;\n  if (canvas.height !== height) {\n    canvas.height = height;\n  }\n  sharedContext.clearRect(0, 0, width, height);\n  sharedContext.drawImage(image, 0, 0);\n  return sharedContext.getImageData(0, 0, width, height).data;\n}\n\n/**\n * @type {import('./size.js').Size}\n */\nconst defaultSize = [256, 256];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\n * the promise should not resolve until the image is loaded.\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\n * @property {AbortController} [controller] An abort controller.\n * @api\n */\n\nclass DataTile extends Tile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    const state = TileState.IDLE;\n\n    super(options.tileCoord, state, {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    });\n\n    /**\n     * @type {function(): Promise<Data>}\n     * @private\n     */\n    this.loader_ = options.loader;\n\n    /**\n     * @type {Data}\n     * @private\n     */\n    this.data_ = null;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.error_ = null;\n\n    /**\n     * @type {import('./size.js').Size|null}\n     * @private\n     */\n    this.size_ = options.size || null;\n\n    /**\n     * @type {AbortController|null}\n     * @private\n     */\n    this.controller_ = options.controller || null;\n  }\n\n  /**\n   * Get the tile size.\n   * @return {import('./size.js').Size} Tile size.\n   */\n  getSize() {\n    if (this.size_) {\n      return this.size_;\n    }\n    const imageData = asImageLike(this.data_);\n    if (imageData) {\n      return [imageData.width, imageData.height];\n    }\n    return defaultSize;\n  }\n\n  /**\n   * Get the data for the tile.\n   * @return {Data} Tile data.\n   * @api\n   */\n  getData() {\n    return this.data_;\n  }\n\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @api\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Load the tile data.\n   * @api\n   * @override\n   */\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n    this.state = TileState.LOADING;\n    this.changed();\n\n    const self = this;\n    this.loader_()\n      .then(function (data) {\n        self.data_ = data;\n        self.state = TileState.LOADED;\n        self.changed();\n      })\n      .catch(function (error) {\n        self.error_ = error;\n        self.state = TileState.ERROR;\n        self.changed();\n      });\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    if (this.controller_) {\n      this.controller_.abort(disposedError);\n      this.controller_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default DataTile;\n","/**\n * @module ol/structs/LRUCache\n */\n\nimport Disposable from '../Disposable.js';\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Entry|null} newer Newer.\n * @property {Entry|null} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  deleteOldest() {\n    const entry = this.pop();\n    if (entry instanceof Disposable) {\n      entry.dispose();\n    }\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache. When the cache entry is a {@link module:ol/Disposable~Disposable},\n   * the entry will be disposed.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    while (this.oldest_) {\n      this.deleteOldest();\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      return entry.value_;\n    }\n    if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache',\n    );\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T|undefined} Value.\n   */\n  peek(key) {\n    return this.entries_[key]?.value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(\n      !(key in this.entries_),\n      'Tried to set a value for a key that is used already',\n    );\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n","/**\n * @module ol/reproj/DataTile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport DataTile, {asArrayLike, asImageLike, toArray} from '../DataTile.js';\nimport EventType from '../events/EventType.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport {calculateSourceExtentResolution} from '../reproj.js';\nimport {\n  canvasGLPool,\n  createCanvasContextWebGL,\n  releaseGLCanvas,\n  render as renderReprojected,\n} from './glreproj.js';\nimport {clamp} from '../math.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getArea, getIntersection, getWidth, wrapAndSliceX} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(number, number, number, number) : import(\"../DataTile.js\").default} TileGetter\n */\n\n/**\n * @typedef {Object} TileOffset\n * @property {DataTile} tile Tile.\n * @property {number} offset Offset.\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n * @property {import(\"../proj/Projection.js\").default} targetProj Target projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n * @property {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n * @property {import(\"../tilecoord.js\").TileCoord} [wrappedTileCoord] Coordinate of the tile wrapped in X.\n * @property {number} pixelRatio Pixel ratio.\n * @property {number} gutter Gutter of the source tiles.\n * @property {TileGetter} getTileFunction Function returning source tiles (z, x, y, pixelRatio).\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @property {number} [errorThreshold] Acceptable reprojection error (in px).\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {import(\"../transform.js\").Transform} [transformMatrix] Source transform matrix.\n * @property {boolean} [renderEdges] Render reprojection edges.\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected data tile.\n * See {@link module:ol/source/DataTile~DataTileSource}.\n *\n */\nclass ReprojDataTile extends DataTile {\n  /**\n   * @param {Options} options Tile options.\n   */\n  constructor(options) {\n    super({\n      tileCoord: options.tileCoord,\n      loader: () => Promise.resolve(new Uint8ClampedArray(4)),\n      interpolate: options.interpolate,\n      transition: options.transition,\n    });\n\n    /**\n     * @private\n     * @type {boolean | Array<number>}\n     */\n    this.renderEdges_ =\n      options.renderEdges !== undefined ? options.renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = options.pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter;\n\n    /**\n     * @type {import(\"../DataTile.js\").Data}\n     * @private\n     */\n    this.reprojData_ = null;\n\n    /**\n     * @type {Error}\n     * @private\n     */\n    this.reprojError_ = null;\n\n    /**\n     * @type {import('../size.js').Size}\n     * @private\n     */\n    this.reprojSize_ = undefined;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = options.sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = options.targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = options.wrappedTileCoord || options.tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<TileOffset>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    const sourceProj = options.sourceProj;\n    const sourceProjExtent = sourceProj.getExtent();\n    const sourceTileGridExtent = options.sourceTileGrid.getExtent();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.clipExtent_ = sourceProj.canWrapX()\n      ? sourceTileGridExtent\n        ? getIntersection(sourceProjExtent, sourceTileGridExtent)\n        : sourceProjExtent\n      : sourceTileGridExtent;\n\n    const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n      this.wrappedTileCoord_,\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = this.targetTileGrid_.getResolution(\n      this.wrappedTileCoord_[0],\n    );\n\n    const targetProj = options.targetProj;\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution,\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      options.errorThreshold !== undefined\n        ? options.errorThreshold\n        : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution,\n      options.transformMatrix,\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = this.sourceTileGrid_.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3],\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      let worldWidth = 0;\n      let worldsAway = 0;\n      if (sourceProj.canWrapX()) {\n        worldWidth = getWidth(sourceProjExtent);\n        worldsAway = Math.floor(\n          (sourceExtent[0] - sourceProjExtent[0]) / worldWidth,\n        );\n      }\n\n      const sourceExtents = wrapAndSliceX(\n        sourceExtent.slice(),\n        sourceProj,\n        true,\n      );\n      sourceExtents.forEach((extent) => {\n        const sourceRange = this.sourceTileGrid_.getTileRangeForExtentAndZ(\n          extent,\n          this.sourceZ_,\n        );\n        const getTile = options.getTileFunction;\n        for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n          for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n            const tile = getTile(this.sourceZ_, srcX, srcY, this.pixelRatio_);\n            if (tile) {\n              const offset = worldsAway * worldWidth;\n              this.sourceTiles_.push({tile, offset});\n            }\n          }\n        }\n        ++worldsAway;\n      });\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the tile size.\n   * @return {import('../size.js').Size} Tile size.\n   * @override\n   */\n  getSize() {\n    return this.reprojSize_;\n  }\n\n  /**\n   * Get the data for the tile.\n   * @return {import(\"../DataTile.js\").Data} Tile data.\n   * @override\n   */\n  getData() {\n    return this.reprojData_;\n  }\n\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @override\n   */\n  getError() {\n    return this.reprojError_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const dataSources = [];\n    let imageLike = false;\n    this.sourceTiles_.forEach((source) => {\n      const tile = source.tile;\n      if (!tile || tile.getState() !== TileState.LOADED) {\n        return;\n      }\n      const size = tile.getSize();\n      const gutter = this.gutter_;\n      /**\n       * @type {import(\"../DataTile.js\").ArrayLike}\n       */\n      let tileData;\n      const arrayData = asArrayLike(tile.getData());\n      if (arrayData) {\n        tileData = arrayData;\n      } else {\n        imageLike = true;\n        tileData = toArray(asImageLike(tile.getData()));\n      }\n      const pixelSize = [size[0] + 2 * gutter, size[1] + 2 * gutter];\n      const isFloat = tileData instanceof Float32Array;\n      const pixelCount = pixelSize[0] * pixelSize[1];\n      const DataType = isFloat ? Float32Array : Uint8ClampedArray;\n      const tileDataR = new DataType(tileData.buffer);\n      const bytesPerElement = DataType.BYTES_PER_ELEMENT;\n      const bytesPerPixel = (bytesPerElement * tileDataR.length) / pixelCount;\n      const bytesPerRow = tileDataR.byteLength / pixelSize[1];\n      const bandCount = Math.floor(\n        bytesPerRow / bytesPerElement / pixelSize[0],\n      );\n      const extent = this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord);\n      extent[0] += source.offset;\n      extent[2] += source.offset;\n      const clipExtent = this.clipExtent_?.slice();\n      if (clipExtent) {\n        clipExtent[0] += source.offset;\n        clipExtent[2] += source.offset;\n      }\n      dataSources.push({\n        extent: extent,\n        clipExtent: clipExtent,\n        data: tileDataR,\n        dataType: DataType,\n        bytesPerPixel: bytesPerPixel,\n        pixelSize: pixelSize,\n        bandCount: bandCount,\n      });\n    });\n    this.sourceTiles_.length = 0;\n\n    if (dataSources.length === 0) {\n      this.state = TileState.ERROR;\n      this.changed();\n      return;\n    }\n\n    const z = this.wrappedTileCoord_[0];\n    const size = this.targetTileGrid_.getTileSize(z);\n    const targetWidth = typeof size === 'number' ? size : size[0];\n    const targetHeight = typeof size === 'number' ? size : size[1];\n    const outWidth = targetWidth * this.pixelRatio_;\n    const outHeight = targetHeight * this.pixelRatio_;\n    const targetResolution = this.targetTileGrid_.getResolution(z);\n    const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n\n    const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n      this.wrappedTileCoord_,\n    );\n\n    const bandCount = dataSources[0].bandCount;\n    const dataR = new dataSources[0].dataType(bandCount * outWidth * outHeight);\n\n    const gl = createCanvasContextWebGL(outWidth, outHeight, canvasGLPool, {\n      premultipliedAlpha: false,\n      antialias: false,\n    });\n\n    let willInterpolate;\n    const format = gl.RGBA;\n    let textureType;\n    if (dataSources[0].dataType == Float32Array) {\n      textureType = gl.FLOAT;\n      gl.getExtension('WEBGL_color_buffer_float');\n      gl.getExtension('OES_texture_float');\n      gl.getExtension('EXT_float_blend');\n      const extension = gl.getExtension('OES_texture_float_linear');\n      const canInterpolate = extension !== null;\n      willInterpolate = canInterpolate && this.interpolate;\n    } else {\n      textureType = gl.UNSIGNED_BYTE;\n      willInterpolate = this.interpolate;\n    }\n\n    const BANDS_PR_REPROJ = 4;\n    const reprojs = Math.ceil(bandCount / BANDS_PR_REPROJ);\n    for (let reproj = reprojs - 1; reproj >= 0; --reproj) {\n      const sources = [];\n      for (let i = 0, len = dataSources.length; i < len; ++i) {\n        const dataSource = dataSources[i];\n\n        const pixelSize = dataSource.pixelSize;\n        const width = pixelSize[0];\n        const height = pixelSize[1];\n\n        const data = new dataSource.dataType(BANDS_PR_REPROJ * width * height);\n        const dataS = dataSource.data;\n        let offset = reproj * BANDS_PR_REPROJ;\n        for (let j = 0, len = data.length; j < len; j += BANDS_PR_REPROJ) {\n          data[j] = dataS[offset];\n          data[j + 1] = dataS[offset + 1];\n          data[j + 2] = dataS[offset + 2];\n          data[j + 3] = dataS[offset + 3];\n          offset += bandCount;\n        }\n\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        if (willInterpolate) {\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        } else {\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        }\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          format,\n          width,\n          height,\n          0,\n          format,\n          textureType,\n          data,\n        );\n\n        sources.push({\n          extent: dataSource.extent,\n          clipExtent: dataSource.clipExtent,\n          texture: texture,\n          width: width,\n          height: height,\n        });\n      }\n\n      const {framebuffer, width, height} = renderReprojected(\n        gl,\n        targetWidth,\n        targetHeight,\n        this.pixelRatio_,\n        sourceResolution,\n        targetResolution,\n        targetExtent,\n        this.triangulation_,\n        sources,\n        this.gutter_,\n        textureType,\n        this.renderEdges_,\n        willInterpolate,\n      );\n\n      // The texture is always RGBA.\n      const rows = width;\n      const cols = height * BANDS_PR_REPROJ;\n      const data = new dataSources[0].dataType(rows * cols);\n      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n      gl.readPixels(0, 0, width, height, gl.RGBA, textureType, data);\n\n      let offset = reproj * BANDS_PR_REPROJ;\n      for (let i = 0, len = data.length; i < len; i += BANDS_PR_REPROJ) {\n        // The data read by `readPixels` is flipped in the y-axis so flip it again.\n        const flipY = (rows - 1 - ((i / cols) | 0)) * cols + (i % cols);\n        dataR[offset] = data[flipY];\n        dataR[offset + 1] = data[flipY + 1];\n        dataR[offset + 2] = data[flipY + 2];\n        dataR[offset + 3] = data[flipY + 3];\n        offset += bandCount;\n      }\n    }\n\n    releaseGLCanvas(gl);\n    canvasGLPool.push(gl.canvas);\n\n    if (imageLike) {\n      const context = createCanvasContext2D(targetWidth, targetHeight);\n      const imageData = new ImageData(dataR, targetWidth);\n      context.putImageData(imageData, 0, 0);\n      this.reprojData_ = context.canvas;\n    } else {\n      this.reprojData_ = dataR;\n    }\n    this.reprojSize_ = [Math.round(outWidth), Math.round(outHeight)];\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @override\n   */\n  load() {\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\n      return;\n    }\n    this.state = TileState.LOADING;\n    this.changed();\n\n    let leftToLoad = 0;\n\n    this.sourcesListenerKeys_ = [];\n    this.sourceTiles_.forEach(({tile}) => {\n      const state = tile.getState();\n      if (state !== TileState.IDLE && state !== TileState.LOADING) {\n        return;\n      }\n      leftToLoad++;\n\n      const sourceListenKey = listen(tile, EventType.CHANGE, () => {\n        const state = tile.getState();\n        if (\n          state == TileState.LOADED ||\n          state == TileState.ERROR ||\n          state == TileState.EMPTY\n        ) {\n          unlistenByKey(sourceListenKey);\n          leftToLoad--;\n          if (leftToLoad === 0) {\n            this.unlistenSources_();\n            this.reproject_();\n          }\n        }\n      });\n      this.sourcesListenerKeys_.push(sourceListenKey);\n    });\n\n    if (leftToLoad === 0) {\n      setTimeout(this.reproject_.bind(this), 0);\n    } else {\n      this.sourceTiles_.forEach(function ({tile}) {\n        const state = tile.getState();\n        if (state == TileState.IDLE) {\n          tile.load();\n        }\n      });\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n}\n\nexport default ReprojDataTile;\n","/**\n * @module ol/reproj/glreproj\n */\nimport * as mat4 from '../vec/mat4.js';\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\nimport {Canvas as WebGLCanvas, createProgram} from '../webgl/Canvas.js';\nimport {\n  createEmpty,\n  extend,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from '../extent.js';\n\nconst EDGE_VERTEX_SHADER = `\n  attribute vec4 a_position;\n\n  uniform mat4 u_matrix;\n\n  void main() {\n     gl_Position = u_matrix * a_position;\n  }\n`;\nconst EDGE_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  uniform vec4 u_val;\n  void main() {\n     gl_FragColor = u_val;\n  }\n`;\n\nconst TRIANGLE_VERTEX_SHADER = `\n  attribute vec4 a_position;\n  attribute vec2 a_texcoord;\n\n  varying vec2 v_texcoord;\n\n  uniform mat4 u_matrix;\n\n  void main() {\n     gl_Position = u_matrix * a_position;\n     v_texcoord = a_texcoord;\n  }\n`;\nconst TRIANGLE_FRAGMENT_SHADER = `\n  precision mediump float;\n\n  varying vec2 v_texcoord;\n\n  uniform sampler2D u_texture;\n\n  void main() {\n    if (v_texcoord.x < 0.0 || v_texcoord.x > 1.0 || v_texcoord.y < 0.0 || v_texcoord.y > 1.0) {\n      discard;\n    }\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n  }\n`;\n\n/**\n * Create an html canvas element and returns its webgl context.\n * @param {number} [width] Canvas width.\n * @param {number} [height] Canvas height.\n * @param {Array<HTMLCanvasElement | OffscreenCanvas>} [canvasPool] Canvas pool to take existing canvas from.\n * @param {WebGLContextAttributes} [settings] CanvasRenderingContext2DSettings\n * @return {WebGLRenderingContext} The context.\n */\nexport function createCanvasContextWebGL(width, height, canvasPool, settings) {\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\n  let canvas;\n  if (canvasPool && canvasPool.length) {\n    canvas = /** @type {HTMLCanvasElement} */ (canvasPool.shift());\n  } else if (WORKER_OFFSCREEN_CANVAS) {\n    canvas = new OffscreenCanvas(width || 300, height || 300);\n  } else {\n    canvas = document.createElement('canvas');\n  }\n  if (width) {\n    canvas.width = width;\n  }\n  if (height) {\n    canvas.height = height;\n  }\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n  return /** @type {WebGLRenderingContext} */ (\n    canvas.getContext('webgl', settings)\n  );\n}\n\n/**\n * Releases canvas memory to avoid exceeding memory limits in Safari.\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\n * @param {WebGLRenderingContext} gl Context.\n */\nexport function releaseGLCanvas(gl) {\n  const canvas = gl.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n}\n\n/**\n * @type {Array<HTMLCanvasElement | OffscreenCanvas>}\n */\nexport const canvasGLPool = [];\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"../extent.js\").Extent} extent Extent.\n * @property {import(\"../extent.js\").Extent} [clipExtent] Clip extent.\n * @property {WebGLTexture} texture Texture.\n * @property {number} width Width of texture.\n * @property {number} height Height of texture.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {WebGLRenderingContext} gl the context to render in.\n * @param {number} width_ Width of the canvas.\n * @param {number} height_ Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"../extent.js\").Extent} targetExtent Target extent (tile).\n * @param {import(\"../reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {number} dataType What kind of data is the textures, must be gl.FLOAT or gl.UNSIGNED_BYTE\n * TODO: Allow setting renderEdges value in the data as this is done in \"data-space\".\n * @param {boolean | Array<number>} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @param {boolean} [drawSingle] Draw single source images directly without stitchTexture.\n * @return {{framebuffer: WebGLFramebuffer, width: number, height: number, texture: WebGLTexture}} Canvas with reprojected data.\n */\nexport function render(\n  gl,\n  width_,\n  height_,\n  pixelRatio,\n  sourceResolution,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  dataType,\n  renderEdges,\n  interpolate,\n  drawSingle,\n) {\n  const width = Math.round(pixelRatio * width_);\n  const height = Math.round(pixelRatio * height_);\n  gl.canvas.width = width;\n  gl.canvas.height = height;\n\n  /** @type {WebGLFramebuffer | null} */\n  let resultFrameBuffer;\n  /** @type {WebGLTexture | null} */\n  let resultTexture;\n  {\n    resultTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, resultTexture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    if (interpolate) {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    } else {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    }\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      width,\n      height,\n      0,\n      gl.RGBA,\n      dataType,\n      null,\n    );\n\n    resultFrameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, resultFrameBuffer);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      resultTexture,\n      0,\n    );\n  }\n\n  if (resultFrameBuffer === null) {\n    throw new Error('Could not create framebuffer');\n  }\n  if (resultTexture === null) {\n    throw new Error('Could not create texture');\n  }\n\n  if (sources.length === 0) {\n    return {\n      width,\n      height,\n      framebuffer: resultFrameBuffer,\n      texture: resultTexture,\n    };\n  }\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  /** @type {WebGLTexture | null} */\n  let stitchTexture;\n  /** @type {number} */\n  let stitchWidth;\n  /** @type {number} */\n  let stitchHeight;\n  const stitchScale = 1 / sourceResolution;\n\n  if (!drawSingle || sources.length !== 1 || gutter !== 0) {\n    stitchTexture = gl.createTexture();\n    if (resultTexture === null) {\n      throw new Error('Could not create texture');\n    }\n    stitchWidth = Math.round(getWidth(sourceDataExtent) * stitchScale);\n    stitchHeight = Math.round(getHeight(sourceDataExtent) * stitchScale);\n\n    // Make sure we do not exceed the max texture size by lowering the resolution for this image.\n    // https://github.com/openlayers/openlayers/pull/15860#issuecomment-2254123580\n    const maxTexSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    const largeSide = Math.max(stitchWidth, stitchHeight);\n    const scaleFactor = largeSide > maxTexSize ? maxTexSize / largeSide : 1;\n    const stitchWidthFixed = Math.round(stitchWidth * scaleFactor);\n    const stitchHeightFixed = Math.round(stitchHeight * scaleFactor);\n\n    gl.bindTexture(gl.TEXTURE_2D, stitchTexture);\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    if (interpolate) {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n    } else {\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    }\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      stitchWidthFixed,\n      stitchHeightFixed,\n      0,\n      gl.RGBA,\n      dataType,\n      null,\n    );\n\n    const fb = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      stitchTexture,\n      0,\n    );\n    const webGLCanvas = new WebGLCanvas(gl);\n\n    sources.forEach(function (src, i, arr) {\n      const xPos =\n        (src.extent[0] - sourceDataExtent[0]) * stitchScale * scaleFactor;\n      const yPos =\n        -(src.extent[3] - sourceDataExtent[3]) * stitchScale * scaleFactor;\n      const srcWidth = getWidth(src.extent) * stitchScale * scaleFactor;\n      const srcHeight = getHeight(src.extent) * stitchScale * scaleFactor;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n      gl.viewport(0, 0, stitchWidthFixed, stitchHeightFixed);\n\n      if (src.clipExtent) {\n        const xPos =\n          (src.clipExtent[0] - sourceDataExtent[0]) * stitchScale * scaleFactor;\n        const yPos =\n          -(src.clipExtent[3] - sourceDataExtent[3]) *\n          stitchScale *\n          scaleFactor;\n        const width = getWidth(src.clipExtent) * stitchScale * scaleFactor;\n        const height = getHeight(src.clipExtent) * stitchScale * scaleFactor;\n        gl.enable(gl.SCISSOR_TEST);\n        gl.scissor(\n          interpolate ? xPos : Math.round(xPos),\n          interpolate ? yPos : Math.round(yPos),\n          interpolate ? width : Math.round(xPos + width) - Math.round(xPos),\n          interpolate ? height : Math.round(yPos + height) - Math.round(yPos),\n        );\n      }\n\n      webGLCanvas.drawImage(\n        src.texture,\n        src.width,\n        src.height,\n        gutter,\n        gutter,\n        src.width - 2 * gutter,\n        src.height - 2 * gutter,\n        interpolate ? xPos : Math.round(xPos),\n        interpolate ? yPos : Math.round(yPos),\n        interpolate ? srcWidth : Math.round(xPos + srcWidth) - Math.round(xPos),\n        interpolate\n          ? srcHeight\n          : Math.round(yPos + srcHeight) - Math.round(yPos),\n        stitchWidthFixed,\n        stitchHeightFixed,\n      );\n\n      gl.disable(gl.SCISSOR_TEST);\n    });\n    gl.deleteFramebuffer(fb);\n  } else {\n    stitchTexture = sources[0].texture;\n    stitchWidth = sources[0].width;\n    stitchHeight = sources[0].width;\n  }\n\n  const targetTopLeft = getTopLeft(targetExtent);\n  const sourceTopLeft = getTopLeft(sourceDataExtent);\n\n  const getUVs = (\n    /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ target,\n  ) => {\n    const u0 =\n      ((target[0][0] - targetTopLeft[0]) / targetResolution) * pixelRatio;\n    const v0 =\n      (-(target[0][1] - targetTopLeft[1]) / targetResolution) * pixelRatio;\n    const u1 =\n      ((target[1][0] - targetTopLeft[0]) / targetResolution) * pixelRatio;\n    const v1 =\n      (-(target[1][1] - targetTopLeft[1]) / targetResolution) * pixelRatio;\n    const u2 =\n      ((target[2][0] - targetTopLeft[0]) / targetResolution) * pixelRatio;\n    const v2 =\n      (-(target[2][1] - targetTopLeft[1]) / targetResolution) * pixelRatio;\n    return {u1, v1, u0, v0, u2, v2};\n  };\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, resultFrameBuffer);\n  gl.viewport(0, 0, width, height);\n\n  // Draw source to reprojtile\n  {\n    /** @type {Array<number>} */\n    const vertices = [];\n    /** @type {Array<number>} */\n    const texcoords = [];\n\n    const triProgram = createProgram(\n      gl,\n      TRIANGLE_FRAGMENT_SHADER,\n      TRIANGLE_VERTEX_SHADER,\n    );\n    gl.useProgram(triProgram);\n\n    // Bind image\n    const textureLocation = gl.getUniformLocation(triProgram, 'u_texture');\n    gl.bindTexture(gl.TEXTURE_2D, stitchTexture);\n\n    // Tell the shader to get the texture from texture unit 0\n    gl.uniform1i(textureLocation, 0);\n\n    // Calculate vert and tex coordinates.\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const source = triangle.source;\n      const target = triangle.target;\n      // Make sure that everything is on pixel boundaries\n      const {u1, v1, u0, v0, u2, v2} = getUVs(target);\n\n      const su0 =\n        (source[0][0] - sourceTopLeft[0]) / sourceResolution / stitchWidth;\n      const sv0 =\n        -(source[0][1] - sourceTopLeft[1]) / sourceResolution / stitchHeight;\n      const su1 =\n        (source[1][0] - sourceTopLeft[0]) / sourceResolution / stitchWidth;\n      const sv1 =\n        -(source[1][1] - sourceTopLeft[1]) / sourceResolution / stitchHeight;\n      const su2 =\n        (source[2][0] - sourceTopLeft[0]) / sourceResolution / stitchWidth;\n      const sv2 =\n        -(source[2][1] - sourceTopLeft[1]) / sourceResolution / stitchHeight;\n\n      vertices.push(u1, v1, u0, v0, u2, v2);\n      texcoords.push(su1, sv1, su0, sv0, su2, sv2);\n    });\n\n    // Convert pixel space to clip space.\n    const matrix = mat4.orthographic(0, width, height, 0, -1, 1);\n    const matrixLocation = gl.getUniformLocation(triProgram, 'u_matrix');\n    gl.uniformMatrix4fv(matrixLocation, false, matrix);\n\n    const positionLocation = gl.getAttribLocation(triProgram, 'a_position');\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(positionLocation);\n\n    const texcoordLocation = gl.getAttribLocation(triProgram, 'a_texcoord');\n    const texcoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texcoords), gl.STATIC_DRAW);\n    gl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(texcoordLocation);\n\n    gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n  }\n\n  if (renderEdges) {\n    const edgeProgram = createProgram(\n      gl,\n      EDGE_FRAGMENT_SHADER,\n      EDGE_VERTEX_SHADER,\n    );\n    gl.useProgram(edgeProgram);\n    const matrix = mat4.orthographic(0, width, height, 0, -1, 1);\n    const matrixLocation = gl.getUniformLocation(edgeProgram, 'u_matrix');\n    gl.uniformMatrix4fv(matrixLocation, false, matrix);\n\n    const burnval = Array.isArray(renderEdges) ? renderEdges : [0, 0, 0, 255];\n    const burnvalLocation = gl.getUniformLocation(edgeProgram, 'u_val');\n    const isFloat = true;\n    if (isFloat) {\n      gl.uniform4fv(burnvalLocation, burnval);\n    } else {\n      gl.uniform4iv(burnvalLocation, burnval);\n    }\n\n    const positionLocation = gl.getAttribLocation(edgeProgram, 'a_position');\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(positionLocation);\n\n    /** @type {Array<number>} */\n    const lines = triangulation.getTriangles().reduce(function (\n      /** @type {Array<number>} */ lines,\n      triangle,\n    ) {\n      const target = triangle.target;\n      const {u1, v1, u0, v0, u2, v2} = getUVs(target);\n\n      return lines.concat([u1, v1, u0, v0, u0, v0, u2, v2, u2, v2, u1, v1]);\n    }, []);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(lines), gl.STATIC_DRAW);\n    gl.drawArrays(gl.LINES, 0, lines.length / 2);\n  }\n\n  return {\n    width,\n    height,\n    framebuffer: resultFrameBuffer,\n    texture: resultTexture,\n  };\n}\n","/**\n * @module ol/vec/mat4\n */\n\n/** @typedef {Array<number>} Mat4 */\n\n/**\n * @return {Mat4} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n\n/**\n * @param {Mat4} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Mat4} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @param {Mat4} [out] mat4 frustum matrix will be written into\n * @return {Mat4} out\n */\nexport function orthographic(left, right, bottom, top, near, far, out) {\n  out = out ?? create();\n  const lr = 1 / (left - right),\n    bt = 1 / (bottom - top),\n    nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3\n *\n * @param {Mat4} m The matrix to scale.\n * @param {number} x How much to scale in the x direction.\n * @param {number} y How much to scale in the y direction.\n * @param {number} z How much to scale in the z direction.\n * @param {Mat4} [out] The matrix to write to.\n * @return {Mat4} out\n **/\nexport function scale(m, x, y, z, out) {\n  out = out ?? create();\n  out[0] = m[0] * x;\n  out[1] = m[1] * x;\n  out[2] = m[2] * x;\n  out[3] = m[3] * x;\n  out[4] = m[4] * y;\n  out[5] = m[5] * y;\n  out[6] = m[6] * y;\n  out[7] = m[7] * y;\n  out[8] = m[8] * z;\n  out[9] = m[9] * z;\n  out[10] = m[10] * z;\n  out[11] = m[11] * z;\n  out[12] = m[12];\n  out[13] = m[13];\n  out[14] = m[14];\n  out[15] = m[15];\n  return out;\n}\n\n/**\n * Translate a matrix.\n *\n * @param {Mat4} m the matrix to translate\n * @param {number} x How much to translate in the x direction.\n * @param {number} y How much to translate in the y direction.\n * @param {number} z How much to translate in the z direction.\n * @param {Mat4} [out] the receiving matrix\n * @return {Mat4} out\n */\nexport function translate(m, x, y, z, out) {\n  out = out ?? create();\n  let a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;\n\n  if (m === out) {\n    out[12] = m[0] * x + m[4] * y + m[8] * z + m[12];\n    out[13] = m[1] * x + m[5] * y + m[9] * z + m[13];\n    out[14] = m[2] * x + m[6] * y + m[10] * z + m[14];\n    out[15] = m[3] * x + m[7] * y + m[11] * z + m[15];\n  } else {\n    a00 = m[0];\n    a01 = m[1];\n    a02 = m[2];\n    a03 = m[3];\n    a10 = m[4];\n    a11 = m[5];\n    a12 = m[6];\n    a13 = m[7];\n    a20 = m[8];\n    a21 = m[9];\n    a22 = m[10];\n    a23 = m[11];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + m[12];\n    out[13] = a01 * x + a11 * y + a21 * z + m[13];\n    out[14] = a02 * x + a12 * y + a22 * z + m[14];\n    out[15] = a03 * x + a13 * y + a23 * z + m[15];\n  }\n\n  return out;\n}\n\n/**\n * @param {number} x x translation.\n * @param {number} y y translation.\n * @param {number} z z translation.\n * @param {Mat4} [out] optional matrix to store result\n * @return {Mat4} out\n */\nexport function translation(x, y, z, out) {\n  out = out ?? create();\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = x;\n  out[13] = y;\n  out[14] = z;\n  out[15] = 1;\n\n  return out;\n}\n","import * as mat4 from '../vec/mat4.js';\n\n/**\n * @module ol/webgl/Canvas\n */\n\nconst VERTEX_SHADER = `\n  attribute vec4 a_position;\n  attribute vec4 a_texcoord;\n\n  uniform mat4 u_matrix;\n  uniform mat4 u_textureMatrix;\n\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_matrix * a_position;\n    vec2 texcoord = (u_textureMatrix * a_texcoord).xy;\n    v_texcoord = texcoord;\n  }\n`;\n\nconst FRAGMENT_SHADER = `\n  precision mediump float;\n\n  varying vec2 v_texcoord;\n\n  uniform sampler2D u_texture;\n\n  void main() {\n    if (\n      v_texcoord.x < 0.0 ||\n      v_texcoord.y < 0.0 ||\n      v_texcoord.x > 1.0 ||\n      v_texcoord.y > 1.0\n    ) {\n      discard;\n    }\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n  }\n`;\n\n/** @typedef {import(\"../transform.js\").Transform} Matrix */\n\n/**\n * Canvas-like operations implemented in webgl.\n */\nexport class Canvas {\n  /**\n   * @param {WebGLRenderingContext} gl Context to render in.\n   */\n  constructor(gl) {\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n    this.gl_ = gl;\n\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n    this.program_ = createProgram(gl, FRAGMENT_SHADER, VERTEX_SHADER);\n\n    this.positionLocation = gl.getAttribLocation(this.program_, 'a_position');\n    this.texcoordLocation = gl.getAttribLocation(this.program_, 'a_texcoord');\n\n    this.matrixLocation = gl.getUniformLocation(this.program_, 'u_matrix');\n    this.textureMatrixLocation = gl.getUniformLocation(\n      this.program_,\n      'u_textureMatrix',\n    );\n    this.textureLocation = gl.getUniformLocation(this.program_, 'u_texture');\n\n    this.positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n\n    this.positions = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(this.positions),\n      gl.STATIC_DRAW,\n    );\n\n    this.texcoordBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n\n    this.texcoords = [0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1];\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array(this.texcoords),\n      gl.STATIC_DRAW,\n    );\n  }\n\n  /**\n   * 2dContext drawImage call implemented in webgl.\n   * Unlike images, textures do not have a width and height associated\n   * with them so we'll pass in the width and height of the texture.\n   *\n   * @param {WebGLTexture} tex Image to draw.\n   * @param {number} texWidth Image width.\n   * @param {number} texHeight Image height.\n   * @param {number} srcX Top-left x-point to read src image.\n   * @param {number} srcY Top-left y-point to read src image.\n   * @param {number} [srcWidth] Width of source to read.\n   * @param {number} [srcHeight] Height of source to read.\n   * @param {number} [dstX] Top-left x-point of destination.\n   * @param {number} [dstY] Top-left y-point of destination.\n   * @param {number} [dstWidth] Width of written image in destination.\n   * @param {number} [dstHeight] Height of written image in destination.\n   * @param {number} [width] Width of canvas.\n   * @param {number} [height] Height of canvas.\n   */\n  drawImage(\n    tex,\n    texWidth,\n    texHeight,\n    srcX,\n    srcY,\n    srcWidth,\n    srcHeight,\n    dstX,\n    dstY,\n    dstWidth,\n    dstHeight,\n    width,\n    height,\n  ) {\n    const gl = this.gl_;\n\n    if (dstX === undefined) {\n      dstX = srcX;\n    }\n    if (dstY === undefined) {\n      dstY = srcY;\n    }\n    if (srcWidth === undefined) {\n      srcWidth = texWidth;\n    }\n    if (srcHeight === undefined) {\n      srcHeight = texHeight;\n    }\n    if (dstWidth === undefined) {\n      dstWidth = srcWidth;\n    }\n    if (dstHeight === undefined) {\n      dstHeight = srcHeight;\n    }\n    if (width === undefined) {\n      width = gl.canvas.width;\n    }\n    if (height === undefined) {\n      height = gl.canvas.height;\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n\n    gl.useProgram(this.program_);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.enableVertexAttribArray(this.positionLocation);\n    gl.vertexAttribPointer(this.positionLocation, 2, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffer);\n    gl.enableVertexAttribArray(this.texcoordLocation);\n    gl.vertexAttribPointer(this.texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n    // matrix for converting pixels to clip space\n    let matrix = mat4.orthographic(0, width, 0, height, -1, 1);\n    matrix = mat4.translate(matrix, dstX, dstY, 0);\n    matrix = mat4.scale(matrix, dstWidth, dstHeight, 1);\n    gl.uniformMatrix4fv(this.matrixLocation, false, matrix);\n\n    let texMatrix = mat4.translation(srcX / texWidth, srcY / texHeight, 0);\n    texMatrix = mat4.scale(\n      texMatrix,\n      srcWidth / texWidth,\n      srcHeight / texHeight,\n      1,\n    );\n\n    gl.uniformMatrix4fv(this.textureMatrixLocation, false, texMatrix);\n    gl.uniform1i(this.textureLocation, 0);\n    gl.drawArrays(gl.TRIANGLES, 0, this.positions.length / 2);\n  }\n}\n\n/**\n * @param {WebGLRenderingContext} gl Rendering Context.\n * @param {GLenum} type Type of shader.\n * @param {string} source source of shader.\n * @return {WebGLShader} [progam] The program.\n */\nfunction createShader(gl, type, source) {\n  const shader = gl.createShader(type);\n\n  if (shader === null) {\n    throw new Error('Shader compilation failed');\n  }\n\n  gl.shaderSource(shader, source);\n\n  gl.compileShader(shader);\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    const log = gl.getShaderInfoLog(shader);\n    if (log === null) {\n      throw new Error('Shader info log creation failed');\n    }\n    throw new Error(log);\n  }\n\n  return shader;\n}\n\n/**\n * @param {WebGLRenderingContext} gl Rendering Context.\n * @param {string} fragmentSource Fragment shader source.\n * @param {string} vertexSource Vertex shader source.\n * @return {WebGLProgram} [progam] The program.\n */\nexport function createProgram(gl, fragmentSource, vertexSource) {\n  const program = gl.createProgram();\n\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexSource);\n  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\n  if (program === null) {\n    throw new Error('Program creation failed');\n  }\n\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n\n  gl.linkProgram(program);\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    const log = gl.getProgramInfoLog(program);\n    if (log === null) {\n      throw new Error('Program info log creation failed');\n    }\n    throw new Error();\n  }\n  return program;\n}\n"],"names":["$075f937d7366f1a2$var$sharedCanvasContext","$2b0a118af78fb031$var$brokenDiagonalRendering_","$294047c5e65f31a3$export$2e2bcd8739ae039","CHANGE","ERROR","LOAD","$3273ed08087da3da$export$2e2bcd8739ae039","constructor","disposed","dispose","disposeInternal","$aeedce20e9577100$export$2e2bcd8739ae039","type","propagationStopped","defaultPrevented","target","preventDefault","stopPropagation","$b998d41b678ed5d1$export$fcb633242ef15540","a","b","$b998d41b678ed5d1$export$8a3786cc03fdb777","arr","direction","n","length","i","candidate","$b998d41b678ed5d1$export$e9bab7fafb253603","arr1","arr2","len1","$013a1733c226ec50$export$1cd1943b3a73bbe8","$beaefe87199bb537$export$42ffd38884aecdac","object","property","$08c28d22c0cb5a39$export$2e2bcd8739ae039","eventTarget_","pendingRemovals_","dispatching_","listeners_","addEventListener","listener","listeners","listenersForType","includes","push","dispatchEvent","event","propagate","isString","evt","dispatching","pendingRemovals","ii","handleEvent","call","pr","removeEventListener","getListeners","undefined","hasListener","Object","keys","index","indexOf","splice","$b8291d9739c3c64e$export$2e2bcd8739ae039","IDLE","LOADING","LOADED","EMPTY","$6c5e11070e371322$export$817eb92a8194bab0","Error","$6c5e11070e371322$var$uidCounter_","$6c5e11070e371322$export$5e82334337e0f204","obj","ol_uid","String","$c7ccf7e681a9b333$export$929e5a82286172a6","t","Math","pow","$c7ccf7e681a9b333$export$57636bb43b1ccbb0","$c7ccf7e681a9b333$export$9b47139b511b56e4","$0f235d2d04095c6e$export$2e2bcd8739ae039","tileCoord","state","options","key","transition_","transition","transitionStarts_","interpolate","changed","release","setState","getKey","getTileCoord","getState","load","getAlpha","id","time","start","delta","inTransition","endTransition","$67c66761d21428d0$var$ua","navigator","userAgent","toLowerCase","$67c66761d21428d0$export$3227bfbdaa9275de","test","devicePixelRatio","$67c66761d21428d0$export$98fcef3dc9973292","WorkerGlobalScope","OffscreenCanvas","self","$67c66761d21428d0$export$716f8695eedb9bad","Image","prototype","decode","$075f937d7366f1a2$export$9e05d10eae75c464","width","height","canvasPool","settings","canvas","shift","document","createElement","getContext","$075f937d7366f1a2$export$fcb72ce088a6632c","$075f937d7366f1a2$export$e918ac6a1026a12a","context","clearRect","defineProperty","get","window","error","$7eb75c96a6b6f2c6$export$2e2bcd8739ae039","$d5bf8abd656a3cdc$export$63174c828edd6ff8","thisArg","once","originalListener","apply","arguments","bind","eventsKey","$d5bf8abd656a3cdc$export$b0a21c8b3c1c921","$cd3bc8d185522361$export$2e2bcd8739ae039","src","crossOrigin","tileLoadFunction","crossOrigin_","src_","image_","unlisten_","tileLoadFunction_","getImage","setImage","element","unlistenImage_","handleImageError_","$cd3bc8d185522361$var$getBlankImage","ctx","fillStyle","fillRect","handleImageLoad_","image","naturalWidth","naturalHeight","loadHandler","errorHandler","listening","decoding","loaded","listenerKeys","img","then","catch","forEach","$35d5ec884318008e$export$a7a9523472993e97","assertion","errorMessage","$e22e7611e69f42a9$export$185802fd694ee1f5","$e22e7611e69f42a9$export$5635d7ef4b8fee1c","transform","coordinate","x","y","$e22e7611e69f42a9$export$f672e0b6f7222cd7","dx1","dy1","sx","sy","angle","dx2","dy2","sin","cos","$e22e7611e69f42a9$var$matrixPrecision","$dab4245bc22b806c$export$2e2bcd8739ae039","UNKNOWN","INTERSECTING","ABOVE","RIGHT","BELOW","LEFT","$6da4c8ed3074c92b$export$8aceca7c77505534","coordinates","extent","$6da4c8ed3074c92b$export$fe201bb3bbe031e9","$6da4c8ed3074c92b$export$1f820e3920fa5715","$6da4c8ed3074c92b$export$cbe64c389534206f","dx","dy","$6da4c8ed3074c92b$export$ac68c24d37ca240f","$6da4c8ed3074c92b$export$805bdfd6d6690e97","$6da4c8ed3074c92b$export$f97905ead28c61a8","minX","minY","maxX","maxY","relationship","Infinity","$6da4c8ed3074c92b$export$958e3e1a02eac4b6","dest","$6da4c8ed3074c92b$export$3e2152b047719fa1","$6da4c8ed3074c92b$export$8b58be045bf06082","extent1","extent2","$6da4c8ed3074c92b$export$30570204156ffd18","flatCoordinates","offset","end","stride","$6da4c8ed3074c92b$export$f1dab130b92b85a9","min","max","$6da4c8ed3074c92b$export$f9ed8a3d123a08e2","callback","val","$6da4c8ed3074c92b$export$8d09f5e2e1bf560d","$6da4c8ed3074c92b$export$e77c1cf70445e168","$6da4c8ed3074c92b$export$b84fa077c8b05295","$6da4c8ed3074c92b$export$cb1538b07e6964ff","$6da4c8ed3074c92b$export$520c40045967cb15","area","$6da4c8ed3074c92b$export$dd1bc94b04021eeb","$6da4c8ed3074c92b$export$3c49c185de0c2bfc","$6da4c8ed3074c92b$export$c08559766941f856","$6da4c8ed3074c92b$export$c91255cadecfe081","$6da4c8ed3074c92b$export$72209efa88586d42","intersection","$6da4c8ed3074c92b$export$7b0a31e10bbff018","$6da4c8ed3074c92b$export$9031237f01de0947","projection","multiWorld","canWrapX","projectionExtent","getExtent","isFinite","$6da4c8ed3074c92b$export$39a9ce3624977b84","center","worldWidth","worldsAway","floor","$03edbd434a9e6608$export$1482081eec883108","PI","$6dc418afeec7068a$export$2e2bcd8739ae039","code_","code","units_","units","extent_","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","getCode","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","$84ad988f04807ab1$export$f3928063e5e96d35","$84ad988f04807ab1$export$21e6da8a7375dfe8","$84ad988f04807ab1$export$ae9d6ed80df710e5","$84ad988f04807ab1$export$d26945d1ad52feeb","$84ad988f04807ab1$export$2d2c9be8b5b863f","log","tan","$84ad988f04807ab1$var$EPSG3857Projection","resolution","point","cosh","$84ad988f04807ab1$export$b508d7ad9a891c1b","$b58ae362632b32c5$export$21e6da8a7375dfe8","$b58ae362632b32c5$export$1482081eec883108","$b58ae362632b32c5$var$EPSG4326Projection","$b58ae362632b32c5$export$b508d7ad9a891c1b","$f5ec5c943d804ecb$var$cache","$11b5dd198626e1de$var$transforms","$11b5dd198626e1de$export$e16d8520af44a096","source","destination","transformFn","sourceCode","destinationCode","$11b5dd198626e1de$export$3988ae62b71be9a3","$6b000a049d919fe5$export$7d15b64cf5a3a4c4","value","$6b000a049d919fe5$export$88e6ebb4fe54f538","x1","y1","x2","y2","$6b000a049d919fe5$export$56cb859c01fa134d","angleInRadians","$6b000a049d919fe5$export$cba01ba138429a1d","angleInDegrees","$6b000a049d919fe5$export$ba467bec01d66def","r","$6b000a049d919fe5$export$a81f732198733497","decimals","factor","round","$6b000a049d919fe5$export$a3fe094919f356fd","$6b000a049d919fe5$export$803ce6b71a0a94b2","ceil","$6b000a049d919fe5$export$4997ffc0176396a6","range","$1bd0a226f9a16141$export$e9bab7fafb253603","coordinate1","coordinate2","equals","$fb75384508533d8f$export$79376507b09a66f","c1","c2","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","atan2","sqrt","$5f19451ebc03a1eb$var$SQRT_E","$5f19451ebc03a1eb$var$_E","$5f19451ebc03a1eb$var$_E2","$5f19451ebc03a1eb$var$_E3","$5f19451ebc03a1eb$var$_E4","$5f19451ebc03a1eb$var$_E5","$5f19451ebc03a1eb$var$P2","$5f19451ebc03a1eb$var$P3","$5f19451ebc03a1eb$var$P4","$5f19451ebc03a1eb$var$P5","$5f19451ebc03a1eb$var$toLonLat","easting","northing","zone","mu","m","north","$5f19451ebc03a1eb$var$R","pRad","pSin","pSin2","pCos","pTan","pTan2","pTan4","c","$5f19451ebc03a1eb$var$E_P2","$5f19451ebc03a1eb$var$E","d","d2","d3","d4","d5","longitude","$5f19451ebc03a1eb$var$zoneToCentralLongitude","number","d6","$5f19451ebc03a1eb$var$fromLonLat","latitude","latRad","latSin","latCos","latTan","latTan2","latTan4","lonRad","centralLonRad","a2","a3","a4","a5","$5f19451ebc03a1eb$var$K0","$5f19451ebc03a1eb$var$M1","$5f19451ebc03a1eb$var$M2","$5f19451ebc03a1eb$var$M3","$5f19451ebc03a1eb$var$M4","a6","$5f19451ebc03a1eb$var$epsgRegExes","$5f19451ebc03a1eb$export$bb54dc52a08ed170","epsgId","re","match","parseInt","$5f19451ebc03a1eb$var$makeTransformFunction","transformer","input","output","dimension","slice","Array","coord","$9c4744460e43e41b$var$transformFactories","forward","inverse","$9c4744460e43e41b$var$projectionFactories","$9c4744460e43e41b$var$showCoordinateWarning","$9c4744460e43e41b$export$dd516654c5f598fb","$9c4744460e43e41b$export$59ae956cd3e343f7","$9c4744460e43e41b$export$3988ae62b71be9a3","projectionLike","replace","makeProjection","$9c4744460e43e41b$export$2d8f7b4eec383d44","pointResolution","getter","projUnits","toEPSG4326","$9c4744460e43e41b$export$e3c4995a701c26a3","vertices","$9c4744460e43e41b$export$eeb8392580a05a37","projections","$9c4744460e43e41b$export$638ad73f7aafb913","$9c4744460e43e41b$export$549167224996a0fb","defaultCode","$9c4744460e43e41b$export$fe091d73a555748b","projection1","projection2","equalUnits","transformFunc","sourceTransforms","destinationTransforms","makeTransforms","intermediateCode","$9c4744460e43e41b$var$composeTransformFuncs","fromSource","toDestination","t1","t2","dimensions","$9c4744460e43e41b$export$fce0c6cfca85ed96","$9c4744460e43e41b$export$51186ad6e864892a","$9c4744460e43e41b$export$d4b8ec0b96db1ee2","destProjection","args","console","warn","$9c4744460e43e41b$export$4856f21c2f184f24","projections1","projections2","forwardTransform","inverseTransform","atan","exp","$6be53f6edfbf1854$export$2e2bcd8739ae039","sourceProj","targetProj","targetExtent","maxSourceExtent","errorThreshold","destinationResolution","sourceMatrix","coordTransform","sourceProj_","targetProj_","transformInvCache","transformInv","pointLength","j","jj","transformInv_","maxSourceExtent_","errorThresholdSquared_","triangles_","wrapsXInSource_","canWrapXInSource_","sourceWorldWidth_","targetWorldWidth_","destinationTopLeft","destinationTopRight","destinationBottomRight","destinationBottomLeft","sourceTopLeft","sourceTopRight","sourceBottomRight","sourceBottomLeft","maxSubdivision","$6be53f6edfbf1854$var$MAX_SUBDIVISION","log2","addQuad_","leftBound","triangle","newTriangle","addTriangle_","aSrc","bSrc","cSrc","dSrc","sourceQuadExtent","sourceCoverageX","sourceWorldWidth","wrapsX","needsSubdivision","targetCoverageX","isNotFinite","centerSrc","centerSrcEstimX","centerSrcErrorSquared","abs","bc","bcSrc","da","daSrc","ab","abSrc","cd","cdSrc","calculateSourceExtent","getTriangles","$2b0a118af78fb031$export$a166f0857c555517","$2b0a118af78fb031$var$drawTestTriangle","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","restore","$2b0a118af78fb031$var$verifyBrokenDiagonalRendering","data","$2b0a118af78fb031$export$5fbb958059b7e71f","targetCenter","targetResolution","sourceCenter","sourceResolution","targetMetersPerUnit","sourceMetersPerUnit","sourceExtent","compensationFactor","$2b0a118af78fb031$export$16d356211d01f1cc","corner","$398e350e33050c07$export$2e2bcd8739ae039","sourceTileGrid","targetTileGrid","wrappedTileCoord","pixelRatio","gutter","getTileFunction","renderEdges","renderEdges_","pixelRatio_","gutter_","canvas_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","clipExtent_","getTileCoordExtent","maxTargetExtent","limitedTargetExtent","sourceProjExtent","getResolution","triangulation_","getZForResolution","sourceExtents","sourceRange","getTileRangeForExtentAndZ","srcX","srcY","tile","reproject_","sources","clipExtent","z","size","getTileSize","triangulation","drawSingle","stitchContext","imageSmoothingEnabled","pixelRound","scale","globalCompositeOperation","sourceDataExtent","stitchScale","inverseScale","xPos","yPos","rect","srcWidth","srcHeight","drawImage","targetTopLeft","x0","y0","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","affineCoefs","mat","maxRow","maxEl","absValue","tmp","coef","k","l","$2b0a118af78fb031$var$isBrokenDiagonalRendering","getImageData","ud","vd","step","steps","translate","strokeStyle","lineWidth","stroke","leftToLoad","sourceListenKey","e","unlistenSources_","setTimeout","$7e3d7a0f8b272861$export$2e2bcd8739ae039","TILELOADSTART","TILELOADEND","TILELOADERROR","$1f093ab5083c8a1f$var$Observable","on","onInternal","onceInternal","un","unInternal","revision_","getRevision","isArray","len","ol_key","$1f093ab5083c8a1f$export$b7ef3f8527533384","$1f093ab5083c8a1f$export$2e2bcd8739ae039","$b68b3d6e32e3074a$export$cf395d7c4a2d5a17","oldValue","$b68b3d6e32e3074a$export$2e2bcd8739ae039","values","values_","setProperties","hasOwnProperty","getKeys","getProperties","assign","getPropertiesInternal","hasProperties","notify","eventType","addChangeListener","removeChangeListener","set","silent","applyProperties","unset","$ed6dc99f268f3882$var$adaptAttributions","attributionLike","frameState","$ed6dc99f268f3882$export$2e2bcd8739ae039","attributions_","attributions","attributionsCollapsible_","attributionsCollapsible","loading","state_","wrapX_","wrapX","interpolate_","viewResolver","viewRejector","viewPromise_","Promise","resolve","reject","getAttributions","getAttributionsCollapsible","getProjection","getResolutions","getView","getWrapX","getInterpolate","refresh","setAttributions","$550e524b0d1b61d4$var$TileRange","contains","containsXY","containsTileRange","tileRange","extend","getHeight","getSize","getWidth","intersects","$550e524b0d1b61d4$export$958e3e1a02eac4b6","$bf2a04496fadabc6$export$958e3e1a02eac4b6","$239aa88e7a573859$export$949a7a3a4b6f34fa","wn","$239aa88e7a573859$export$ae868c0f6acc3355","ends","$acee589e5b390c5c$export$40d8d71841a3d779","coordinatesExtent","ret","point1","point2","startRel","endRel","startX","startY","endX","endY","slope","$acee589e5b390c5c$export$830a0dafbb2ef1c5","$cc435a5409103773$export$a71a825ff42fb8e1","$bb602a307ef98bb5$var$tmpTileCoord","$bb602a307ef98bb5$export$2e2bcd8739ae039","zoomFactor","minZoom","resolutions_","resolutions","strict","compare","every","currentVal","res","origins","zoomFactor_","maxZoom","origin_","origin","origins_","tileSizes_","tileSizes","tileSize_","tileSize","fullTileRanges_","tmpSize_","tmpExtent_","sizes","map","restrictedTileRange","calculateTileRanges_","forEachTileCoord","zoom","forEachTileCoordParentTileRange","tempTileRange","tempExtent","tileCoordExtent","getMaxZoom","getMinZoom","getOrigin","getTileCoordChildTileRange","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","getTileCoordForXYAndZ_","getTileCoordCenter","getTileCoordForCoordAndResolution","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","tileCoordIntersectsViewport","viewport","fullTileRanges","$5779655d81caea04$export$1f4812384df8a9c5","$5779655d81caea04$export$ce88871416242df8","$5779655d81caea04$var$resolutionsFromExtent","$5779655d81caea04$export$7b5b6ef8fd55fac4","maxResolution","half","degrees","$988a11d09320f6a8$export$c571855c51e6c4b6","$988a11d09320f6a8$export$2e2bcd8739ae039","tilePixelRatio_","tilePixelRatio","tmpSize","key_","tileOptions","zDirection","getGutterForProjection","setKey","getTileGridForProjection","getTile","getTileGrid","getTilePixelRatio","getTilePixelSize","getTileCoordForTileUrlFunction","gridProjection","clear","$60db182c0252e220$var$zRegEx","$60db182c0252e220$var$xRegEx","$60db182c0252e220$var$yRegEx","$60db182c0252e220$var$dashYRegEx","$e6408236331c2614$var$UrlTile","cacheSize","generateTileUrlFunction_","tileUrlFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getPrototypeOf","getUrls","handleTileChange","uid","tileState","setTileLoadFunction","setTileUrlFunction","exec","charCode","startCharCode","charCodeAt","stopCharCode","fromCharCode","stop","toString","join","templates","tileUrlFunctions","$91dd08a0f5859882$export$f0ecb46e90798741","template","$e6408236331c2614$export$2e2bcd8739ae039","$51d055913ca55b5e$var$defaultTileLoadFunction","imageTile","$51d055913ca55b5e$export$2e2bcd8739ae039","tileClass","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","getGutter","thisProj","projKey","createTile_","urlTileCoord","tileUrl","sourceProjection","getTileInternal","setRenderReprojectionEdges","render","setTileGridForProjection","tilegrid","proj","$963a7ef65488964c$export$2e2bcd8739ae039","xyzOptions","$6c8498cc816f2362$export$2e2bcd8739ae039","$57c5f0299cb9b82f$export$2e2bcd8739ae039","background_","background","properties","opacity","visible","zIndex","minResolution","className_","className","getBackground","getClassName","getLayerState","managed","layer","getZIndex","getOpacity","getVisible","getMaxResolution","getMinResolution","getLayersArray","array","getLayerStatesArray","states","getSourceState","setBackground","setMaxResolution","setMinResolution","setMaxZoom","setMinZoom","setOpacity","setVisible","setZIndex","zindex","$f5e92a4d985a2824$export$2e2bcd8739ae039","PRERENDER","POSTRENDER","PRECOMPOSE","$7d362782b4ccb93d$export$2e2bcd8739ae039","ANIMATING","INTERACTING","$d35baefbe89be4c5$export$2e2bcd8739ae039","CENTER","RESOLUTION","ROTATION","$b21a6e049949bb31$export$c2f0af2c946f6897","onlyCenter","smooth","isMoving","centerShift","viewWidth","viewHeight","shiftX","shiftY","ratio","$b21a6e049949bb31$export$f883a24d5edde77c","$bac43a1f4a628548$var$getViewportClampedResolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","$bac43a1f4a628548$var$getSmoothClampedResolution","result","$bac43a1f4a628548$export$1c4e6da9b4b066fe","cappedMaxRes","$d65f0a322291d127$export$e20fbacbb41798b","rotation","$d65f0a322291d127$export$f883a24d5edde77c","$50db89a00eb954f6$var$tmpTransform","$50db89a00eb954f6$export$2e2bcd8739ae039","fn","lastResult","lastArgs","lastThis","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","getSimplifiedGeometry","clone","applyTransform","nextArgs","simplifyTransformed","closestPointXY","closestPoint","minSquaredDistance","getClosestPoint","NaN","intersectsCoordinate","computeExtent","isNaN","rotate","anchor","simplify","tolerance","getType","intersectsExtent","deltaX","deltaY","inCoordinates","outCoordinates","pixelExtent","projectedExtent","transformed","destinationStride","projTransform","$c76e993e57efc8c4$export$6af0c1b4a8549a43","layout","$c76e993e57efc8c4$export$2e2bcd8739ae039","getCoordinates","getFirstCoordinate","getFlatCoordinates","getLastCoordinate","getLayout","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","setCoordinates","setLayout","nesting","startsWith","anchorX","anchorY","$bf5604c1b8258b71$var$assignClosest","offset1","offset2","$bf5604c1b8258b71$export$bc2eb611ddf80103","squaredDelta","$bf5604c1b8258b71$export$4adc8e5135fb44c","maxDelta","isRing","tmpPoint","squaredDistance","$6b086aa46281540d$export$5c4daf67e03c190f","$8780aae6970f5f65$export$51a0620f7a28532b","$5454470599558ddd$export$9c0934e4e9c3f61e","$01ff26a2f986a1d0$export$3c5e1905f889266e","twiceArea","$548636579b4087f2$var$LinearRing","maxDelta_","maxDeltaRevision_","getArea","simplifiedOffset","markers","stack","last","pop","first","maxSquaredDistance","$6eced4c969949f6b$var$Point","$7892dc06ffd23218$export$318f2842ed17e094","edge","$7892dc06ffd23218$export$b71b604ddfc778c7","right","isClockwise","$40aa8d43bbe572bf$var$Polygon","ends_","flatInteriorPointRevision_","flatInteriorPoint_","orientedRevision_","orientedFlatCoordinates_","appendLinearRing","linearRing","extension","polygon","getOrientedFlatCoordinates","coordinatess","getEnds","getFlatInteriorPoint","flatCenter","flatCenters","flatCentersOffset","intersections","rr","pointX","maxSegmentLength","sort","segmentLength","getInteriorPoint","getLinearRingCount","getLinearRing","getLinearRings","linearRings","simplifiedEnds","$8780aae6970f5f65$export$b84e8d2c4920a0c6","x3","y3","$40aa8d43bbe572bf$export$c16b671815801c75","$70364d0195659942$var$animationCallback","returnValue","$70364d0195659942$var$calculateCenterOn","position","cosAngle","sinAngle","rotX","rotY","$70364d0195659942$export$2e2bcd8739ae039","hints_","animations_","updateAnimationKey_","projection_","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","applyOptions_","resolutionConstraintInfo","$70364d0195659942$export$c68d65f9148da196","resolutionConstraint","smoothResolutionConstraint","projExtent","constrainOnlyCenter","constrainResolution","defaultMaxResolution","zoomLevel","constraint","maxResolution_","minResolution_","padding_","padding","minZoom_","centerConstraint","$70364d0195659942$export$964345001ee9ac52","smoothExtentConstraint","rotationConstraint","$70364d0195659942$export$4eeaa08dd550e3c0","enableRotation","constrainRotation","theta","constraints_","setRotation","setCenterInternal","setResolution","setZoom","oldPadding","getCenterInternal","newPadding","offsetX","offsetY","getUpdatedOptions_","newOptions","getZoom","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","animateInternal","animationCount","Date","now","series","animation","complete","duration","easing","getResolutionForZoom","sourceRotation","targetRotation","setHint","updateAnimations_","getInteracting","cancelAnimations","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","currentResolution","w","h","setViewportSize","getCenter","getConstraints","getConstrainResolution","getHints","hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","$6da4c8ed3074c92b$export$4b7a6fb4002cd6ac","cosRotation","sinRotation","xCos","xSin","yCos","ySin","getZoomForResolution","setConstrainResolution","enabled","getResolutionForExtent","getResolutionForExtentInternal","getResolutionForValueFunction","power","getConstrainedResolution","getValueForResolutionFunction","logPower","reducedSize","nextCenter","nextResolution","nextRotation","getViewStateAndExtent","viewState","nearest","baseLevel","fit","geometryOrExtent","geometry","fitInternal","rotatedExtentForGeometry","coords","minRotX","minRotY","maxRotX","maxRotY","rotatedExtent","centerRot","centerX","centerY","getConstrainedCenter","centerOn","centerOnInternal","calculateCenterShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","adjustResolutionInternal","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","doNotCancelAnims","forceMoving","newCenter","resolutionDirection","beginInteraction","endInteraction","endInteractionInternal","getConstrainedZoom","targetZoom","targetRes","$534f30fce11effcd$export$2e2bcd8739ae039","baseOptions","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","sourceReady_","rendered","setMap","handleSourcePropertyChange_","setSource","getSource","getRenderSource","handleSourceChange_","getFeatures","pixel","getData","isVisible","view","layerState","getMapInternal","layerStatesArray","getLayerGroup","find","layerExtent","$534f30fce11effcd$export$acb1e9cb9ce4ca56","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","getDeclutter","renderDeclutter","renderDeferred","setMapInternal","handlePrecompose_","renderEvent","some","arrayLayerState","createRenderer","hasRenderer","clearRenderer","$93be2de6a052f587$export$2e2bcd8739ae039","preload","useInterimTilesOnError","cacheSize_","setPreload","setUseInterimTilesOnError","getCacheSize","getPreload","getUseInterimTilesOnError","$cb18cdefd702a327$export$2e2bcd8739ae039","ready","boundHandleImageChange_","handleImageChange_","layer_","staleKeys_","maxStaleKeys","getStaleKeys","prependStaleKey","unshift","forEachFeatureAtCoordinate","hitTolerance","matches","getLayer","handleFontsChanged","renderIfReadyAndVisible","loadImage","imageState","$b80dddceb0c42ad4$export$2e2bcd8739ae039","inversePixelTransform","$c1cb593c98d2cbd0$export$2e2bcd8739ae039","instructions_","offset_","context_","Proxy","pushMethodArgs_","pushFunction","draw","instructionsAtIndex","instructionAtIndex","$3751ab4954229b70$export$2e2bcd8739ae039","name","channel","alias","$3d55e8295660d0b8$var$xyz","whitepoint","A","C","D50","D55","D65","D75","F2","F7","F11","E","rgb","_xyz","white","g","xyz","$f857682ac15a36ea$export$2e2bcd8739ae039","arg","o","_u","_v","u","v","xn","yn","zn","vn","luv","yr","lchuv","hr","$e81b4034aa9db203$export$2e2bcd8739ae039","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellow","yellowgreen","$5481cadd51b98557$var$baseHues","$4b161c5b6bfbd933$export$2e2bcd8739ae039","hsl","t3","s","$322346e1ff7894ca$export$6c844c64a5efe1ee","$322346e1ff7894ca$var$cache","$322346e1ff7894ca$var$cacheSize","$322346e1ff7894ca$export$75093a47a9fa838d","color","$322346e1ff7894ca$export$3004f64547af360e","raw","Number","parsed","cstr","space","parts","alpha","base","dims","trim","split","parseFloat","endsWith","$42152f52b26b6ca7$var$pixelContext","$42152f52b26b6ca7$export$2e2bcd8739ae039","container","renderedResolution","tempTransform","pixelTransform","deferredContext_","containerReused","col","row","willReadFrequently","err","useContainer","backgroundColor","layerClassName","style","firstElementChild","HTMLCanvasElement","appendChild","left","transformOrigin","clipUnrotated","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","prepareContainer","det","f","canvasTransform","dispatchRenderEvent_","preRender","declutter","postRender","renderDeferredInternal","getRenderContext","getRenderTransform","$fd518ba473015b27$export$3a7c913cb40dcb7d","HTMLVideoElement","ImageBitmap","$fd518ba473015b27$export$df4c617b86128e3e","$fd518ba473015b27$var$sharedContext","$fd518ba473015b27$var$defaultSize","$fd518ba473015b27$export$2e2bcd8739ae039","loader_","loader","data_","error_","size_","controller_","controller","imageData","getError","abort","$859b1614288c6316$export$2e2bcd8739ae039","highWaterMark","count_","entries_","oldest_","newest_","deleteOldest","entry","canExpireCache","getCount","expireCache","keep","containsKey","value_","newer","older","remove","getValues","peekLast","peekLastKey","peekFirstKey","peek","setSize","$59dd9ee5df48d07b$export$185802fd694ee1f5","$59dd9ee5df48d07b$export$8e900afea9060a47","bottom","top","near","far","out","lr","bt","nf","$59dd9ee5df48d07b$export$dcdf75081b88279d","$5fb66954bcb40522$var$VERTEX_SHADER","$5fb66954bcb40522$var$FRAGMENT_SHADER","$5fb66954bcb40522$export$8d01c972ee8b14a9","gl","gl_","program_","$5fb66954bcb40522$export$327d24a04cd0dc17","positionLocation","getAttribLocation","texcoordLocation","matrixLocation","getUniformLocation","textureMatrixLocation","textureLocation","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","positions","bufferData","Float32Array","STATIC_DRAW","texcoordBuffer","texcoords","tex","texWidth","texHeight","dstX","dstY","dstWidth","dstHeight","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","bindTexture","TEXTURE_2D","useProgram","enableVertexAttribArray","vertexAttribPointer","FLOAT","matrix","uniformMatrix4fv","texMatrix","uniform1i","drawArrays","TRIANGLES","$5fb66954bcb40522$var$createShader","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentSource","vertexSource","program","createProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","$ba02ac0b2ef6ec8b$var$EDGE_VERTEX_SHADER","$ba02ac0b2ef6ec8b$var$EDGE_FRAGMENT_SHADER","$ba02ac0b2ef6ec8b$var$TRIANGLE_VERTEX_SHADER","$ba02ac0b2ef6ec8b$var$TRIANGLE_FRAGMENT_SHADER","$ba02ac0b2ef6ec8b$export$c7c6dba3373ce727","$4eec0210e41cb24b$export$2e2bcd8739ae039","Uint8ClampedArray","reprojData_","reprojError_","reprojSize_","sourceTileGridExtent","errorThresholdInPixels","transformMatrix","willInterpolate","textureType","dataSources","imageLike","tileData","arrayData","Uint8Array","DataView","pixelSize","isFloat","pixelCount","DataType","tileDataR","buffer","bytesPerElement","BYTES_PER_ELEMENT","bytesPerPixel","bandCount","bytesPerRow","byteLength","dataType","targetWidth","targetHeight","outWidth","outHeight","dataR","premultipliedAlpha","antialias","format","RGBA","getExtension","canInterpolate","UNSIGNED_BYTE","reprojs","reproj","dataSource","BANDS_PR_REPROJ","dataS","texture","createTexture","texParameteri","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","framebuffer","width_","height_","resultFrameBuffer","resultTexture","stitchTexture","stitchWidth","stitchHeight","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","maxTexSize","getParameter","MAX_TEXTURE_SIZE","largeSide","scaleFactor","stitchWidthFixed","stitchHeightFixed","fb","webGLCanvas","enable","SCISSOR_TEST","scissor","disable","deleteFramebuffer","getUVs","triProgram","su0","sv0","su1","sv1","su2","sv2","edgeProgram","burnval","burnvalLocation","uniform4fv","lines","reduce","concat","LINES","cols","rows","readPixels","flipY","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","ImageData","putImageData","$02fffef185f4339b$var$getCacheKey","sourceKey","$02fffef185f4339b$var$addTileToLookup","tilesByZ","Set","existing","has","add","$02fffef185f4339b$var$getRenderExtent","layerIndex","gridExtent","$02fffef185f4339b$export$2e2bcd8739ae039","tileLayer","extentChanged","renderComplete","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","renderedSourceKey_","renderedSourceRevision_","tempTileRange_","tempTileCoord_","tileCache_","getTileCache","getOrCreateTile","tileCache","tileSource","cacheKey","pixelToCoordinateTransform","tileOrigin","tileResolution","sourceRevision","renderedRevision_","enqueueTiles","initialZ","tileSourceKey","wantedTiles","minZ","tileQueueKey","tileQueue","isKeyQueued","enqueue","findStaleTile_","staleKeys","findAltTiles_","altZ","covered","currentClip","allTilesIdle","viewResolution","viewCenter","frameExtent","canvasExtent","nextExtent","targetZ","renderExtent","$02fffef185f4339b$var$removeTileFromLookup","delete","parentZ","canvasScale","zs","clips","clipZs","currentZ","currentTilePixelSize","currentScale","originTileCoord","originTileExtent","tileGutter","xIndex","nextX","yIndex","nextY","contextSaved","drawTile","updateUsedTiles","usedTiles","postRenderFunctions","tilesCount","updateCacheSize","tileCount","getTileImage","alphaChanged","globalAlpha"],"version":3,"file":"index.fc974814.js.map"}